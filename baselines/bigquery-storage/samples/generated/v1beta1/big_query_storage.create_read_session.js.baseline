
'use strict';

function main() {
  // [START storage_create_read_session_sample]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. Reference to the table to read.
   */
  // const tableReference = ''
  /**
   *  Required. String of the form `projects/{project_id}` indicating the
   *  project this ReadSession is associated with. This is the project that will
   *  be billed for usage.
   */
  // const parent = 'abc123'
  /**
   *  Any modifiers to the Table (e.g. snapshot timestamp).
   */
  // const tableModifiers = ''
  /**
   *  Initial number of streams. If unset or 0, we will
   *  provide a value of streams so as to produce reasonable throughput. Must be
   *  non-negative. The number of streams may be lower than the requested number,
   *  depending on the amount parallelism that is reasonable for the table and
   *  the maximum amount of parallelism allowed by the system.
   *  Streams must be read starting from offset 0.
   */
  // const requestedStreams = 1234
  /**
   *  Read options for this session (e.g. column selection, filters).
   */
  // const readOptions = ''
  /**
   *  Data output format. Currently default to Avro.
   */
  // const format = ''
  /**
   *  The strategy to use for distributing data among multiple streams. Currently
   *  defaults to liquid sharding.
   */
  // const shardingStrategy = ''

  // Imports the Storage library
  const {BigQueryStorageClient} = require('storage').v1beta1;

  // Instantiates a client
  const storageClient = new BigQueryStorageClient();

  async function createReadSession() {
    // Construct request
    const request = {
      tableReference,
      parent,
    };

    // Run request
    const response = await storageClient.createReadSession(request);
    console.log(`Response: ${JSON.stringify(response)}`);
  }

  createReadSession();
  // [END storage_create_read_session_sample]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
