


'use strict';

function main() {
  // [START compute_insert_sample]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  The body resource for this request
   */
  // const addressResource =''
  /**
   *  Project ID for this request.
   */
  // const project ='abc123'
  /**
   *  Name of the region for this request.
   */
  // const region ='abc123'
  /**
   *  An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
   *  For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
   *  The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
   */
  // const requestId ='abc123'

  // Imports the Compute library
  const {AddressesClient} = require('');

  // Instantiates a client
  const computeClient = new AddressesClient();

  async function insert() {
    // Construct request
    const request = {
      addressResource,
      project,
      region,
    };

    // Run request
    const response = await computeClient.insert(request);
    console.log(`Response: ${response}`);
  }

  insert();
  // [END compute_insert_sample]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
