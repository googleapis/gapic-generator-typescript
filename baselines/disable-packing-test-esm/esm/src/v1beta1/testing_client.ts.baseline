// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';
import {Transform} from 'stream';
// @ts-ignore
import type * as protos from '../../../protos/protos.js';
import * as testing_client_config from './testing_client_config.json';
import fs from 'fs';
import path from 'path';
import {fileURLToPath} from 'url';
// @ts-ignore
const dirname = path.dirname(fileURLToPath(import.meta.url));

/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/testing_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = JSON.parse(fs.readFileSync(path.join(dirname, 'testing_client_config.json'),'utf8'));
const jsonProtos = JSON.parse(fs.readFileSync(path.join(dirname, '..', '..', '..', 'protos/protos.json'), 'utf8'));
const version = JSON.parse(fs.readFileSync(path.join(dirname, '..', '..', '..', '..', 'package.json'), 'utf8')).version;

/**
 *  A service to facilitate running discrete sets of tests
 *  against Showcase.
 * @class
 * @memberof v1beta1
 */
export class TestingClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  testingStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of TestingClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new TestingClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof TestingClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? 'googleapis.com';
    this._servicePath = 'localhost';
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = gax as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Add ESM headers
    const isEsm = true;
    if (opts.libVersion && isEsm) {
      clientHeader.push(`${opts.libVersion}-esm`);
    } else if (opts.libVersion && !isEsm) {
      clientHeader.push(`${opts.libVersion}-cjs`);
    }

    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos as gax.protobuf.INamespace);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      blueprintPathTemplate: new this._gaxModule.PathTemplate(
        'sessions/{session}/tests/{test}/blueprints/{blueprint}'
      ),
      roomPathTemplate: new this._gaxModule.PathTemplate(
        'rooms/{room}'
      ),
      roomBlurbPathTemplate: new this._gaxModule.PathTemplate(
        'rooms/{room}/blurbs/{blurb}'
      ),
      roomBlurbsLegacyRoomBlurbPathTemplate: new this._gaxModule.PathTemplate(
        'rooms/{room}/blurbs/legacy/{legacy_room}.{blurb}'
      ),
      sequencePathTemplate: new this._gaxModule.PathTemplate(
        'sequences/{sequence}'
      ),
      sequenceReportPathTemplate: new this._gaxModule.PathTemplate(
        'sequences/{sequence}/sequenceReport'
      ),
      sessionPathTemplate: new this._gaxModule.PathTemplate(
        'sessions/{session}'
      ),
      testPathTemplate: new this._gaxModule.PathTemplate(
        'sessions/{session}/tests/{test}'
      ),
      userPathTemplate: new this._gaxModule.PathTemplate(
        'users/{user}'
      ),
      userProfileBlurbPathTemplate: new this._gaxModule.PathTemplate(
        'users/{user}/profile/blurbs/{blurb}'
      ),
      userProfileBlurbsLegacyUserBlurbPathTemplate: new this._gaxModule.PathTemplate(
        'users/{user}/profile/blurbs/legacy/{legacy_user}~{blurb}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listSessions:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'sessions'),
      listTests:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'tests')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.showcase.v1beta1.Testing', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.testingStub) {
      return this.testingStub;
    }

    // Put together the "service stub" for
    // google.showcase.v1beta1.Testing.
    this.testingStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.showcase.v1beta1.Testing') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.showcase.v1beta1.Testing,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const testingStubMethods =
        ['createSession', 'getSession', 'listSessions', 'deleteSession', 'reportSession', 'listTests', 'deleteTest', 'verifyTest'];
    for (const methodName of testingStubMethods) {
      const callPromise = this.testingStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.testingStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process !== undefined && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'localhost';
  }

  /**
   * The DNS address for this API service - same as servicePath,
   * exists for compatibility reasons.
   * @deprecated
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process !== undefined && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'localhost';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get servicePath() {
    return this._servicePath;
  }

  /**
   * The DNS address for this API service - same as servicePath().
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 7469;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Creates a new testing session.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.showcase.v1beta1.Session} request.session
 *   The session to be created.
 *   Sessions are immutable once they are created (although they can
 *   be deleted).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.showcase.v1beta1.Session|Session}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/testing.create_session.js</caption>
 * region_tag:localhost_v1beta1_generated_Testing_CreateSession_async
 */
  createSession(
      request?: protos.google.showcase.v1beta1.ICreateSessionRequest,
      options?: CallOptions):
      Promise<[
        protos.google.showcase.v1beta1.ISession,
        protos.google.showcase.v1beta1.ICreateSessionRequest|undefined, {}|undefined
      ]>;
  createSession(
      request: protos.google.showcase.v1beta1.ICreateSessionRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.showcase.v1beta1.ISession,
          protos.google.showcase.v1beta1.ICreateSessionRequest|null|undefined,
          {}|null|undefined>): void;
  createSession(
      request: protos.google.showcase.v1beta1.ICreateSessionRequest,
      callback: Callback<
          protos.google.showcase.v1beta1.ISession,
          protos.google.showcase.v1beta1.ICreateSessionRequest|null|undefined,
          {}|null|undefined>): void;
  createSession(
      request?: protos.google.showcase.v1beta1.ICreateSessionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.showcase.v1beta1.ISession,
          protos.google.showcase.v1beta1.ICreateSessionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.showcase.v1beta1.ISession,
          protos.google.showcase.v1beta1.ICreateSessionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.showcase.v1beta1.ISession,
        protos.google.showcase.v1beta1.ICreateSessionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.createSession(request, options, callback);
  }
/**
 * Gets a testing session.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The session to be retrieved.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.showcase.v1beta1.Session|Session}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/testing.get_session.js</caption>
 * region_tag:localhost_v1beta1_generated_Testing_GetSession_async
 */
  getSession(
      request?: protos.google.showcase.v1beta1.IGetSessionRequest,
      options?: CallOptions):
      Promise<[
        protos.google.showcase.v1beta1.ISession,
        protos.google.showcase.v1beta1.IGetSessionRequest|undefined, {}|undefined
      ]>;
  getSession(
      request: protos.google.showcase.v1beta1.IGetSessionRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.showcase.v1beta1.ISession,
          protos.google.showcase.v1beta1.IGetSessionRequest|null|undefined,
          {}|null|undefined>): void;
  getSession(
      request: protos.google.showcase.v1beta1.IGetSessionRequest,
      callback: Callback<
          protos.google.showcase.v1beta1.ISession,
          protos.google.showcase.v1beta1.IGetSessionRequest|null|undefined,
          {}|null|undefined>): void;
  getSession(
      request?: protos.google.showcase.v1beta1.IGetSessionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.showcase.v1beta1.ISession,
          protos.google.showcase.v1beta1.IGetSessionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.showcase.v1beta1.ISession,
          protos.google.showcase.v1beta1.IGetSessionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.showcase.v1beta1.ISession,
        protos.google.showcase.v1beta1.IGetSessionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getSession(request, options, callback);
  }
/**
 * Delete a test session.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The session to be deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/testing.delete_session.js</caption>
 * region_tag:localhost_v1beta1_generated_Testing_DeleteSession_async
 */
  deleteSession(
      request?: protos.google.showcase.v1beta1.IDeleteSessionRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.showcase.v1beta1.IDeleteSessionRequest|undefined, {}|undefined
      ]>;
  deleteSession(
      request: protos.google.showcase.v1beta1.IDeleteSessionRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteSessionRequest|null|undefined,
          {}|null|undefined>): void;
  deleteSession(
      request: protos.google.showcase.v1beta1.IDeleteSessionRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteSessionRequest|null|undefined,
          {}|null|undefined>): void;
  deleteSession(
      request?: protos.google.showcase.v1beta1.IDeleteSessionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteSessionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteSessionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.showcase.v1beta1.IDeleteSessionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteSession(request, options, callback);
  }
/**
 * Report on the status of a session.
 * This generates a report detailing which tests have been completed,
 * and an overall rollup.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The session to be reported on.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.showcase.v1beta1.ReportSessionResponse|ReportSessionResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/testing.report_session.js</caption>
 * region_tag:localhost_v1beta1_generated_Testing_ReportSession_async
 */
  reportSession(
      request?: protos.google.showcase.v1beta1.IReportSessionRequest,
      options?: CallOptions):
      Promise<[
        protos.google.showcase.v1beta1.IReportSessionResponse,
        protos.google.showcase.v1beta1.IReportSessionRequest|undefined, {}|undefined
      ]>;
  reportSession(
      request: protos.google.showcase.v1beta1.IReportSessionRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.showcase.v1beta1.IReportSessionResponse,
          protos.google.showcase.v1beta1.IReportSessionRequest|null|undefined,
          {}|null|undefined>): void;
  reportSession(
      request: protos.google.showcase.v1beta1.IReportSessionRequest,
      callback: Callback<
          protos.google.showcase.v1beta1.IReportSessionResponse,
          protos.google.showcase.v1beta1.IReportSessionRequest|null|undefined,
          {}|null|undefined>): void;
  reportSession(
      request?: protos.google.showcase.v1beta1.IReportSessionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.showcase.v1beta1.IReportSessionResponse,
          protos.google.showcase.v1beta1.IReportSessionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.showcase.v1beta1.IReportSessionResponse,
          protos.google.showcase.v1beta1.IReportSessionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.showcase.v1beta1.IReportSessionResponse,
        protos.google.showcase.v1beta1.IReportSessionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.reportSession(request, options, callback);
  }
/**
 * Explicitly decline to implement a test.
 *
 * This removes the test from subsequent `ListTests` calls, and
 * attempting to do the test will error.
 *
 * This method will error if attempting to delete a required test.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The test to be deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/testing.delete_test.js</caption>
 * region_tag:localhost_v1beta1_generated_Testing_DeleteTest_async
 */
  deleteTest(
      request?: protos.google.showcase.v1beta1.IDeleteTestRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.showcase.v1beta1.IDeleteTestRequest|undefined, {}|undefined
      ]>;
  deleteTest(
      request: protos.google.showcase.v1beta1.IDeleteTestRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteTestRequest|null|undefined,
          {}|null|undefined>): void;
  deleteTest(
      request: protos.google.showcase.v1beta1.IDeleteTestRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteTestRequest|null|undefined,
          {}|null|undefined>): void;
  deleteTest(
      request?: protos.google.showcase.v1beta1.IDeleteTestRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteTestRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteTestRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.showcase.v1beta1.IDeleteTestRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteTest(request, options, callback);
  }
/**
 * Register a response to a test.
 *
 * In cases where a test involves registering a final answer at the
 * end of the test, this method provides the means to do so.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The test to have an answer registered to it.
 * @param {Buffer} request.answer
 *   The answer from the test.
 * @param {Buffer[]} request.answers
 *   The answers from the test if multiple are to be checked
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.showcase.v1beta1.VerifyTestResponse|VerifyTestResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/testing.verify_test.js</caption>
 * region_tag:localhost_v1beta1_generated_Testing_VerifyTest_async
 */
  verifyTest(
      request?: protos.google.showcase.v1beta1.IVerifyTestRequest,
      options?: CallOptions):
      Promise<[
        protos.google.showcase.v1beta1.IVerifyTestResponse,
        protos.google.showcase.v1beta1.IVerifyTestRequest|undefined, {}|undefined
      ]>;
  verifyTest(
      request: protos.google.showcase.v1beta1.IVerifyTestRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.showcase.v1beta1.IVerifyTestResponse,
          protos.google.showcase.v1beta1.IVerifyTestRequest|null|undefined,
          {}|null|undefined>): void;
  verifyTest(
      request: protos.google.showcase.v1beta1.IVerifyTestRequest,
      callback: Callback<
          protos.google.showcase.v1beta1.IVerifyTestResponse,
          protos.google.showcase.v1beta1.IVerifyTestRequest|null|undefined,
          {}|null|undefined>): void;
  verifyTest(
      request?: protos.google.showcase.v1beta1.IVerifyTestRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.showcase.v1beta1.IVerifyTestResponse,
          protos.google.showcase.v1beta1.IVerifyTestRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.showcase.v1beta1.IVerifyTestResponse,
          protos.google.showcase.v1beta1.IVerifyTestRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.showcase.v1beta1.IVerifyTestResponse,
        protos.google.showcase.v1beta1.IVerifyTestRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.verifyTest(request, options, callback);
  }

 /**
 * Lists the current test sessions.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of sessions to return per page.
 * @param {string} request.pageToken
 *   The page token, for retrieving subsequent pages.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.showcase.v1beta1.Session|Session}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listSessionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listSessions(
      request?: protos.google.showcase.v1beta1.IListSessionsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.showcase.v1beta1.ISession[],
        protos.google.showcase.v1beta1.IListSessionsRequest|null,
        protos.google.showcase.v1beta1.IListSessionsResponse
      ]>;
  listSessions(
      request: protos.google.showcase.v1beta1.IListSessionsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.showcase.v1beta1.IListSessionsRequest,
          protos.google.showcase.v1beta1.IListSessionsResponse|null|undefined,
          protos.google.showcase.v1beta1.ISession>): void;
  listSessions(
      request: protos.google.showcase.v1beta1.IListSessionsRequest,
      callback: PaginationCallback<
          protos.google.showcase.v1beta1.IListSessionsRequest,
          protos.google.showcase.v1beta1.IListSessionsResponse|null|undefined,
          protos.google.showcase.v1beta1.ISession>): void;
  listSessions(
      request?: protos.google.showcase.v1beta1.IListSessionsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.showcase.v1beta1.IListSessionsRequest,
          protos.google.showcase.v1beta1.IListSessionsResponse|null|undefined,
          protos.google.showcase.v1beta1.ISession>,
      callback?: PaginationCallback<
          protos.google.showcase.v1beta1.IListSessionsRequest,
          protos.google.showcase.v1beta1.IListSessionsResponse|null|undefined,
          protos.google.showcase.v1beta1.ISession>):
      Promise<[
        protos.google.showcase.v1beta1.ISession[],
        protos.google.showcase.v1beta1.IListSessionsRequest|null,
        protos.google.showcase.v1beta1.IListSessionsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.listSessions(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of sessions to return per page.
 * @param {string} request.pageToken
 *   The page token, for retrieving subsequent pages.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.showcase.v1beta1.Session|Session} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listSessionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listSessionsStream(
      request?: protos.google.showcase.v1beta1.IListSessionsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listSessions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSessions.createStream(
      this.innerApiCalls.listSessions as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listSessions`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of sessions to return per page.
 * @param {string} request.pageToken
 *   The page token, for retrieving subsequent pages.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.showcase.v1beta1.Session|Session}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/testing.list_sessions.js</caption>
 * region_tag:localhost_v1beta1_generated_Testing_ListSessions_async
 */
  listSessionsAsync(
      request?: protos.google.showcase.v1beta1.IListSessionsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.showcase.v1beta1.ISession>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listSessions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSessions.asyncIterate(
      this.innerApiCalls['listSessions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.showcase.v1beta1.ISession>;
  }
 /**
 * List the tests of a sessesion.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The session.
 * @param {number} request.pageSize
 *   The maximum number of tests to return per page.
 * @param {string} request.pageToken
 *   The page token, for retrieving subsequent pages.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.showcase.v1beta1.Test|Test}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listTestsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listTests(
      request?: protos.google.showcase.v1beta1.IListTestsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.showcase.v1beta1.ITest[],
        protos.google.showcase.v1beta1.IListTestsRequest|null,
        protos.google.showcase.v1beta1.IListTestsResponse
      ]>;
  listTests(
      request: protos.google.showcase.v1beta1.IListTestsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.showcase.v1beta1.IListTestsRequest,
          protos.google.showcase.v1beta1.IListTestsResponse|null|undefined,
          protos.google.showcase.v1beta1.ITest>): void;
  listTests(
      request: protos.google.showcase.v1beta1.IListTestsRequest,
      callback: PaginationCallback<
          protos.google.showcase.v1beta1.IListTestsRequest,
          protos.google.showcase.v1beta1.IListTestsResponse|null|undefined,
          protos.google.showcase.v1beta1.ITest>): void;
  listTests(
      request?: protos.google.showcase.v1beta1.IListTestsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.showcase.v1beta1.IListTestsRequest,
          protos.google.showcase.v1beta1.IListTestsResponse|null|undefined,
          protos.google.showcase.v1beta1.ITest>,
      callback?: PaginationCallback<
          protos.google.showcase.v1beta1.IListTestsRequest,
          protos.google.showcase.v1beta1.IListTestsResponse|null|undefined,
          protos.google.showcase.v1beta1.ITest>):
      Promise<[
        protos.google.showcase.v1beta1.ITest[],
        protos.google.showcase.v1beta1.IListTestsRequest|null,
        protos.google.showcase.v1beta1.IListTestsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listTests(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The session.
 * @param {number} request.pageSize
 *   The maximum number of tests to return per page.
 * @param {string} request.pageToken
 *   The page token, for retrieving subsequent pages.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.showcase.v1beta1.Test|Test} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listTestsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listTestsStream(
      request?: protos.google.showcase.v1beta1.IListTestsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listTests'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTests.createStream(
      this.innerApiCalls.listTests as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listTests`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The session.
 * @param {number} request.pageSize
 *   The maximum number of tests to return per page.
 * @param {string} request.pageToken
 *   The page token, for retrieving subsequent pages.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.showcase.v1beta1.Test|Test}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/testing.list_tests.js</caption>
 * region_tag:localhost_v1beta1_generated_Testing_ListTests_async
 */
  listTestsAsync(
      request?: protos.google.showcase.v1beta1.IListTestsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.showcase.v1beta1.ITest>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listTests'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTests.asyncIterate(
      this.innerApiCalls['listTests'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.showcase.v1beta1.ITest>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified blueprint resource name string.
   *
   * @param {string} session
   * @param {string} test
   * @param {string} blueprint
   * @returns {string} Resource name string.
   */
  blueprintPath(session:string,test:string,blueprint:string) {
    return this.pathTemplates.blueprintPathTemplate.render({
      session: session,
      test: test,
      blueprint: blueprint,
    });
  }

  /**
   * Parse the session from Blueprint resource.
   *
   * @param {string} blueprintName
   *   A fully-qualified path representing Blueprint resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromBlueprintName(blueprintName: string) {
    return this.pathTemplates.blueprintPathTemplate.match(blueprintName).session;
  }

  /**
   * Parse the test from Blueprint resource.
   *
   * @param {string} blueprintName
   *   A fully-qualified path representing Blueprint resource.
   * @returns {string} A string representing the test.
   */
  matchTestFromBlueprintName(blueprintName: string) {
    return this.pathTemplates.blueprintPathTemplate.match(blueprintName).test;
  }

  /**
   * Parse the blueprint from Blueprint resource.
   *
   * @param {string} blueprintName
   *   A fully-qualified path representing Blueprint resource.
   * @returns {string} A string representing the blueprint.
   */
  matchBlueprintFromBlueprintName(blueprintName: string) {
    return this.pathTemplates.blueprintPathTemplate.match(blueprintName).blueprint;
  }

  /**
   * Return a fully-qualified room resource name string.
   *
   * @param {string} room
   * @returns {string} Resource name string.
   */
  roomPath(room:string) {
    return this.pathTemplates.roomPathTemplate.render({
      room: room,
    });
  }

  /**
   * Parse the room from Room resource.
   *
   * @param {string} roomName
   *   A fully-qualified path representing Room resource.
   * @returns {string} A string representing the room.
   */
  matchRoomFromRoomName(roomName: string) {
    return this.pathTemplates.roomPathTemplate.match(roomName).room;
  }

  /**
   * Return a fully-qualified roomBlurb resource name string.
   *
   * @param {string} room
   * @param {string} blurb
   * @returns {string} Resource name string.
   */
  roomBlurbPath(room:string,blurb:string) {
    return this.pathTemplates.roomBlurbPathTemplate.render({
      room: room,
      blurb: blurb,
    });
  }

  /**
   * Parse the room from RoomBlurb resource.
   *
   * @param {string} roomBlurbName
   *   A fully-qualified path representing room_blurb resource.
   * @returns {string} A string representing the room.
   */
  matchRoomFromRoomBlurbName(roomBlurbName: string) {
    return this.pathTemplates.roomBlurbPathTemplate.match(roomBlurbName).room;
  }

  /**
   * Parse the blurb from RoomBlurb resource.
   *
   * @param {string} roomBlurbName
   *   A fully-qualified path representing room_blurb resource.
   * @returns {string} A string representing the blurb.
   */
  matchBlurbFromRoomBlurbName(roomBlurbName: string) {
    return this.pathTemplates.roomBlurbPathTemplate.match(roomBlurbName).blurb;
  }

  /**
   * Return a fully-qualified roomBlurbsLegacyRoomBlurb resource name string.
   *
   * @param {string} room
   * @param {string} legacy_room
   * @param {string} blurb
   * @returns {string} Resource name string.
   */
  roomBlurbsLegacyRoomBlurbPath(room:string,legacyRoom:string,blurb:string) {
    return this.pathTemplates.roomBlurbsLegacyRoomBlurbPathTemplate.render({
      room: room,
      legacy_room: legacyRoom,
      blurb: blurb,
    });
  }

  /**
   * Parse the room from RoomBlurbsLegacyRoomBlurb resource.
   *
   * @param {string} roomBlurbsLegacyRoomBlurbName
   *   A fully-qualified path representing room_blurbs_legacy_room_blurb resource.
   * @returns {string} A string representing the room.
   */
  matchRoomFromRoomBlurbsLegacyRoomBlurbName(roomBlurbsLegacyRoomBlurbName: string) {
    return this.pathTemplates.roomBlurbsLegacyRoomBlurbPathTemplate.match(roomBlurbsLegacyRoomBlurbName).room;
  }

  /**
   * Parse the legacy_room from RoomBlurbsLegacyRoomBlurb resource.
   *
   * @param {string} roomBlurbsLegacyRoomBlurbName
   *   A fully-qualified path representing room_blurbs_legacy_room_blurb resource.
   * @returns {string} A string representing the legacy_room.
   */
  matchLegacyRoomFromRoomBlurbsLegacyRoomBlurbName(roomBlurbsLegacyRoomBlurbName: string) {
    return this.pathTemplates.roomBlurbsLegacyRoomBlurbPathTemplate.match(roomBlurbsLegacyRoomBlurbName).legacy_room;
  }

  /**
   * Parse the blurb from RoomBlurbsLegacyRoomBlurb resource.
   *
   * @param {string} roomBlurbsLegacyRoomBlurbName
   *   A fully-qualified path representing room_blurbs_legacy_room_blurb resource.
   * @returns {string} A string representing the blurb.
   */
  matchBlurbFromRoomBlurbsLegacyRoomBlurbName(roomBlurbsLegacyRoomBlurbName: string) {
    return this.pathTemplates.roomBlurbsLegacyRoomBlurbPathTemplate.match(roomBlurbsLegacyRoomBlurbName).blurb;
  }

  /**
   * Return a fully-qualified sequence resource name string.
   *
   * @param {string} sequence
   * @returns {string} Resource name string.
   */
  sequencePath(sequence:string) {
    return this.pathTemplates.sequencePathTemplate.render({
      sequence: sequence,
    });
  }

  /**
   * Parse the sequence from Sequence resource.
   *
   * @param {string} sequenceName
   *   A fully-qualified path representing Sequence resource.
   * @returns {string} A string representing the sequence.
   */
  matchSequenceFromSequenceName(sequenceName: string) {
    return this.pathTemplates.sequencePathTemplate.match(sequenceName).sequence;
  }

  /**
   * Return a fully-qualified sequenceReport resource name string.
   *
   * @param {string} sequence
   * @returns {string} Resource name string.
   */
  sequenceReportPath(sequence:string) {
    return this.pathTemplates.sequenceReportPathTemplate.render({
      sequence: sequence,
    });
  }

  /**
   * Parse the sequence from SequenceReport resource.
   *
   * @param {string} sequenceReportName
   *   A fully-qualified path representing SequenceReport resource.
   * @returns {string} A string representing the sequence.
   */
  matchSequenceFromSequenceReportName(sequenceReportName: string) {
    return this.pathTemplates.sequenceReportPathTemplate.match(sequenceReportName).sequence;
  }

  /**
   * Return a fully-qualified session resource name string.
   *
   * @param {string} session
   * @returns {string} Resource name string.
   */
  sessionPath(session:string) {
    return this.pathTemplates.sessionPathTemplate.render({
      session: session,
    });
  }

  /**
   * Parse the session from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).session;
  }

  /**
   * Return a fully-qualified test resource name string.
   *
   * @param {string} session
   * @param {string} test
   * @returns {string} Resource name string.
   */
  testPath(session:string,test:string) {
    return this.pathTemplates.testPathTemplate.render({
      session: session,
      test: test,
    });
  }

  /**
   * Parse the session from Test resource.
   *
   * @param {string} testName
   *   A fully-qualified path representing Test resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromTestName(testName: string) {
    return this.pathTemplates.testPathTemplate.match(testName).session;
  }

  /**
   * Parse the test from Test resource.
   *
   * @param {string} testName
   *   A fully-qualified path representing Test resource.
   * @returns {string} A string representing the test.
   */
  matchTestFromTestName(testName: string) {
    return this.pathTemplates.testPathTemplate.match(testName).test;
  }

  /**
   * Return a fully-qualified user resource name string.
   *
   * @param {string} user
   * @returns {string} Resource name string.
   */
  userPath(user:string) {
    return this.pathTemplates.userPathTemplate.render({
      user: user,
    });
  }

  /**
   * Parse the user from User resource.
   *
   * @param {string} userName
   *   A fully-qualified path representing User resource.
   * @returns {string} A string representing the user.
   */
  matchUserFromUserName(userName: string) {
    return this.pathTemplates.userPathTemplate.match(userName).user;
  }

  /**
   * Return a fully-qualified userProfileBlurb resource name string.
   *
   * @param {string} user
   * @param {string} blurb
   * @returns {string} Resource name string.
   */
  userProfileBlurbPath(user:string,blurb:string) {
    return this.pathTemplates.userProfileBlurbPathTemplate.render({
      user: user,
      blurb: blurb,
    });
  }

  /**
   * Parse the user from UserProfileBlurb resource.
   *
   * @param {string} userProfileBlurbName
   *   A fully-qualified path representing user_profile_blurb resource.
   * @returns {string} A string representing the user.
   */
  matchUserFromUserProfileBlurbName(userProfileBlurbName: string) {
    return this.pathTemplates.userProfileBlurbPathTemplate.match(userProfileBlurbName).user;
  }

  /**
   * Parse the blurb from UserProfileBlurb resource.
   *
   * @param {string} userProfileBlurbName
   *   A fully-qualified path representing user_profile_blurb resource.
   * @returns {string} A string representing the blurb.
   */
  matchBlurbFromUserProfileBlurbName(userProfileBlurbName: string) {
    return this.pathTemplates.userProfileBlurbPathTemplate.match(userProfileBlurbName).blurb;
  }

  /**
   * Return a fully-qualified userProfileBlurbsLegacyUserBlurb resource name string.
   *
   * @param {string} user
   * @param {string} legacy_user
   * @param {string} blurb
   * @returns {string} Resource name string.
   */
  userProfileBlurbsLegacyUserBlurbPath(user:string,legacyUser:string,blurb:string) {
    return this.pathTemplates.userProfileBlurbsLegacyUserBlurbPathTemplate.render({
      user: user,
      legacy_user: legacyUser,
      blurb: blurb,
    });
  }

  /**
   * Parse the user from UserProfileBlurbsLegacyUserBlurb resource.
   *
   * @param {string} userProfileBlurbsLegacyUserBlurbName
   *   A fully-qualified path representing user_profile_blurbs_legacy_user_blurb resource.
   * @returns {string} A string representing the user.
   */
  matchUserFromUserProfileBlurbsLegacyUserBlurbName(userProfileBlurbsLegacyUserBlurbName: string) {
    return this.pathTemplates.userProfileBlurbsLegacyUserBlurbPathTemplate.match(userProfileBlurbsLegacyUserBlurbName).user;
  }

  /**
   * Parse the legacy_user from UserProfileBlurbsLegacyUserBlurb resource.
   *
   * @param {string} userProfileBlurbsLegacyUserBlurbName
   *   A fully-qualified path representing user_profile_blurbs_legacy_user_blurb resource.
   * @returns {string} A string representing the legacy_user.
   */
  matchLegacyUserFromUserProfileBlurbsLegacyUserBlurbName(userProfileBlurbsLegacyUserBlurbName: string) {
    return this.pathTemplates.userProfileBlurbsLegacyUserBlurbPathTemplate.match(userProfileBlurbsLegacyUserBlurbName).legacy_user;
  }

  /**
   * Parse the blurb from UserProfileBlurbsLegacyUserBlurb resource.
   *
   * @param {string} userProfileBlurbsLegacyUserBlurbName
   *   A fully-qualified path representing user_profile_blurbs_legacy_user_blurb resource.
   * @returns {string} A string representing the blurb.
   */
  matchBlurbFromUserProfileBlurbsLegacyUserBlurbName(userProfileBlurbsLegacyUserBlurbName: string) {
    return this.pathTemplates.userProfileBlurbsLegacyUserBlurbPathTemplate.match(userProfileBlurbsLegacyUserBlurbName).blurb;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.testingStub && !this._terminated) {
      return this.testingStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
