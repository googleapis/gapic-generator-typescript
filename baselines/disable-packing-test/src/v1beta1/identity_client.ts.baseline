// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/identity_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './identity_client_config.json';

const version = require('../../../package.json').version;

/**
 *  A simple identity service.
 * @class
 * @memberof v1beta1
 */
export class IdentityClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  identityStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of IdentityClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof IdentityClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      blueprintPathTemplate: new this._gaxModule.PathTemplate(
        'sessions/{session}/tests/{test}/blueprints/{blueprint}'
      ),
      roomPathTemplate: new this._gaxModule.PathTemplate(
        'rooms/{room_id}'
      ),
      roomIdBlurbIdPathTemplate: new this._gaxModule.PathTemplate(
        'rooms/{room_id}/blurbs/{blurb_id}'
      ),
      roomIdBlurbsLegacyRoomIdBlurbIdPathTemplate: new this._gaxModule.PathTemplate(
        'rooms/{room_id}/blurbs/legacy/{legacy_room_id}.{blurb_id}'
      ),
      sessionPathTemplate: new this._gaxModule.PathTemplate(
        'sessions/{session}'
      ),
      testPathTemplate: new this._gaxModule.PathTemplate(
        'sessions/{session}/tests/{test}'
      ),
      userPathTemplate: new this._gaxModule.PathTemplate(
        'users/{user_id}'
      ),
      userIdProfileBlurbIdPathTemplate: new this._gaxModule.PathTemplate(
        'user/{user_id}/profile/blurbs/{blurb_id}'
      ),
      userIdProfileBlurbsLegacyUserIdBlurbIdPathTemplate: new this._gaxModule.PathTemplate(
        'user/{user_id}/profile/blurbs/legacy/{legacy_user_id}~{blurb_id}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listUsers:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'users')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.showcase.v1beta1.Identity', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = gax.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.identityStub) {
      return this.identityStub;
    }

    // Put together the "service stub" for
    // google.showcase.v1beta1.Identity.
    this.identityStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.showcase.v1beta1.Identity') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.showcase.v1beta1.Identity,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const identityStubMethods =
        ['createUser', 'getUser', 'updateUser', 'deleteUser', 'listUsers'];
    for (const methodName of identityStubMethods) {
      const callPromise = this.identityStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.identityStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'localhost';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'localhost';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 7469;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Creates a user.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.showcase.v1beta1.User} request.user
 *   The user to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [User]{@link google.showcase.v1beta1.User}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/identity.create_user.js</caption>
 * region_tag:localhost_v1beta1_generated_Identity_CreateUser_async
 */
  createUser(
      request?: protos.google.showcase.v1beta1.ICreateUserRequest,
      options?: CallOptions):
      Promise<[
        protos.google.showcase.v1beta1.IUser,
        protos.google.showcase.v1beta1.ICreateUserRequest|undefined, {}|undefined
      ]>;
  createUser(
      request: protos.google.showcase.v1beta1.ICreateUserRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.showcase.v1beta1.IUser,
          protos.google.showcase.v1beta1.ICreateUserRequest|null|undefined,
          {}|null|undefined>): void;
  createUser(
      request: protos.google.showcase.v1beta1.ICreateUserRequest,
      callback: Callback<
          protos.google.showcase.v1beta1.IUser,
          protos.google.showcase.v1beta1.ICreateUserRequest|null|undefined,
          {}|null|undefined>): void;
  createUser(
      request?: protos.google.showcase.v1beta1.ICreateUserRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.showcase.v1beta1.IUser,
          protos.google.showcase.v1beta1.ICreateUserRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.showcase.v1beta1.IUser,
          protos.google.showcase.v1beta1.ICreateUserRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.showcase.v1beta1.IUser,
        protos.google.showcase.v1beta1.ICreateUserRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.createUser(request, options, callback);
  }
/**
 * Retrieves the User with the given uri.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The resource name of the requested user.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [User]{@link google.showcase.v1beta1.User}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/identity.get_user.js</caption>
 * region_tag:localhost_v1beta1_generated_Identity_GetUser_async
 */
  getUser(
      request?: protos.google.showcase.v1beta1.IGetUserRequest,
      options?: CallOptions):
      Promise<[
        protos.google.showcase.v1beta1.IUser,
        protos.google.showcase.v1beta1.IGetUserRequest|undefined, {}|undefined
      ]>;
  getUser(
      request: protos.google.showcase.v1beta1.IGetUserRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.showcase.v1beta1.IUser,
          protos.google.showcase.v1beta1.IGetUserRequest|null|undefined,
          {}|null|undefined>): void;
  getUser(
      request: protos.google.showcase.v1beta1.IGetUserRequest,
      callback: Callback<
          protos.google.showcase.v1beta1.IUser,
          protos.google.showcase.v1beta1.IGetUserRequest|null|undefined,
          {}|null|undefined>): void;
  getUser(
      request?: protos.google.showcase.v1beta1.IGetUserRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.showcase.v1beta1.IUser,
          protos.google.showcase.v1beta1.IGetUserRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.showcase.v1beta1.IUser,
          protos.google.showcase.v1beta1.IGetUserRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.showcase.v1beta1.IUser,
        protos.google.showcase.v1beta1.IGetUserRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getUser(request, options, callback);
  }
/**
 * Updates a user.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.showcase.v1beta1.User} request.user
 *   The user to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   The field mask to determine wich fields are to be updated. If empty, the
 *   server will assume all fields are to be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [User]{@link google.showcase.v1beta1.User}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/identity.update_user.js</caption>
 * region_tag:localhost_v1beta1_generated_Identity_UpdateUser_async
 */
  updateUser(
      request?: protos.google.showcase.v1beta1.IUpdateUserRequest,
      options?: CallOptions):
      Promise<[
        protos.google.showcase.v1beta1.IUser,
        protos.google.showcase.v1beta1.IUpdateUserRequest|undefined, {}|undefined
      ]>;
  updateUser(
      request: protos.google.showcase.v1beta1.IUpdateUserRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.showcase.v1beta1.IUser,
          protos.google.showcase.v1beta1.IUpdateUserRequest|null|undefined,
          {}|null|undefined>): void;
  updateUser(
      request: protos.google.showcase.v1beta1.IUpdateUserRequest,
      callback: Callback<
          protos.google.showcase.v1beta1.IUser,
          protos.google.showcase.v1beta1.IUpdateUserRequest|null|undefined,
          {}|null|undefined>): void;
  updateUser(
      request?: protos.google.showcase.v1beta1.IUpdateUserRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.showcase.v1beta1.IUser,
          protos.google.showcase.v1beta1.IUpdateUserRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.showcase.v1beta1.IUser,
          protos.google.showcase.v1beta1.IUpdateUserRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.showcase.v1beta1.IUser,
        protos.google.showcase.v1beta1.IUpdateUserRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'user.name': request.user!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateUser(request, options, callback);
  }
/**
 * Deletes a user, their profile, and all of their authored messages.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The resource name of the user to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/identity.delete_user.js</caption>
 * region_tag:localhost_v1beta1_generated_Identity_DeleteUser_async
 */
  deleteUser(
      request?: protos.google.showcase.v1beta1.IDeleteUserRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.showcase.v1beta1.IDeleteUserRequest|undefined, {}|undefined
      ]>;
  deleteUser(
      request: protos.google.showcase.v1beta1.IDeleteUserRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteUserRequest|null|undefined,
          {}|null|undefined>): void;
  deleteUser(
      request: protos.google.showcase.v1beta1.IDeleteUserRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteUserRequest|null|undefined,
          {}|null|undefined>): void;
  deleteUser(
      request?: protos.google.showcase.v1beta1.IDeleteUserRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteUserRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteUserRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.showcase.v1beta1.IDeleteUserRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteUser(request, options, callback);
  }

 /**
 * Lists all users.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of users to return. Server may return fewer users
 *   than requested. If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value of google.showcase.v1beta1.ListUsersResponse.next_page_token
 *   returned from the previous call to
 *   `google.showcase.v1beta1.Identity\ListUsers` method.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [User]{@link google.showcase.v1beta1.User}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listUsersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listUsers(
      request?: protos.google.showcase.v1beta1.IListUsersRequest,
      options?: CallOptions):
      Promise<[
        protos.google.showcase.v1beta1.IUser[],
        protos.google.showcase.v1beta1.IListUsersRequest|null,
        protos.google.showcase.v1beta1.IListUsersResponse
      ]>;
  listUsers(
      request: protos.google.showcase.v1beta1.IListUsersRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.showcase.v1beta1.IListUsersRequest,
          protos.google.showcase.v1beta1.IListUsersResponse|null|undefined,
          protos.google.showcase.v1beta1.IUser>): void;
  listUsers(
      request: protos.google.showcase.v1beta1.IListUsersRequest,
      callback: PaginationCallback<
          protos.google.showcase.v1beta1.IListUsersRequest,
          protos.google.showcase.v1beta1.IListUsersResponse|null|undefined,
          protos.google.showcase.v1beta1.IUser>): void;
  listUsers(
      request?: protos.google.showcase.v1beta1.IListUsersRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.showcase.v1beta1.IListUsersRequest,
          protos.google.showcase.v1beta1.IListUsersResponse|null|undefined,
          protos.google.showcase.v1beta1.IUser>,
      callback?: PaginationCallback<
          protos.google.showcase.v1beta1.IListUsersRequest,
          protos.google.showcase.v1beta1.IListUsersResponse|null|undefined,
          protos.google.showcase.v1beta1.IUser>):
      Promise<[
        protos.google.showcase.v1beta1.IUser[],
        protos.google.showcase.v1beta1.IListUsersRequest|null,
        protos.google.showcase.v1beta1.IListUsersResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.listUsers(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of users to return. Server may return fewer users
 *   than requested. If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value of google.showcase.v1beta1.ListUsersResponse.next_page_token
 *   returned from the previous call to
 *   `google.showcase.v1beta1.Identity\ListUsers` method.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [User]{@link google.showcase.v1beta1.User} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listUsersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listUsersStream(
      request?: protos.google.showcase.v1beta1.IListUsersRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listUsers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listUsers.createStream(
      this.innerApiCalls.listUsers as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listUsers`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of users to return. Server may return fewer users
 *   than requested. If unspecified, server will pick an appropriate default.
 * @param {string} request.pageToken
 *   The value of google.showcase.v1beta1.ListUsersResponse.next_page_token
 *   returned from the previous call to
 *   `google.showcase.v1beta1.Identity\ListUsers` method.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [User]{@link google.showcase.v1beta1.User}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/identity.list_users.js</caption>
 * region_tag:localhost_v1beta1_generated_Identity_ListUsers_async
 */
  listUsersAsync(
      request?: protos.google.showcase.v1beta1.IListUsersRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.showcase.v1beta1.IUser>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listUsers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listUsers.asyncIterate(
      this.innerApiCalls['listUsers'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.showcase.v1beta1.IUser>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified blueprint resource name string.
   *
   * @param {string} session
   * @param {string} test
   * @param {string} blueprint
   * @returns {string} Resource name string.
   */
  blueprintPath(session:string,test:string,blueprint:string) {
    return this.pathTemplates.blueprintPathTemplate.render({
      session: session,
      test: test,
      blueprint: blueprint,
    });
  }

  /**
   * Parse the session from Blueprint resource.
   *
   * @param {string} blueprintName
   *   A fully-qualified path representing Blueprint resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromBlueprintName(blueprintName: string) {
    return this.pathTemplates.blueprintPathTemplate.match(blueprintName).session;
  }

  /**
   * Parse the test from Blueprint resource.
   *
   * @param {string} blueprintName
   *   A fully-qualified path representing Blueprint resource.
   * @returns {string} A string representing the test.
   */
  matchTestFromBlueprintName(blueprintName: string) {
    return this.pathTemplates.blueprintPathTemplate.match(blueprintName).test;
  }

  /**
   * Parse the blueprint from Blueprint resource.
   *
   * @param {string} blueprintName
   *   A fully-qualified path representing Blueprint resource.
   * @returns {string} A string representing the blueprint.
   */
  matchBlueprintFromBlueprintName(blueprintName: string) {
    return this.pathTemplates.blueprintPathTemplate.match(blueprintName).blueprint;
  }

  /**
   * Return a fully-qualified room resource name string.
   *
   * @param {string} room_id
   * @returns {string} Resource name string.
   */
  roomPath(roomId:string) {
    return this.pathTemplates.roomPathTemplate.render({
      room_id: roomId,
    });
  }

  /**
   * Parse the room_id from Room resource.
   *
   * @param {string} roomName
   *   A fully-qualified path representing Room resource.
   * @returns {string} A string representing the room_id.
   */
  matchRoomIdFromRoomName(roomName: string) {
    return this.pathTemplates.roomPathTemplate.match(roomName).room_id;
  }

  /**
   * Return a fully-qualified roomIdBlurbId resource name string.
   *
   * @param {string} room_id
   * @param {string} blurb_id
   * @returns {string} Resource name string.
   */
  roomIdBlurbIdPath(roomId:string,blurbId:string) {
    return this.pathTemplates.roomIdBlurbIdPathTemplate.render({
      room_id: roomId,
      blurb_id: blurbId,
    });
  }

  /**
   * Parse the room_id from RoomIdBlurbId resource.
   *
   * @param {string} roomIdBlurbIdName
   *   A fully-qualified path representing room_id_blurb_id resource.
   * @returns {string} A string representing the room_id.
   */
  matchRoomIdFromRoomIdBlurbIdName(roomIdBlurbIdName: string) {
    return this.pathTemplates.roomIdBlurbIdPathTemplate.match(roomIdBlurbIdName).room_id;
  }

  /**
   * Parse the blurb_id from RoomIdBlurbId resource.
   *
   * @param {string} roomIdBlurbIdName
   *   A fully-qualified path representing room_id_blurb_id resource.
   * @returns {string} A string representing the blurb_id.
   */
  matchBlurbIdFromRoomIdBlurbIdName(roomIdBlurbIdName: string) {
    return this.pathTemplates.roomIdBlurbIdPathTemplate.match(roomIdBlurbIdName).blurb_id;
  }

  /**
   * Return a fully-qualified roomIdBlurbsLegacyRoomIdBlurbId resource name string.
   *
   * @param {string} room_id
   * @param {string} legacy_room_id
   * @param {string} blurb_id
   * @returns {string} Resource name string.
   */
  roomIdBlurbsLegacyRoomIdBlurbIdPath(roomId:string,legacyRoomId:string,blurbId:string) {
    return this.pathTemplates.roomIdBlurbsLegacyRoomIdBlurbIdPathTemplate.render({
      room_id: roomId,
      legacy_room_id: legacyRoomId,
      blurb_id: blurbId,
    });
  }

  /**
   * Parse the room_id from RoomIdBlurbsLegacyRoomIdBlurbId resource.
   *
   * @param {string} roomIdBlurbsLegacyRoomIdBlurbIdName
   *   A fully-qualified path representing room_id_blurbs_legacy_room_id_blurb_id resource.
   * @returns {string} A string representing the room_id.
   */
  matchRoomIdFromRoomIdBlurbsLegacyRoomIdBlurbIdName(roomIdBlurbsLegacyRoomIdBlurbIdName: string) {
    return this.pathTemplates.roomIdBlurbsLegacyRoomIdBlurbIdPathTemplate.match(roomIdBlurbsLegacyRoomIdBlurbIdName).room_id;
  }

  /**
   * Parse the legacy_room_id from RoomIdBlurbsLegacyRoomIdBlurbId resource.
   *
   * @param {string} roomIdBlurbsLegacyRoomIdBlurbIdName
   *   A fully-qualified path representing room_id_blurbs_legacy_room_id_blurb_id resource.
   * @returns {string} A string representing the legacy_room_id.
   */
  matchLegacyRoomIdFromRoomIdBlurbsLegacyRoomIdBlurbIdName(roomIdBlurbsLegacyRoomIdBlurbIdName: string) {
    return this.pathTemplates.roomIdBlurbsLegacyRoomIdBlurbIdPathTemplate.match(roomIdBlurbsLegacyRoomIdBlurbIdName).legacy_room_id;
  }

  /**
   * Parse the blurb_id from RoomIdBlurbsLegacyRoomIdBlurbId resource.
   *
   * @param {string} roomIdBlurbsLegacyRoomIdBlurbIdName
   *   A fully-qualified path representing room_id_blurbs_legacy_room_id_blurb_id resource.
   * @returns {string} A string representing the blurb_id.
   */
  matchBlurbIdFromRoomIdBlurbsLegacyRoomIdBlurbIdName(roomIdBlurbsLegacyRoomIdBlurbIdName: string) {
    return this.pathTemplates.roomIdBlurbsLegacyRoomIdBlurbIdPathTemplate.match(roomIdBlurbsLegacyRoomIdBlurbIdName).blurb_id;
  }

  /**
   * Return a fully-qualified session resource name string.
   *
   * @param {string} session
   * @returns {string} Resource name string.
   */
  sessionPath(session:string) {
    return this.pathTemplates.sessionPathTemplate.render({
      session: session,
    });
  }

  /**
   * Parse the session from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).session;
  }

  /**
   * Return a fully-qualified test resource name string.
   *
   * @param {string} session
   * @param {string} test
   * @returns {string} Resource name string.
   */
  testPath(session:string,test:string) {
    return this.pathTemplates.testPathTemplate.render({
      session: session,
      test: test,
    });
  }

  /**
   * Parse the session from Test resource.
   *
   * @param {string} testName
   *   A fully-qualified path representing Test resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromTestName(testName: string) {
    return this.pathTemplates.testPathTemplate.match(testName).session;
  }

  /**
   * Parse the test from Test resource.
   *
   * @param {string} testName
   *   A fully-qualified path representing Test resource.
   * @returns {string} A string representing the test.
   */
  matchTestFromTestName(testName: string) {
    return this.pathTemplates.testPathTemplate.match(testName).test;
  }

  /**
   * Return a fully-qualified user resource name string.
   *
   * @param {string} user_id
   * @returns {string} Resource name string.
   */
  userPath(userId:string) {
    return this.pathTemplates.userPathTemplate.render({
      user_id: userId,
    });
  }

  /**
   * Parse the user_id from User resource.
   *
   * @param {string} userName
   *   A fully-qualified path representing User resource.
   * @returns {string} A string representing the user_id.
   */
  matchUserIdFromUserName(userName: string) {
    return this.pathTemplates.userPathTemplate.match(userName).user_id;
  }

  /**
   * Return a fully-qualified userIdProfileBlurbId resource name string.
   *
   * @param {string} user_id
   * @param {string} blurb_id
   * @returns {string} Resource name string.
   */
  userIdProfileBlurbIdPath(userId:string,blurbId:string) {
    return this.pathTemplates.userIdProfileBlurbIdPathTemplate.render({
      user_id: userId,
      blurb_id: blurbId,
    });
  }

  /**
   * Parse the user_id from UserIdProfileBlurbId resource.
   *
   * @param {string} userIdProfileBlurbIdName
   *   A fully-qualified path representing user_id_profile_blurb_id resource.
   * @returns {string} A string representing the user_id.
   */
  matchUserIdFromUserIdProfileBlurbIdName(userIdProfileBlurbIdName: string) {
    return this.pathTemplates.userIdProfileBlurbIdPathTemplate.match(userIdProfileBlurbIdName).user_id;
  }

  /**
   * Parse the blurb_id from UserIdProfileBlurbId resource.
   *
   * @param {string} userIdProfileBlurbIdName
   *   A fully-qualified path representing user_id_profile_blurb_id resource.
   * @returns {string} A string representing the blurb_id.
   */
  matchBlurbIdFromUserIdProfileBlurbIdName(userIdProfileBlurbIdName: string) {
    return this.pathTemplates.userIdProfileBlurbIdPathTemplate.match(userIdProfileBlurbIdName).blurb_id;
  }

  /**
   * Return a fully-qualified userIdProfileBlurbsLegacyUserIdBlurbId resource name string.
   *
   * @param {string} user_id
   * @param {string} legacy_user_id
   * @param {string} blurb_id
   * @returns {string} Resource name string.
   */
  userIdProfileBlurbsLegacyUserIdBlurbIdPath(userId:string,legacyUserId:string,blurbId:string) {
    return this.pathTemplates.userIdProfileBlurbsLegacyUserIdBlurbIdPathTemplate.render({
      user_id: userId,
      legacy_user_id: legacyUserId,
      blurb_id: blurbId,
    });
  }

  /**
   * Parse the user_id from UserIdProfileBlurbsLegacyUserIdBlurbId resource.
   *
   * @param {string} userIdProfileBlurbsLegacyUserIdBlurbIdName
   *   A fully-qualified path representing user_id_profile_blurbs_legacy_user_id_blurb_id resource.
   * @returns {string} A string representing the user_id.
   */
  matchUserIdFromUserIdProfileBlurbsLegacyUserIdBlurbIdName(userIdProfileBlurbsLegacyUserIdBlurbIdName: string) {
    return this.pathTemplates.userIdProfileBlurbsLegacyUserIdBlurbIdPathTemplate.match(userIdProfileBlurbsLegacyUserIdBlurbIdName).user_id;
  }

  /**
   * Parse the legacy_user_id from UserIdProfileBlurbsLegacyUserIdBlurbId resource.
   *
   * @param {string} userIdProfileBlurbsLegacyUserIdBlurbIdName
   *   A fully-qualified path representing user_id_profile_blurbs_legacy_user_id_blurb_id resource.
   * @returns {string} A string representing the legacy_user_id.
   */
  matchLegacyUserIdFromUserIdProfileBlurbsLegacyUserIdBlurbIdName(userIdProfileBlurbsLegacyUserIdBlurbIdName: string) {
    return this.pathTemplates.userIdProfileBlurbsLegacyUserIdBlurbIdPathTemplate.match(userIdProfileBlurbsLegacyUserIdBlurbIdName).legacy_user_id;
  }

  /**
   * Parse the blurb_id from UserIdProfileBlurbsLegacyUserIdBlurbId resource.
   *
   * @param {string} userIdProfileBlurbsLegacyUserIdBlurbIdName
   *   A fully-qualified path representing user_id_profile_blurbs_legacy_user_id_blurb_id resource.
   * @returns {string} A string representing the blurb_id.
   */
  matchBlurbIdFromUserIdProfileBlurbsLegacyUserIdBlurbIdName(userIdProfileBlurbsLegacyUserIdBlurbIdName: string) {
    return this.pathTemplates.userIdProfileBlurbsLegacyUserIdBlurbIdPathTemplate.match(userIdProfileBlurbsLegacyUserIdBlurbIdName).blurb_id;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.identityStub && !this._terminated) {
      return this.identityStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
