// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protosTypes from '../protos/protos';
import * as assert from 'assert';
import { describe, it } from 'mocha';
/* eslint-disable @typescript-eslint/no-var-requires */
const messagingModule = require('../src');

import {PassThrough} from 'stream';


const FAKE_STATUS_CODE = 1;
class FakeError{
    name: string;
    message: string;
    code: number;
    constructor(n: number){
        this.name = 'fakeName';
        this.message = 'fake message';
        this.code = n;
    }
}
const error = new FakeError(FAKE_STATUS_CODE);
export interface Callback {
  (err: FakeError|null, response?: {} | null): void;
}

export class Operation{
    constructor(){};
    promise() {};
}
function mockSimpleGrpcMethod(expectedRequest: {}, response: {} | null, error: FakeError | null) {
    return (actualRequest: {}, options: {}, callback: Callback) => {
        assert.deepStrictEqual(actualRequest, expectedRequest);
        if (error) {
            callback(error);
        } else if (response) {
            callback(null, response);
        } else {
            callback(null);
        }
    };
}
function mockServerStreamingGrpcMethod(expectedRequest: {}, response: {} | null, error: FakeError | null) {
    return (actualRequest: {}) => {
        assert.deepStrictEqual(actualRequest, expectedRequest);
        const mockStream = new PassThrough({
          objectMode: true,
          transform: (chunk: {}, enc: {}, callback: Callback) => {
            if (error) {
              callback(error);
            }
            else {
              callback(null, response);
            }
          }
        });
        return mockStream;
    };
}
function mockBidiStreamingGrpcMethod(expectedRequest: {}, response: {} | null, error: FakeError | null) {
    return () => {
        const mockStream = new PassThrough({
          objectMode: true,
          transform: (chunk: {}, enc: {}, callback: Callback) => {
            assert.deepStrictEqual(chunk, expectedRequest);
            if (error) {
              callback(error);
            }
            else {
              callback(null, response);
            }
          }
        });
        return mockStream;
    }
}
function mockLongRunningGrpcMethod(expectedRequest: {}, response: {} | null, error?: {} | null) {
    return (request: {}) => {
        assert.deepStrictEqual(request, expectedRequest);
        const mockOperation = {
          promise: function() {
            return new Promise((resolve, reject) => {
              if (error) {
                reject(error);
              }
              else {
                resolve([response]);
              }
            });
          }
        };
        return Promise.resolve([mockOperation]);
    };
}
describe('v1beta1.MessagingClient', () => {
    it('has servicePath', () => {
        const servicePath = messagingModule.v1beta1.MessagingClient.servicePath;
        assert(servicePath);
    });
    it('has apiEndpoint', () => {
        const apiEndpoint = messagingModule.v1beta1.MessagingClient.apiEndpoint;
        assert(apiEndpoint);
    });
    it('has port', () => {
        const port = messagingModule.v1beta1.MessagingClient.port;
        assert(port);
        assert(typeof port === 'number');
    });
    it('should create a client with no option', () => {
        const client = new messagingModule.v1beta1.MessagingClient();
        assert(client);
    });
    it('should create a client with gRPC fallback', () => {
        const client = new messagingModule.v1beta1.MessagingClient({
            fallback: true,
        });
        assert(client);
    });
    it('has initialize method and supports deferred initialization', async () => {
        const client = new messagingModule.v1beta1.MessagingClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.messagingStub, undefined);
        await client.initialize();
        assert(client.messagingStub);
    });
    it('has close method', () => {
        const client = new messagingModule.v1beta1.MessagingClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });
    describe('createRoom', () => {
        it('invokes createRoom without error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.ICreateRoomRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createRoom = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.createRoom(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes createRoom with error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.ICreateRoomRequest = {};
            // Mock gRPC layer
            client._innerApiCalls.createRoom = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.createRoom(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('getRoom', () => {
        it('invokes getRoom without error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IGetRoomRequest = {};
            request.name = '';
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getRoom = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.getRoom(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes getRoom with error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IGetRoomRequest = {};
            request.name = '';
            // Mock gRPC layer
            client._innerApiCalls.getRoom = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.getRoom(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('updateRoom', () => {
        it('invokes updateRoom without error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IUpdateRoomRequest = {};
            request.room = {};
            request.room.name = '';
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.updateRoom = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.updateRoom(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes updateRoom with error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IUpdateRoomRequest = {};
            request.room = {};
            request.room.name = '';
            // Mock gRPC layer
            client._innerApiCalls.updateRoom = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.updateRoom(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('deleteRoom', () => {
        it('invokes deleteRoom without error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IDeleteRoomRequest = {};
            request.name = '';
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deleteRoom = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.deleteRoom(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes deleteRoom with error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IDeleteRoomRequest = {};
            request.name = '';
            // Mock gRPC layer
            client._innerApiCalls.deleteRoom = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.deleteRoom(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('createBlurb', () => {
        it('invokes createBlurb without error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.ICreateBlurbRequest = {};
            request.parent = '';
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createBlurb = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.createBlurb(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes createBlurb with error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.ICreateBlurbRequest = {};
            request.parent = '';
            // Mock gRPC layer
            client._innerApiCalls.createBlurb = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.createBlurb(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('getBlurb', () => {
        it('invokes getBlurb without error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IGetBlurbRequest = {};
            request.name = '';
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getBlurb = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.getBlurb(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes getBlurb with error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IGetBlurbRequest = {};
            request.name = '';
            // Mock gRPC layer
            client._innerApiCalls.getBlurb = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.getBlurb(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('updateBlurb', () => {
        it('invokes updateBlurb without error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IUpdateBlurbRequest = {};
            request.blurb = {};
            request.blurb.name = '';
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.updateBlurb = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.updateBlurb(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes updateBlurb with error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IUpdateBlurbRequest = {};
            request.blurb = {};
            request.blurb.name = '';
            // Mock gRPC layer
            client._innerApiCalls.updateBlurb = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.updateBlurb(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('deleteBlurb', () => {
        it('invokes deleteBlurb without error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IDeleteBlurbRequest = {};
            request.name = '';
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deleteBlurb = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.deleteBlurb(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes deleteBlurb with error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IDeleteBlurbRequest = {};
            request.name = '';
            // Mock gRPC layer
            client._innerApiCalls.deleteBlurb = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.deleteBlurb(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('searchBlurbs', () => {
        it('invokes searchBlurbs without error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.ISearchBlurbsRequest = {};
            request.parent = '';
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.searchBlurbs = mockLongRunningGrpcMethod(
                request,
                expectedResponse
            );
            client.searchBlurbs(request).then((responses: [Operation]) => {
                const operation = responses[0];
                return operation? operation.promise() : {};
            }).then((responses: [Operation]) => {
                assert.deepStrictEqual(responses[0], expectedResponse);
                done();
            }).catch((err: {}) => {
                done(err);
            });
        });

        it('invokes searchBlurbs with error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.ISearchBlurbsRequest = {};
            request.parent = '';
            // Mock gRPC layer
            client._innerApiCalls.searchBlurbs = mockLongRunningGrpcMethod(
                request,
                null,
                error
            );
            client.searchBlurbs(request).then((responses: [Operation]) => {
                const operation = responses[0];
                return operation? operation.promise() : {};
            }).then(() => {
                assert.fail();
            }).catch((err: FakeError) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                done();
            });
        });
    });
    describe('streamBlurbs', () => {
        it('invokes streamBlurbs without error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IStreamBlurbsRequest = {};
            request.name = '';
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.streamBlurbs = mockServerStreamingGrpcMethod(request, expectedResponse, null);
            const stream = client.streamBlurbs(request);
            stream.on('data', (response: {}) =>{
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
            stream.on('error', (err: FakeError) => {
                done(err);
            });
            stream.write();
        });
        it('invokes streamBlurbs with error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IStreamBlurbsRequest = {};
            request.name = '';
            // Mock gRPC layer
            client._innerApiCalls.streamBlurbs = mockServerStreamingGrpcMethod(request, null, error);
            const stream = client.streamBlurbs(request);
            stream.on('data', () =>{
                assert.fail();
            });
            stream.on('error', (err: FakeError) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                done();
            });
            stream.write();
        });
    });
    describe('connect', () => {
        it('invokes connect without error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IConnectRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.connect = mockBidiStreamingGrpcMethod(request, expectedResponse, null);
            const stream = client.connect().on('data', (response: {}) =>{
                assert.deepStrictEqual(response, expectedResponse);
                done();
            }).on('error', (err: FakeError) => {
                done(err);
            });
            stream.write(request);
        });
        it('invokes connect with error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IConnectRequest = {};
            // Mock gRPC layer
            client._innerApiCalls.connect = mockBidiStreamingGrpcMethod(request, null, error);
            const stream = client.connect().on('data', () =>{
                assert.fail();
            }).on('error', (err: FakeError) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                done();
            });
            stream.write(request);
        });
    });
    describe('listRooms', () => {
        it('invokes listRooms without error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IListRoomsRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listRooms = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            client.listRooms(request, (err: FakeError, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
    });
    describe('listRoomsStream', () => {
        it('invokes listRoomsStream without error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IListRoomsRequest = {};
            // Mock response
            const expectedResponse = {response: 'data'};
            // Mock Grpc layer
            client._innerApiCalls.listRooms = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            const stream = client.listRoomsStream(request, {}).on('data', (response: {}) =>{
                assert.deepStrictEqual(response, expectedResponse);
                done();
            }).on('error', (err: FakeError) => {
                done(err);
            });
            stream.write(expectedResponse);
        });
    });
    describe('listBlurbs', () => {
        it('invokes listBlurbs without error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IListBlurbsRequest = {};
            request.parent = '';
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listBlurbs = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            client.listBlurbs(request, (err: FakeError, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
    });
    describe('listBlurbsStream', () => {
        it('invokes listBlurbsStream without error', done => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            const request: protosTypes.google.showcase.v1beta1.IListBlurbsRequest = {};
            request.parent = '';
            // Mock response
            const expectedResponse = {response: 'data'};
            // Mock Grpc layer
            client._innerApiCalls.listBlurbs = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            const stream = client.listBlurbsStream(request, {}).on('data', (response: {}) =>{
                assert.deepStrictEqual(response, expectedResponse);
                done();
            }).on('error', (err: FakeError) => {
                done(err);
            });
            stream.write(expectedResponse);
        });
    });
});
