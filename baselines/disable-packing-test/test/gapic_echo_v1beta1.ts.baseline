// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as echoModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubServerStreamingCall<ResponseType>(response?: ResponseType, error?: Error) {
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // write something to the stream to trigger transformStub and send the response back to the client
    setImmediate(() => { mockStream.write({}); });
    setImmediate(() => { mockStream.end(); });
    return sinon.stub().returns(mockStream);
}

function stubBidiStreamingCall<ResponseType>(response?: ResponseType, error?: Error) {
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    return sinon.stub().returns(mockStream);
}

function stubClientStreamingCall<ResponseType>(response?: ResponseType, error?: Error) {
    if (error) {
        return sinon.stub().callsArgWith(2, error);
    }
    const transformStub = sinon.stub();
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    return sinon.stub().returns(mockStream).callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.EchoClient', () => {
    describe('Common methods', () => {
        it('has apiEndpoint', () => {
            const client = new echoModule.v1beta1.EchoClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'localhost');
        });

        it('has universeDomain', () => {
            const client = new echoModule.v1beta1.EchoClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });

        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            it('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = echoModule.v1beta1.EchoClient.servicePath;
                assert.strictEqual(servicePath, 'localhost');
                assert(stub.called);
                stub.restore();
            });

            it('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = echoModule.v1beta1.EchoClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'localhost');
                assert(stub.called);
                stub.restore();
            });
        }
        it('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new echoModule.v1beta1.EchoClient({universe_domain: 'example.com', universeDomain: 'example.net'}); });
        });

        it('has port', () => {
            const port = echoModule.v1beta1.EchoClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new echoModule.v1beta1.EchoClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new echoModule.v1beta1.EchoClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.echoStub, undefined);
            await client.initialize();
            assert(client.echoStub);
        });

        it('has close method for the initialized client', done => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.echoStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.echoStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('echo', () => {
        it('invokes echo without error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.EchoRequest()
            );
            // path template: {qux=projects/*}/**
            request.otherHeader = 'projects/value/value';
            const expectedHeaderRequestParams = 'qux=projects%2Fvalue';
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.EchoResponse()
            );
            client.innerApiCalls.echo = stubSimpleCall(expectedResponse);
            const [response] = await client.echo(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.echo as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.echo as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes echo without error using callback', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.EchoRequest()
            );
            // path template: {qux=projects/*}/**
            request.otherHeader = 'projects/value/value';
            const expectedHeaderRequestParams = 'qux=projects%2Fvalue';
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.EchoResponse()
            );
            client.innerApiCalls.echo = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.echo(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IEchoResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.echo as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.echo as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes echo with error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.EchoRequest()
            );
            // path template: {qux=projects/*}/**
            request.otherHeader = 'projects/value/value';
            const expectedHeaderRequestParams = 'qux=projects%2Fvalue';
            const expectedError = new Error('expected');
            client.innerApiCalls.echo = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.echo(request), expectedError);
            const actualRequest = (client.innerApiCalls.echo as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.echo as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes echo with closed client', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.EchoRequest()
            );
            // path template: {qux=projects/*}/**
            request.otherHeader = 'projects/value/value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.echo(request), expectedError);
        });
    });

    describe('pagedExpandLegacy', () => {
        it('invokes pagedExpandLegacy without error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.PagedExpandLegacyRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.PagedExpandResponse()
            );
            client.innerApiCalls.pagedExpandLegacy = stubSimpleCall(expectedResponse);
            const [response] = await client.pagedExpandLegacy(request);
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes pagedExpandLegacy without error using callback', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.PagedExpandLegacyRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.PagedExpandResponse()
            );
            client.innerApiCalls.pagedExpandLegacy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.pagedExpandLegacy(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IPagedExpandResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes pagedExpandLegacy with error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.PagedExpandLegacyRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.pagedExpandLegacy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.pagedExpandLegacy(request), expectedError);
        });

        it('invokes pagedExpandLegacy with closed client', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.PagedExpandLegacyRequest()
            );
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.pagedExpandLegacy(request), expectedError);
        });
    });

    describe('block', () => {
        it('invokes block without error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.BlockRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.BlockResponse()
            );
            client.innerApiCalls.block = stubSimpleCall(expectedResponse);
            const [response] = await client.block(request);
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes block without error using callback', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.BlockRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.BlockResponse()
            );
            client.innerApiCalls.block = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.block(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IBlockResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes block with error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.BlockRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.block = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.block(request), expectedError);
        });

        it('invokes block with closed client', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.BlockRequest()
            );
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.block(request), expectedError);
        });
    });

    describe('wait', () => {
        it('invokes wait without error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.WaitRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.wait = stubLongRunningCall(expectedResponse);
            const [operation] = await client.wait(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes wait without error using callback', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.WaitRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.wait = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.wait(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.showcase.v1beta1.IWaitResponse, protos.google.showcase.v1beta1.IWaitMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.showcase.v1beta1.IWaitResponse, protos.google.showcase.v1beta1.IWaitMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes wait with call error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.WaitRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.wait = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.wait(request), expectedError);
        });

        it('invokes wait with LRO error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.WaitRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.wait = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.wait(request);
            await assert.rejects(operation.promise(), expectedError);
        });

        it('invokes checkWaitProgress without error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkWaitProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkWaitProgress with error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkWaitProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('expand', () => {
        it('invokes expand without error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.ExpandRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.EchoResponse()
            );
            client.innerApiCalls.expand = stubServerStreamingCall(expectedResponse);
            const stream = client.expand(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.showcase.v1beta1.EchoResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes expand with error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.ExpandRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.expand = stubServerStreamingCall(undefined, expectedError);
            const stream = client.expand(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.showcase.v1beta1.EchoResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
        });

        it('invokes expand with closed client', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.ExpandRequest()
            );
            const expectedError = new Error('The client has already been closed.');
            client.close();
            const stream = client.expand(request, {retryRequestOptions: {noResponseRetries: 0}});
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.showcase.v1beta1.EchoResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
        });
    });

    describe('chat', () => {
        it('invokes chat without error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.EchoRequest()
            );
            
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.EchoResponse()
            );
            client.innerApiCalls.chat = stubBidiStreamingCall(expectedResponse);
            const stream = client.chat();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.showcase.v1beta1.EchoResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.chat as SinonStub)
                .getCall(0).calledWith(null));
            assert.deepStrictEqual(((stream as unknown as PassThrough)
                ._transform as SinonStub).getCall(0).args[0], request);
        });

        it('invokes chat with error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.EchoRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.chat = stubBidiStreamingCall(undefined, expectedError);
            const stream = client.chat();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.showcase.v1beta1.EchoResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            await assert.rejects(promise, expectedError);
            assert((client.innerApiCalls.chat as SinonStub)
                .getCall(0).calledWith(null));
            assert.deepStrictEqual(((stream as unknown as PassThrough)
                ._transform as SinonStub).getCall(0).args[0], request);
        });
    });

    describe('collect', () => {
        it('invokes collect without error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.EchoRequest()
            );
            
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.EchoResponse()
            );
            client.innerApiCalls.collect = stubClientStreamingCall(expectedResponse);
            let stream: PassThrough;
            const promise = new Promise((resolve, reject) => {
                stream = client.collect(
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IEchoResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }) as unknown as PassThrough;
                stream.write(request);
                stream.end();
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.collect as SinonStub)
                .getCall(0).calledWith(null, {} /*, callback defined above */));
            assert.deepStrictEqual((stream!._transform as SinonStub).getCall(0).args[0], request);
        });

        it('invokes collect with error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.EchoRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.collect = stubClientStreamingCall(undefined, expectedError);
            let stream: PassThrough;
            const promise = new Promise((resolve, reject) => {
                stream = client.collect(
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IEchoResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }) as unknown as PassThrough;
                stream.write(request);
                stream.end();
            });
            await assert.rejects(promise, expectedError);
            assert((client.innerApiCalls.collect as SinonStub)
                .getCall(0).calledWith(null, {} /*, callback defined above */));
        });
    });

    describe('pagedExpand', () => {
        it('invokes pagedExpand without error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.PagedExpandRequest()
            );const expectedResponse = [
              generateSampleMessage(new protos.google.showcase.v1beta1.EchoResponse()),
              generateSampleMessage(new protos.google.showcase.v1beta1.EchoResponse()),
              generateSampleMessage(new protos.google.showcase.v1beta1.EchoResponse()),
            ];
            client.innerApiCalls.pagedExpand = stubSimpleCall(expectedResponse);
            const [response] = await client.pagedExpand(request);
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes pagedExpand without error using callback', async () => {
            const client = new echoModule.v1beta1.EchoClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.PagedExpandRequest()
            );const expectedResponse = [
              generateSampleMessage(new protos.google.showcase.v1beta1.EchoResponse()),
              generateSampleMessage(new protos.google.showcase.v1beta1.EchoResponse()),
              generateSampleMessage(new protos.google.showcase.v1beta1.EchoResponse()),
            ];
            client.innerApiCalls.pagedExpand = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.pagedExpand(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IEchoResponse[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes pagedExpand with error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.PagedExpandRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.pagedExpand = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.pagedExpand(request), expectedError);
        });

        it('invokes pagedExpandStream without error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.PagedExpandRequest()
            );
            const expectedResponse = [
              generateSampleMessage(new protos.google.showcase.v1beta1.EchoResponse()),
              generateSampleMessage(new protos.google.showcase.v1beta1.EchoResponse()),
              generateSampleMessage(new protos.google.showcase.v1beta1.EchoResponse()),
            ];
            client.descriptors.page.pagedExpand.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.pagedExpandStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.showcase.v1beta1.EchoResponse[] = [];
                stream.on('data', (response: protos.google.showcase.v1beta1.EchoResponse) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.pagedExpand.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.pagedExpand, request));
        });

        it('invokes pagedExpandStream with error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.PagedExpandRequest()
            );
            const expectedError = new Error('expected');
            client.descriptors.page.pagedExpand.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.pagedExpandStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.showcase.v1beta1.EchoResponse[] = [];
                stream.on('data', (response: protos.google.showcase.v1beta1.EchoResponse) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.pagedExpand.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.pagedExpand, request));
        });

        it('uses async iteration with pagedExpand without error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.PagedExpandRequest()
            );
            const expectedResponse = [
              generateSampleMessage(new protos.google.showcase.v1beta1.EchoResponse()),
              generateSampleMessage(new protos.google.showcase.v1beta1.EchoResponse()),
              generateSampleMessage(new protos.google.showcase.v1beta1.EchoResponse()),
            ];
            client.descriptors.page.pagedExpand.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.showcase.v1beta1.IEchoResponse[] = [];
            const iterable = client.pagedExpandAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.pagedExpand.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with pagedExpand with error', async () => {
            const client = new echoModule.v1beta1.EchoClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.PagedExpandRequest()
            );
            const expectedError = new Error('expected');
            client.descriptors.page.pagedExpand.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.pagedExpandAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.showcase.v1beta1.IEchoResponse[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.pagedExpand.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });


    describe('Path templates', () => {

        describe('blueprint', () => {
            const fakePath = "/rendered/path/blueprint";
            const expectedParameters = {
                session: "sessionValue",
                test: "testValue",
                blueprint: "blueprintValue",
            };
            const client = new echoModule.v1beta1.EchoClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.blueprintPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.blueprintPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('blueprintPath', () => {
                const result = client.blueprintPath("sessionValue", "testValue", "blueprintValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.blueprintPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchSessionFromBlueprintName', () => {
                const result = client.matchSessionFromBlueprintName(fakePath);
                assert.strictEqual(result, "sessionValue");
                assert((client.pathTemplates.blueprintPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTestFromBlueprintName', () => {
                const result = client.matchTestFromBlueprintName(fakePath);
                assert.strictEqual(result, "testValue");
                assert((client.pathTemplates.blueprintPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBlueprintFromBlueprintName', () => {
                const result = client.matchBlueprintFromBlueprintName(fakePath);
                assert.strictEqual(result, "blueprintValue");
                assert((client.pathTemplates.blueprintPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('room', () => {
            const fakePath = "/rendered/path/room";
            const expectedParameters = {
                room: "roomValue",
            };
            const client = new echoModule.v1beta1.EchoClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.roomPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.roomPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('roomPath', () => {
                const result = client.roomPath("roomValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.roomPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchRoomFromRoomName', () => {
                const result = client.matchRoomFromRoomName(fakePath);
                assert.strictEqual(result, "roomValue");
                assert((client.pathTemplates.roomPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('roomBlurb', () => {
            const fakePath = "/rendered/path/roomBlurb";
            const expectedParameters = {
                room: "roomValue",
                blurb: "blurbValue",
            };
            const client = new echoModule.v1beta1.EchoClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.roomBlurbPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.roomBlurbPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('roomBlurbPath', () => {
                const result = client.roomBlurbPath("roomValue", "blurbValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.roomBlurbPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchRoomFromRoomBlurbName', () => {
                const result = client.matchRoomFromRoomBlurbName(fakePath);
                assert.strictEqual(result, "roomValue");
                assert((client.pathTemplates.roomBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBlurbFromRoomBlurbName', () => {
                const result = client.matchBlurbFromRoomBlurbName(fakePath);
                assert.strictEqual(result, "blurbValue");
                assert((client.pathTemplates.roomBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('roomBlurbsLegacyRoomBlurb', () => {
            const fakePath = "/rendered/path/roomBlurbsLegacyRoomBlurb";
            const expectedParameters = {
                room: "roomValue",
                legacy_room: "legacyRoomValue",
                blurb: "blurbValue",
            };
            const client = new echoModule.v1beta1.EchoClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.roomBlurbsLegacyRoomBlurbPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.roomBlurbsLegacyRoomBlurbPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('roomBlurbsLegacyRoomBlurbPath', () => {
                const result = client.roomBlurbsLegacyRoomBlurbPath("roomValue", "legacyRoomValue", "blurbValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.roomBlurbsLegacyRoomBlurbPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchRoomFromRoomBlurbsLegacyRoomBlurbName', () => {
                const result = client.matchRoomFromRoomBlurbsLegacyRoomBlurbName(fakePath);
                assert.strictEqual(result, "roomValue");
                assert((client.pathTemplates.roomBlurbsLegacyRoomBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLegacyRoomFromRoomBlurbsLegacyRoomBlurbName', () => {
                const result = client.matchLegacyRoomFromRoomBlurbsLegacyRoomBlurbName(fakePath);
                assert.strictEqual(result, "legacyRoomValue");
                assert((client.pathTemplates.roomBlurbsLegacyRoomBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBlurbFromRoomBlurbsLegacyRoomBlurbName', () => {
                const result = client.matchBlurbFromRoomBlurbsLegacyRoomBlurbName(fakePath);
                assert.strictEqual(result, "blurbValue");
                assert((client.pathTemplates.roomBlurbsLegacyRoomBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('sequence', () => {
            const fakePath = "/rendered/path/sequence";
            const expectedParameters = {
                sequence: "sequenceValue",
            };
            const client = new echoModule.v1beta1.EchoClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.sequencePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.sequencePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('sequencePath', () => {
                const result = client.sequencePath("sequenceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.sequencePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchSequenceFromSequenceName', () => {
                const result = client.matchSequenceFromSequenceName(fakePath);
                assert.strictEqual(result, "sequenceValue");
                assert((client.pathTemplates.sequencePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('sequenceReport', () => {
            const fakePath = "/rendered/path/sequenceReport";
            const expectedParameters = {
                sequence: "sequenceValue",
            };
            const client = new echoModule.v1beta1.EchoClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.sequenceReportPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.sequenceReportPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('sequenceReportPath', () => {
                const result = client.sequenceReportPath("sequenceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.sequenceReportPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchSequenceFromSequenceReportName', () => {
                const result = client.matchSequenceFromSequenceReportName(fakePath);
                assert.strictEqual(result, "sequenceValue");
                assert((client.pathTemplates.sequenceReportPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('session', () => {
            const fakePath = "/rendered/path/session";
            const expectedParameters = {
                session: "sessionValue",
            };
            const client = new echoModule.v1beta1.EchoClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.sessionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.sessionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('sessionPath', () => {
                const result = client.sessionPath("sessionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.sessionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchSessionFromSessionName', () => {
                const result = client.matchSessionFromSessionName(fakePath);
                assert.strictEqual(result, "sessionValue");
                assert((client.pathTemplates.sessionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('test', () => {
            const fakePath = "/rendered/path/test";
            const expectedParameters = {
                session: "sessionValue",
                test: "testValue",
            };
            const client = new echoModule.v1beta1.EchoClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.testPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.testPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('testPath', () => {
                const result = client.testPath("sessionValue", "testValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.testPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchSessionFromTestName', () => {
                const result = client.matchSessionFromTestName(fakePath);
                assert.strictEqual(result, "sessionValue");
                assert((client.pathTemplates.testPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTestFromTestName', () => {
                const result = client.matchTestFromTestName(fakePath);
                assert.strictEqual(result, "testValue");
                assert((client.pathTemplates.testPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('user', () => {
            const fakePath = "/rendered/path/user";
            const expectedParameters = {
                user: "userValue",
            };
            const client = new echoModule.v1beta1.EchoClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.userPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.userPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('userPath', () => {
                const result = client.userPath("userValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.userPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchUserFromUserName', () => {
                const result = client.matchUserFromUserName(fakePath);
                assert.strictEqual(result, "userValue");
                assert((client.pathTemplates.userPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('userProfileBlurb', () => {
            const fakePath = "/rendered/path/userProfileBlurb";
            const expectedParameters = {
                user: "userValue",
                blurb: "blurbValue",
            };
            const client = new echoModule.v1beta1.EchoClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.userProfileBlurbPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.userProfileBlurbPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('userProfileBlurbPath', () => {
                const result = client.userProfileBlurbPath("userValue", "blurbValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.userProfileBlurbPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchUserFromUserProfileBlurbName', () => {
                const result = client.matchUserFromUserProfileBlurbName(fakePath);
                assert.strictEqual(result, "userValue");
                assert((client.pathTemplates.userProfileBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBlurbFromUserProfileBlurbName', () => {
                const result = client.matchBlurbFromUserProfileBlurbName(fakePath);
                assert.strictEqual(result, "blurbValue");
                assert((client.pathTemplates.userProfileBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('userProfileBlurbsLegacyUserBlurb', () => {
            const fakePath = "/rendered/path/userProfileBlurbsLegacyUserBlurb";
            const expectedParameters = {
                user: "userValue",
                legacy_user: "legacyUserValue",
                blurb: "blurbValue",
            };
            const client = new echoModule.v1beta1.EchoClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.userProfileBlurbsLegacyUserBlurbPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.userProfileBlurbsLegacyUserBlurbPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('userProfileBlurbsLegacyUserBlurbPath', () => {
                const result = client.userProfileBlurbsLegacyUserBlurbPath("userValue", "legacyUserValue", "blurbValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.userProfileBlurbsLegacyUserBlurbPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchUserFromUserProfileBlurbsLegacyUserBlurbName', () => {
                const result = client.matchUserFromUserProfileBlurbsLegacyUserBlurbName(fakePath);
                assert.strictEqual(result, "userValue");
                assert((client.pathTemplates.userProfileBlurbsLegacyUserBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLegacyUserFromUserProfileBlurbsLegacyUserBlurbName', () => {
                const result = client.matchLegacyUserFromUserProfileBlurbsLegacyUserBlurbName(fakePath);
                assert.strictEqual(result, "legacyUserValue");
                assert((client.pathTemplates.userProfileBlurbsLegacyUserBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBlurbFromUserProfileBlurbsLegacyUserBlurbName', () => {
                const result = client.matchBlurbFromUserProfileBlurbsLegacyUserBlurbName(fakePath);
                assert.strictEqual(result, "blurbValue");
                assert((client.pathTemplates.userProfileBlurbsLegacyUserBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
