// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as messagingModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubServerStreamingCall<ResponseType>(response?: ResponseType, error?: Error) {
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // write something to the stream to trigger transformStub and send the response back to the client
    setImmediate(() => { mockStream.write({}); });
    setImmediate(() => { mockStream.end(); });
    return sinon.stub().returns(mockStream);
}

function stubBidiStreamingCall<ResponseType>(response?: ResponseType, error?: Error) {
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    return sinon.stub().returns(mockStream);
}

function stubClientStreamingCall<ResponseType>(response?: ResponseType, error?: Error) {
    if (error) {
        return sinon.stub().callsArgWith(2, error);
    }
    const transformStub = sinon.stub();
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    return sinon.stub().returns(mockStream).callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.MessagingClient', () => {
    it('has servicePath', () => {
        const servicePath = messagingModule.v1beta1.MessagingClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = messagingModule.v1beta1.MessagingClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = messagingModule.v1beta1.MessagingClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new messagingModule.v1beta1.MessagingClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new messagingModule.v1beta1.MessagingClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.messagingStub, undefined);
        await client.initialize();
        assert(client.messagingStub);
    });

    it('has close method for the initialized client', done => {
        const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.initialize();
        assert(client.messagingStub);
        client.close().then(() => {
            done();
        });
    });

    it('has close method for the non-initialized client', done => {
        const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.messagingStub, undefined);
        client.close().then(() => {
            done();
        });
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('createRoom', () => {
        it('invokes createRoom without error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.CreateRoomRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.showcase.v1beta1.Room());
            client.innerApiCalls.createRoom = stubSimpleCall(expectedResponse);
            const [response] = await client.createRoom(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createRoom as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createRoom without error using callback', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.CreateRoomRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.showcase.v1beta1.Room());
            client.innerApiCalls.createRoom = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createRoom(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IRoom|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createRoom as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createRoom with error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.CreateRoomRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.createRoom = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createRoom(request), expectedError);
            assert((client.innerApiCalls.createRoom as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createRoom with closed client', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.CreateRoomRequest());
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createRoom(request), expectedError);
        });
    });

    describe('getRoom', () => {
        it('invokes getRoom without error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.GetRoomRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.showcase.v1beta1.Room());
            client.innerApiCalls.getRoom = stubSimpleCall(expectedResponse);
            const [response] = await client.getRoom(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getRoom as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getRoom without error using callback', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.GetRoomRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.showcase.v1beta1.Room());
            client.innerApiCalls.getRoom = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getRoom(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IRoom|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getRoom as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getRoom with error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.GetRoomRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getRoom = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getRoom(request), expectedError);
            assert((client.innerApiCalls.getRoom as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getRoom with closed client', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.GetRoomRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getRoom(request), expectedError);
        });
    });

    describe('updateRoom', () => {
        it('invokes updateRoom without error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.UpdateRoomRequest());
            request.room = {};
            request.room.name = '';
            const expectedHeaderRequestParams = "room.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.showcase.v1beta1.Room());
            client.innerApiCalls.updateRoom = stubSimpleCall(expectedResponse);
            const [response] = await client.updateRoom(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateRoom as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateRoom without error using callback', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.UpdateRoomRequest());
            request.room = {};
            request.room.name = '';
            const expectedHeaderRequestParams = "room.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.showcase.v1beta1.Room());
            client.innerApiCalls.updateRoom = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateRoom(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IRoom|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateRoom as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateRoom with error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.UpdateRoomRequest());
            request.room = {};
            request.room.name = '';
            const expectedHeaderRequestParams = "room.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateRoom = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateRoom(request), expectedError);
            assert((client.innerApiCalls.updateRoom as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateRoom with closed client', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.UpdateRoomRequest());
            request.room = {};
            request.room.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateRoom(request), expectedError);
        });
    });

    describe('deleteRoom', () => {
        it('invokes deleteRoom without error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.DeleteRoomRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteRoom = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteRoom(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteRoom as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteRoom without error using callback', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.DeleteRoomRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteRoom = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteRoom(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteRoom as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteRoom with error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.DeleteRoomRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteRoom = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteRoom(request), expectedError);
            assert((client.innerApiCalls.deleteRoom as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteRoom with closed client', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.DeleteRoomRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteRoom(request), expectedError);
        });
    });

    describe('createBlurb', () => {
        it('invokes createBlurb without error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.CreateBlurbRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.showcase.v1beta1.Blurb());
            client.innerApiCalls.createBlurb = stubSimpleCall(expectedResponse);
            const [response] = await client.createBlurb(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createBlurb as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createBlurb without error using callback', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.CreateBlurbRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.showcase.v1beta1.Blurb());
            client.innerApiCalls.createBlurb = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createBlurb(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IBlurb|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createBlurb as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createBlurb with error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.CreateBlurbRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createBlurb = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createBlurb(request), expectedError);
            assert((client.innerApiCalls.createBlurb as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createBlurb with closed client', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.CreateBlurbRequest());
            request.parent = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createBlurb(request), expectedError);
        });
    });

    describe('getBlurb', () => {
        it('invokes getBlurb without error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.GetBlurbRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.showcase.v1beta1.Blurb());
            client.innerApiCalls.getBlurb = stubSimpleCall(expectedResponse);
            const [response] = await client.getBlurb(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getBlurb as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getBlurb without error using callback', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.GetBlurbRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.showcase.v1beta1.Blurb());
            client.innerApiCalls.getBlurb = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getBlurb(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IBlurb|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getBlurb as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getBlurb with error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.GetBlurbRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getBlurb = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getBlurb(request), expectedError);
            assert((client.innerApiCalls.getBlurb as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getBlurb with closed client', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.GetBlurbRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getBlurb(request), expectedError);
        });
    });

    describe('updateBlurb', () => {
        it('invokes updateBlurb without error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.UpdateBlurbRequest());
            request.blurb = {};
            request.blurb.name = '';
            const expectedHeaderRequestParams = "blurb.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.showcase.v1beta1.Blurb());
            client.innerApiCalls.updateBlurb = stubSimpleCall(expectedResponse);
            const [response] = await client.updateBlurb(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateBlurb as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateBlurb without error using callback', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.UpdateBlurbRequest());
            request.blurb = {};
            request.blurb.name = '';
            const expectedHeaderRequestParams = "blurb.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.showcase.v1beta1.Blurb());
            client.innerApiCalls.updateBlurb = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateBlurb(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IBlurb|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateBlurb as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateBlurb with error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.UpdateBlurbRequest());
            request.blurb = {};
            request.blurb.name = '';
            const expectedHeaderRequestParams = "blurb.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateBlurb = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateBlurb(request), expectedError);
            assert((client.innerApiCalls.updateBlurb as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateBlurb with closed client', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.UpdateBlurbRequest());
            request.blurb = {};
            request.blurb.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateBlurb(request), expectedError);
        });
    });

    describe('deleteBlurb', () => {
        it('invokes deleteBlurb without error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.DeleteBlurbRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteBlurb = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteBlurb(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteBlurb as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteBlurb without error using callback', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.DeleteBlurbRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteBlurb = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteBlurb(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteBlurb as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteBlurb with error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.DeleteBlurbRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteBlurb = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteBlurb(request), expectedError);
            assert((client.innerApiCalls.deleteBlurb as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteBlurb with closed client', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.DeleteBlurbRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteBlurb(request), expectedError);
        });
    });

    describe('searchBlurbs', () => {
        it('invokes searchBlurbs without error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.SearchBlurbsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.searchBlurbs = stubLongRunningCall(expectedResponse);
            const [operation] = await client.searchBlurbs(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.searchBlurbs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes searchBlurbs without error using callback', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.SearchBlurbsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.searchBlurbs = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.searchBlurbs(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.showcase.v1beta1.ISearchBlurbsResponse, protos.google.showcase.v1beta1.ISearchBlurbsMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.showcase.v1beta1.ISearchBlurbsResponse, protos.google.showcase.v1beta1.ISearchBlurbsMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.searchBlurbs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes searchBlurbs with call error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.SearchBlurbsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.searchBlurbs = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.searchBlurbs(request), expectedError);
            assert((client.innerApiCalls.searchBlurbs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes searchBlurbs with LRO error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.SearchBlurbsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.searchBlurbs = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.searchBlurbs(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.searchBlurbs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkSearchBlurbsProgress without error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkSearchBlurbsProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkSearchBlurbsProgress with error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkSearchBlurbsProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('streamBlurbs', () => {
        it('invokes streamBlurbs without error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.StreamBlurbsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.showcase.v1beta1.StreamBlurbsResponse());
            client.innerApiCalls.streamBlurbs = stubServerStreamingCall(expectedResponse);
            const stream = client.streamBlurbs(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.showcase.v1beta1.StreamBlurbsResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.streamBlurbs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions));
        });

        it('invokes streamBlurbs with error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.StreamBlurbsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.streamBlurbs = stubServerStreamingCall(undefined, expectedError);
            const stream = client.streamBlurbs(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.showcase.v1beta1.StreamBlurbsResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.innerApiCalls.streamBlurbs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions));
        });

        it('invokes streamBlurbs with closed client', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.StreamBlurbsRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            const stream = client.streamBlurbs(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.showcase.v1beta1.StreamBlurbsResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
        });
    });

    describe('connect', () => {
        it('invokes connect without error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.ConnectRequest());
            const expectedResponse = generateSampleMessage(new protos.google.showcase.v1beta1.StreamBlurbsResponse());
            client.innerApiCalls.connect = stubBidiStreamingCall(expectedResponse);
            const stream = client.connect();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.showcase.v1beta1.StreamBlurbsResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.connect as SinonStub)
                .getCall(0).calledWith(null));
            assert.deepStrictEqual(((stream as unknown as PassThrough)
                ._transform as SinonStub).getCall(0).args[0], request);
        });

        it('invokes connect with error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.ConnectRequest());
            const expectedError = new Error('expected');
            client.innerApiCalls.connect = stubBidiStreamingCall(undefined, expectedError);
            const stream = client.connect();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.showcase.v1beta1.StreamBlurbsResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            await assert.rejects(promise, expectedError);
            assert((client.innerApiCalls.connect as SinonStub)
                .getCall(0).calledWith(null));
            assert.deepStrictEqual(((stream as unknown as PassThrough)
                ._transform as SinonStub).getCall(0).args[0], request);
        });
    });

    describe('sendBlurbs', () => {
        it('invokes sendBlurbs without error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.CreateBlurbRequest());
            const expectedResponse = generateSampleMessage(new protos.google.showcase.v1beta1.SendBlurbsResponse());
            client.innerApiCalls.sendBlurbs = stubClientStreamingCall(expectedResponse);
            let stream: PassThrough;
            const promise = new Promise((resolve, reject) => {
                stream = client.sendBlurbs(
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.ISendBlurbsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }) as unknown as PassThrough;
                stream.write(request);
                stream.end();
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.sendBlurbs as SinonStub)
                .getCall(0).calledWith(null, {} /*, callback defined above */));
            assert.deepStrictEqual((stream!._transform as SinonStub).getCall(0).args[0], request);
        });

        it('invokes sendBlurbs with error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.CreateBlurbRequest());
            const expectedError = new Error('expected');
            client.innerApiCalls.sendBlurbs = stubClientStreamingCall(undefined, expectedError);
            let stream: PassThrough;
            const promise = new Promise((resolve, reject) => {
                stream = client.sendBlurbs(
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.ISendBlurbsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }) as unknown as PassThrough;
                stream.write(request);
                stream.end();
            });
            await assert.rejects(promise, expectedError);
            assert((client.innerApiCalls.sendBlurbs as SinonStub)
                .getCall(0).calledWith(null, {} /*, callback defined above */));
        });
    });

    describe('listRooms', () => {
        it('invokes listRooms without error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.ListRoomsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = [
              generateSampleMessage(new protos.google.showcase.v1beta1.Room()),
              generateSampleMessage(new protos.google.showcase.v1beta1.Room()),
              generateSampleMessage(new protos.google.showcase.v1beta1.Room()),
            ];
            client.innerApiCalls.listRooms = stubSimpleCall(expectedResponse);
            const [response] = await client.listRooms(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listRooms as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listRooms without error using callback', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.ListRoomsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = [
              generateSampleMessage(new protos.google.showcase.v1beta1.Room()),
              generateSampleMessage(new protos.google.showcase.v1beta1.Room()),
              generateSampleMessage(new protos.google.showcase.v1beta1.Room()),
            ];
            client.innerApiCalls.listRooms = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listRooms(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IRoom[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listRooms as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listRooms with error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.ListRoomsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.listRooms = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listRooms(request), expectedError);
            assert((client.innerApiCalls.listRooms as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listRoomsStream without error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.ListRoomsRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.showcase.v1beta1.Room()),
              generateSampleMessage(new protos.google.showcase.v1beta1.Room()),
              generateSampleMessage(new protos.google.showcase.v1beta1.Room()),
            ];
            client.descriptors.page.listRooms.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listRoomsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.showcase.v1beta1.Room[] = [];
                stream.on('data', (response: protos.google.showcase.v1beta1.Room) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listRooms.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRooms, request));
        });

        it('invokes listRoomsStream with error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.ListRoomsRequest());
            const expectedError = new Error('expected');
            client.descriptors.page.listRooms.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listRoomsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.showcase.v1beta1.Room[] = [];
                stream.on('data', (response: protos.google.showcase.v1beta1.Room) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listRooms.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRooms, request));
        });

        it('uses async iteration with listRooms without error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.ListRoomsRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.showcase.v1beta1.Room()),
              generateSampleMessage(new protos.google.showcase.v1beta1.Room()),
              generateSampleMessage(new protos.google.showcase.v1beta1.Room()),
            ];
            client.descriptors.page.listRooms.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.showcase.v1beta1.IRoom[] = [];
            const iterable = client.listRoomsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listRooms.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with listRooms with error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.ListRoomsRequest());const expectedError = new Error('expected');
            client.descriptors.page.listRooms.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listRoomsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.showcase.v1beta1.IRoom[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listRooms.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('listBlurbs', () => {
        it('invokes listBlurbs without error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.ListBlurbsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.showcase.v1beta1.Blurb()),
              generateSampleMessage(new protos.google.showcase.v1beta1.Blurb()),
              generateSampleMessage(new protos.google.showcase.v1beta1.Blurb()),
            ];
            client.innerApiCalls.listBlurbs = stubSimpleCall(expectedResponse);
            const [response] = await client.listBlurbs(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listBlurbs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listBlurbs without error using callback', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.ListBlurbsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.showcase.v1beta1.Blurb()),
              generateSampleMessage(new protos.google.showcase.v1beta1.Blurb()),
              generateSampleMessage(new protos.google.showcase.v1beta1.Blurb()),
            ];
            client.innerApiCalls.listBlurbs = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listBlurbs(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IBlurb[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listBlurbs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listBlurbs with error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.ListBlurbsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listBlurbs = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listBlurbs(request), expectedError);
            assert((client.innerApiCalls.listBlurbs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listBlurbsStream without error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.ListBlurbsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.showcase.v1beta1.Blurb()),
              generateSampleMessage(new protos.google.showcase.v1beta1.Blurb()),
              generateSampleMessage(new protos.google.showcase.v1beta1.Blurb()),
            ];
            client.descriptors.page.listBlurbs.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listBlurbsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.showcase.v1beta1.Blurb[] = [];
                stream.on('data', (response: protos.google.showcase.v1beta1.Blurb) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listBlurbs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listBlurbs, request));
            assert.strictEqual(
                (client.descriptors.page.listBlurbs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listBlurbsStream with error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.ListBlurbsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listBlurbs.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listBlurbsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.showcase.v1beta1.Blurb[] = [];
                stream.on('data', (response: protos.google.showcase.v1beta1.Blurb) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listBlurbs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listBlurbs, request));
            assert.strictEqual(
                (client.descriptors.page.listBlurbs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listBlurbs without error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.ListBlurbsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.showcase.v1beta1.Blurb()),
              generateSampleMessage(new protos.google.showcase.v1beta1.Blurb()),
              generateSampleMessage(new protos.google.showcase.v1beta1.Blurb()),
            ];
            client.descriptors.page.listBlurbs.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.showcase.v1beta1.IBlurb[] = [];
            const iterable = client.listBlurbsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listBlurbs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listBlurbs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listBlurbs with error', async () => {
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.showcase.v1beta1.ListBlurbsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listBlurbs.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listBlurbsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.showcase.v1beta1.IBlurb[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listBlurbs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listBlurbs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('blueprint', () => {
            const fakePath = "/rendered/path/blueprint";
            const expectedParameters = {
                session: "sessionValue",
                test: "testValue",
                blueprint: "blueprintValue",
            };
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.blueprintPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.blueprintPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('blueprintPath', () => {
                const result = client.blueprintPath("sessionValue", "testValue", "blueprintValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.blueprintPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchSessionFromBlueprintName', () => {
                const result = client.matchSessionFromBlueprintName(fakePath);
                assert.strictEqual(result, "sessionValue");
                assert((client.pathTemplates.blueprintPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTestFromBlueprintName', () => {
                const result = client.matchTestFromBlueprintName(fakePath);
                assert.strictEqual(result, "testValue");
                assert((client.pathTemplates.blueprintPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBlueprintFromBlueprintName', () => {
                const result = client.matchBlueprintFromBlueprintName(fakePath);
                assert.strictEqual(result, "blueprintValue");
                assert((client.pathTemplates.blueprintPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('room', () => {
            const fakePath = "/rendered/path/room";
            const expectedParameters = {
                room_id: "roomIdValue",
            };
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.roomPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.roomPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('roomPath', () => {
                const result = client.roomPath("roomIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.roomPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchRoomIdFromRoomName', () => {
                const result = client.matchRoomIdFromRoomName(fakePath);
                assert.strictEqual(result, "roomIdValue");
                assert((client.pathTemplates.roomPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('roomIdBlurbId', () => {
            const fakePath = "/rendered/path/roomIdBlurbId";
            const expectedParameters = {
                room_id: "roomIdValue",
                blurb_id: "blurbIdValue",
            };
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.roomIdBlurbIdPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.roomIdBlurbIdPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('roomIdBlurbIdPath', () => {
                const result = client.roomIdBlurbIdPath("roomIdValue", "blurbIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.roomIdBlurbIdPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchRoomIdFromRoomIdBlurbIdName', () => {
                const result = client.matchRoomIdFromRoomIdBlurbIdName(fakePath);
                assert.strictEqual(result, "roomIdValue");
                assert((client.pathTemplates.roomIdBlurbIdPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBlurbIdFromRoomIdBlurbIdName', () => {
                const result = client.matchBlurbIdFromRoomIdBlurbIdName(fakePath);
                assert.strictEqual(result, "blurbIdValue");
                assert((client.pathTemplates.roomIdBlurbIdPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('roomIdBlurbsLegacyRoomIdBlurbId', () => {
            const fakePath = "/rendered/path/roomIdBlurbsLegacyRoomIdBlurbId";
            const expectedParameters = {
                room_id: "roomIdValue",
                legacy_room_id: "legacyRoomIdValue",
                blurb_id: "blurbIdValue",
            };
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.roomIdBlurbsLegacyRoomIdBlurbIdPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.roomIdBlurbsLegacyRoomIdBlurbIdPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('roomIdBlurbsLegacyRoomIdBlurbIdPath', () => {
                const result = client.roomIdBlurbsLegacyRoomIdBlurbIdPath("roomIdValue", "legacyRoomIdValue", "blurbIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.roomIdBlurbsLegacyRoomIdBlurbIdPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchRoomIdFromRoomIdBlurbsLegacyRoomIdBlurbIdName', () => {
                const result = client.matchRoomIdFromRoomIdBlurbsLegacyRoomIdBlurbIdName(fakePath);
                assert.strictEqual(result, "roomIdValue");
                assert((client.pathTemplates.roomIdBlurbsLegacyRoomIdBlurbIdPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLegacyRoomIdFromRoomIdBlurbsLegacyRoomIdBlurbIdName', () => {
                const result = client.matchLegacyRoomIdFromRoomIdBlurbsLegacyRoomIdBlurbIdName(fakePath);
                assert.strictEqual(result, "legacyRoomIdValue");
                assert((client.pathTemplates.roomIdBlurbsLegacyRoomIdBlurbIdPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBlurbIdFromRoomIdBlurbsLegacyRoomIdBlurbIdName', () => {
                const result = client.matchBlurbIdFromRoomIdBlurbsLegacyRoomIdBlurbIdName(fakePath);
                assert.strictEqual(result, "blurbIdValue");
                assert((client.pathTemplates.roomIdBlurbsLegacyRoomIdBlurbIdPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('session', () => {
            const fakePath = "/rendered/path/session";
            const expectedParameters = {
                session: "sessionValue",
            };
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.sessionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.sessionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('sessionPath', () => {
                const result = client.sessionPath("sessionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.sessionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchSessionFromSessionName', () => {
                const result = client.matchSessionFromSessionName(fakePath);
                assert.strictEqual(result, "sessionValue");
                assert((client.pathTemplates.sessionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('test', () => {
            const fakePath = "/rendered/path/test";
            const expectedParameters = {
                session: "sessionValue",
                test: "testValue",
            };
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.testPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.testPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('testPath', () => {
                const result = client.testPath("sessionValue", "testValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.testPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchSessionFromTestName', () => {
                const result = client.matchSessionFromTestName(fakePath);
                assert.strictEqual(result, "sessionValue");
                assert((client.pathTemplates.testPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTestFromTestName', () => {
                const result = client.matchTestFromTestName(fakePath);
                assert.strictEqual(result, "testValue");
                assert((client.pathTemplates.testPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('user', () => {
            const fakePath = "/rendered/path/user";
            const expectedParameters = {
                user_id: "userIdValue",
            };
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.userPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.userPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('userPath', () => {
                const result = client.userPath("userIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.userPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchUserIdFromUserName', () => {
                const result = client.matchUserIdFromUserName(fakePath);
                assert.strictEqual(result, "userIdValue");
                assert((client.pathTemplates.userPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('userIdProfileBlurbId', () => {
            const fakePath = "/rendered/path/userIdProfileBlurbId";
            const expectedParameters = {
                user_id: "userIdValue",
                blurb_id: "blurbIdValue",
            };
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.userIdProfileBlurbIdPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.userIdProfileBlurbIdPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('userIdProfileBlurbIdPath', () => {
                const result = client.userIdProfileBlurbIdPath("userIdValue", "blurbIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.userIdProfileBlurbIdPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchUserIdFromUserIdProfileBlurbIdName', () => {
                const result = client.matchUserIdFromUserIdProfileBlurbIdName(fakePath);
                assert.strictEqual(result, "userIdValue");
                assert((client.pathTemplates.userIdProfileBlurbIdPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBlurbIdFromUserIdProfileBlurbIdName', () => {
                const result = client.matchBlurbIdFromUserIdProfileBlurbIdName(fakePath);
                assert.strictEqual(result, "blurbIdValue");
                assert((client.pathTemplates.userIdProfileBlurbIdPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('userIdProfileBlurbsLegacyUserIdBlurbId', () => {
            const fakePath = "/rendered/path/userIdProfileBlurbsLegacyUserIdBlurbId";
            const expectedParameters = {
                user_id: "userIdValue",
                legacy_user_id: "legacyUserIdValue",
                blurb_id: "blurbIdValue",
            };
            const client = new messagingModule.v1beta1.MessagingClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.userIdProfileBlurbsLegacyUserIdBlurbIdPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.userIdProfileBlurbsLegacyUserIdBlurbIdPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('userIdProfileBlurbsLegacyUserIdBlurbIdPath', () => {
                const result = client.userIdProfileBlurbsLegacyUserIdBlurbIdPath("userIdValue", "legacyUserIdValue", "blurbIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.userIdProfileBlurbsLegacyUserIdBlurbIdPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchUserIdFromUserIdProfileBlurbsLegacyUserIdBlurbIdName', () => {
                const result = client.matchUserIdFromUserIdProfileBlurbsLegacyUserIdBlurbIdName(fakePath);
                assert.strictEqual(result, "userIdValue");
                assert((client.pathTemplates.userIdProfileBlurbsLegacyUserIdBlurbIdPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLegacyUserIdFromUserIdProfileBlurbsLegacyUserIdBlurbIdName', () => {
                const result = client.matchLegacyUserIdFromUserIdProfileBlurbsLegacyUserIdBlurbIdName(fakePath);
                assert.strictEqual(result, "legacyUserIdValue");
                assert((client.pathTemplates.userIdProfileBlurbsLegacyUserIdBlurbIdPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBlurbIdFromUserIdProfileBlurbsLegacyUserIdBlurbIdName', () => {
                const result = client.matchBlurbIdFromUserIdProfileBlurbsLegacyUserIdBlurbIdName(fakePath);
                assert.strictEqual(result, "blurbIdValue");
                assert((client.pathTemplates.userIdProfileBlurbsLegacyUserIdBlurbIdPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
