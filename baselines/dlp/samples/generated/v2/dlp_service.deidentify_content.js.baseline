


'use strict';

function main() {
  // [START dlp_deidentify_content_sample]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  The parent resource name, for example projects/my-project-id.
   */
  // const parent ='abc123'
  /**
   *  Configuration for the de-identification of the content item.
   *  Items specified here will override the template referenced by the
   *  deidentify_template_name argument.
   */
  // const deidentifyConfig =''
  /**
   *  Configuration for the inspector.
   *  Items specified here will override the template referenced by the
   *  inspect_template_name argument.
   */
  // const inspectConfig =''
  /**
   *  The item to de-identify. Will be treated as text.
   */
  // const item =''
  /**
   *  Template to use. Any configuration directly specified in
   *  inspect_config will override those set in the template. Singular fields
   *  that are set in this request will replace their corresponding fields in the
   *  template. Repeated fields are appended. Singular sub-messages and groups
   *  are recursively merged.
   */
  // const inspectTemplateName ='abc123'
  /**
   *  Template to use. Any configuration directly specified in
   *  deidentify_config will override those set in the template. Singular fields
   *  that are set in this request will replace their corresponding fields in the
   *  template. Repeated fields are appended. Singular sub-messages and groups
   *  are recursively merged.
   */
  // const deidentifyTemplateName ='abc123'
  /**
   *  The geographic location to process de-identification. Reserved for future
   *  extensions.
   */
  // const locationId ='abc123'

  // Imports the Dlp library
  const {DlpServiceClient} = require('');

  // Instantiates a client
  const dlpClient = new DlpServiceClient();

  async function deidentifyContent() {
    // Construct request
    const request = {
    };

    // Run request
    const response = await dlpClient.deidentifyContent(request);
    console.log(`Response: ${response}`);
  }

  deidentifyContent();
  // [END dlp_deidentify_content_sample]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
