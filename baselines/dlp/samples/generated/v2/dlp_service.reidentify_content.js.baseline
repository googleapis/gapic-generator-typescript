


'use strict';

function main() {
  // [START dlp_reidentify_content_sample]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The parent resource name.
   */
  // const parent ='abc123'
  /**
   *  Configuration for the re-identification of the content item.
   *  This field shares the same proto message type that is used for
   *  de-identification, however its usage here is for the reversal of the
   *  previous de-identification. Re-identification is performed by examining
   *  the transformations used to de-identify the items and executing the
   *  reverse. This requires that only reversible transformations
   *  be provided here. The reversible transformations are:
   *   - `CryptoDeterministicConfig`
   *   - `CryptoReplaceFfxFpeConfig`
   */
  // const reidentifyConfig =''
  /**
   *  Configuration for the inspector.
   */
  // const inspectConfig =''
  /**
   *  The item to re-identify. Will be treated as text.
   */
  // const item =''
  /**
   *  Template to use. Any configuration directly specified in
   *  `inspect_config` will override those set in the template. Singular fields
   *  that are set in this request will replace their corresponding fields in the
   *  template. Repeated fields are appended. Singular sub-messages and groups
   *  are recursively merged.
   */
  // const inspectTemplateName ='abc123'
  /**
   *  Template to use. References an instance of `DeidentifyTemplate`.
   *  Any configuration directly specified in `reidentify_config` or
   *  `inspect_config` will override those set in the template. Singular fields
   *  that are set in this request will replace their corresponding fields in the
   *  template. Repeated fields are appended. Singular sub-messages and groups
   *  are recursively merged.
   */
  // const reidentifyTemplateName ='abc123'
  /**
   *  The geographic location to process content reidentification.  Reserved for
   *  future extensions.
   */
  // const locationId ='abc123'

  // Imports the Dlp library
  const {DlpServiceClient} = require('');

  // Instantiates a client
  const dlpClient = new DlpServiceClient();

  async function reidentifyContent() {
    // Construct request
    const request = {
      parent,
    };

    // Run request
    const response = await dlpClient.reidentifyContent(request);
    console.log(`Response: ${response}`);
  }

  reidentifyContent();
  // [END dlp_reidentify_content_sample]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
