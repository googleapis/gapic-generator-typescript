// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as dlpserviceModule from '../src';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

describe('v2.DlpServiceClient', () => {
    describe('Common methods', () => {
        it('has apiEndpoint', () => {
            const client = new dlpserviceModule.v2.DlpServiceClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'dlp.googleapis.com');
        });

        it('has universeDomain', () => {
            const client = new dlpserviceModule.v2.DlpServiceClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });

        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            it('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = dlpserviceModule.v2.DlpServiceClient.servicePath;
                assert.strictEqual(servicePath, 'dlp.googleapis.com');
                assert(stub.called);
                stub.restore();
            });

            it('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = dlpserviceModule.v2.DlpServiceClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'dlp.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
        }
        it('sets apiEndpoint according to universe domain camelCase', () => {
            const client = new dlpserviceModule.v2.DlpServiceClient({universeDomain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'dlp.example.com');
        });

        it('sets apiEndpoint according to universe domain snakeCase', () => {
            const client = new dlpserviceModule.v2.DlpServiceClient({universe_domain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'dlp.example.com');
        });

        if (typeof process === 'object' && 'env' in process) {
            describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
                it('sets apiEndpoint from environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new dlpserviceModule.v2.DlpServiceClient();
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'dlp.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });

                it('value configured in code has priority over environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new dlpserviceModule.v2.DlpServiceClient({universeDomain: 'configured.example.com'});
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'dlp.configured.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
            });
        }
        it('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new dlpserviceModule.v2.DlpServiceClient({universe_domain: 'example.com', universeDomain: 'example.net'}); });
        });

        it('has port', () => {
            const port = dlpserviceModule.v2.DlpServiceClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new dlpserviceModule.v2.DlpServiceClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.dlpServiceStub, undefined);
            await client.initialize();
            assert(client.dlpServiceStub);
        });

        it('has close method for the initialized client', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.dlpServiceStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.dlpServiceStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new dlpserviceModule.v2.DlpServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new dlpserviceModule.v2.DlpServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('Path templates', () => {

        describe('dlpJob', () => {
            const fakePath = "/rendered/path/dlpJob";
            const expectedParameters = {
                project: "projectValue",
                dlp_job: "dlpJobValue",
            };
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.dlpJobPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.dlpJobPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('dlpJobPath', () => {
                const result = client.dlpJobPath("projectValue", "dlpJobValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.dlpJobPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDlpJobName', () => {
                const result = client.matchProjectFromDlpJobName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.dlpJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDlpJobFromDlpJobName', () => {
                const result = client.matchDlpJobFromDlpJobName(fakePath);
                assert.strictEqual(result, "dlpJobValue");
                assert((client.pathTemplates.dlpJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('jobTrigger', () => {
            const fakePath = "/rendered/path/jobTrigger";
            const expectedParameters = {
                project: "projectValue",
                job_trigger: "jobTriggerValue",
            };
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.jobTriggerPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.jobTriggerPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('jobTriggerPath', () => {
                const result = client.jobTriggerPath("projectValue", "jobTriggerValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.jobTriggerPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromJobTriggerName', () => {
                const result = client.matchProjectFromJobTriggerName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.jobTriggerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchJobTriggerFromJobTriggerName', () => {
                const result = client.matchJobTriggerFromJobTriggerName(fakePath);
                assert.strictEqual(result, "jobTriggerValue");
                assert((client.pathTemplates.jobTriggerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('organization', () => {
            const fakePath = "/rendered/path/organization";
            const expectedParameters = {
                organization: "organizationValue",
            };
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.organizationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.organizationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('organizationPath', () => {
                const result = client.organizationPath("organizationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.organizationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchOrganizationFromOrganizationName', () => {
                const result = client.matchOrganizationFromOrganizationName(fakePath);
                assert.strictEqual(result, "organizationValue");
                assert((client.pathTemplates.organizationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('organizationDeidentifyTemplate', () => {
            const fakePath = "/rendered/path/organizationDeidentifyTemplate";
            const expectedParameters = {
                organization: "organizationValue",
                deidentify_template: "deidentifyTemplateValue",
            };
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.organizationDeidentifyTemplatePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.organizationDeidentifyTemplatePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('organizationDeidentifyTemplatePath', () => {
                const result = client.organizationDeidentifyTemplatePath("organizationValue", "deidentifyTemplateValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.organizationDeidentifyTemplatePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchOrganizationFromOrganizationDeidentifyTemplateName', () => {
                const result = client.matchOrganizationFromOrganizationDeidentifyTemplateName(fakePath);
                assert.strictEqual(result, "organizationValue");
                assert((client.pathTemplates.organizationDeidentifyTemplatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDeidentifyTemplateFromOrganizationDeidentifyTemplateName', () => {
                const result = client.matchDeidentifyTemplateFromOrganizationDeidentifyTemplateName(fakePath);
                assert.strictEqual(result, "deidentifyTemplateValue");
                assert((client.pathTemplates.organizationDeidentifyTemplatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('organizationInspectTemplate', () => {
            const fakePath = "/rendered/path/organizationInspectTemplate";
            const expectedParameters = {
                organization: "organizationValue",
                inspect_template: "inspectTemplateValue",
            };
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.organizationInspectTemplatePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.organizationInspectTemplatePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('organizationInspectTemplatePath', () => {
                const result = client.organizationInspectTemplatePath("organizationValue", "inspectTemplateValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.organizationInspectTemplatePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchOrganizationFromOrganizationInspectTemplateName', () => {
                const result = client.matchOrganizationFromOrganizationInspectTemplateName(fakePath);
                assert.strictEqual(result, "organizationValue");
                assert((client.pathTemplates.organizationInspectTemplatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInspectTemplateFromOrganizationInspectTemplateName', () => {
                const result = client.matchInspectTemplateFromOrganizationInspectTemplateName(fakePath);
                assert.strictEqual(result, "inspectTemplateValue");
                assert((client.pathTemplates.organizationInspectTemplatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('organizationStoredInfoType', () => {
            const fakePath = "/rendered/path/organizationStoredInfoType";
            const expectedParameters = {
                organization: "organizationValue",
                stored_info_type: "storedInfoTypeValue",
            };
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.organizationStoredInfoTypePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.organizationStoredInfoTypePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('organizationStoredInfoTypePath', () => {
                const result = client.organizationStoredInfoTypePath("organizationValue", "storedInfoTypeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.organizationStoredInfoTypePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchOrganizationFromOrganizationStoredInfoTypeName', () => {
                const result = client.matchOrganizationFromOrganizationStoredInfoTypeName(fakePath);
                assert.strictEqual(result, "organizationValue");
                assert((client.pathTemplates.organizationStoredInfoTypePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchStoredInfoTypeFromOrganizationStoredInfoTypeName', () => {
                const result = client.matchStoredInfoTypeFromOrganizationStoredInfoTypeName(fakePath);
                assert.strictEqual(result, "storedInfoTypeValue");
                assert((client.pathTemplates.organizationStoredInfoTypePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('project', () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectDeidentifyTemplate', () => {
            const fakePath = "/rendered/path/projectDeidentifyTemplate";
            const expectedParameters = {
                project: "projectValue",
                deidentify_template: "deidentifyTemplateValue",
            };
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectDeidentifyTemplatePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectDeidentifyTemplatePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectDeidentifyTemplatePath', () => {
                const result = client.projectDeidentifyTemplatePath("projectValue", "deidentifyTemplateValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectDeidentifyTemplatePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectDeidentifyTemplateName', () => {
                const result = client.matchProjectFromProjectDeidentifyTemplateName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectDeidentifyTemplatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDeidentifyTemplateFromProjectDeidentifyTemplateName', () => {
                const result = client.matchDeidentifyTemplateFromProjectDeidentifyTemplateName(fakePath);
                assert.strictEqual(result, "deidentifyTemplateValue");
                assert((client.pathTemplates.projectDeidentifyTemplatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectInspectTemplate', () => {
            const fakePath = "/rendered/path/projectInspectTemplate";
            const expectedParameters = {
                project: "projectValue",
                inspect_template: "inspectTemplateValue",
            };
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectInspectTemplatePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectInspectTemplatePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectInspectTemplatePath', () => {
                const result = client.projectInspectTemplatePath("projectValue", "inspectTemplateValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectInspectTemplatePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectInspectTemplateName', () => {
                const result = client.matchProjectFromProjectInspectTemplateName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectInspectTemplatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInspectTemplateFromProjectInspectTemplateName', () => {
                const result = client.matchInspectTemplateFromProjectInspectTemplateName(fakePath);
                assert.strictEqual(result, "inspectTemplateValue");
                assert((client.pathTemplates.projectInspectTemplatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectStoredInfoType', () => {
            const fakePath = "/rendered/path/projectStoredInfoType";
            const expectedParameters = {
                project: "projectValue",
                stored_info_type: "storedInfoTypeValue",
            };
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectStoredInfoTypePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectStoredInfoTypePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectStoredInfoTypePath', () => {
                const result = client.projectStoredInfoTypePath("projectValue", "storedInfoTypeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectStoredInfoTypePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectStoredInfoTypeName', () => {
                const result = client.matchProjectFromProjectStoredInfoTypeName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectStoredInfoTypePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchStoredInfoTypeFromProjectStoredInfoTypeName', () => {
                const result = client.matchStoredInfoTypeFromProjectStoredInfoTypeName(fakePath);
                assert.strictEqual(result, "storedInfoTypeValue");
                assert((client.pathTemplates.projectStoredInfoTypePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
