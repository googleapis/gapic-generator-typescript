// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


'use strict';

function main() {
  // [START cloudkms_v1_generated_KeyManagementService_Encrypt_async]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The resource name of the [CryptoKe $1y $1[google.cloud.kms.v1.CryptoKe $1y $1 or [CryptoKeyVersio $1n $1[google.cloud.kms.v1.CryptoKeyVersio $1n $1
   *  to use for encryption.
   *  If a [CryptoKe $1y $1[google.cloud.kms.v1.CryptoKe $1y $1 is specified, the server will use its
   *  [primary versio $1n $1[google.cloud.kms.v1.CryptoKey.primar $1y $1.
   */
  // const name = 'abc123'
  /**
   *  Required. The data to encrypt. Must be no larger than 64KiB.
   *  The maximum size depends on the key version's
   *  [protection_leve $1l $1[google.cloud.kms.v1.CryptoKeyVersionTemplate.protection_leve $1l $1. For
   *  [SOFTWAR $1E $1[google.cloud.kms.v1.ProtectionLevel.SOFTWAR $1E $1 keys, the plaintext must be no larger
   *  than 64KiB. For [HS $1M $1[google.cloud.kms.v1.ProtectionLevel.HS $1M $1 keys, the combined length of the
   *  plaintext and additional_authenticated_data fields must be no larger than
   *  8KiB.
   */
  // const plaintext = 'Buffer.from('string')'
  /**
   *  Optional data that, if specified, must also be provided during decryption
   *  through [DecryptRequest.additional_authenticated_dat $1a $1[google.cloud.kms.v1.DecryptRequest.additional_authenticated_dat $1a $1.
   *  The maximum size depends on the key version's
   *  [protection_leve $1l $1[google.cloud.kms.v1.CryptoKeyVersionTemplate.protection_leve $1l $1. For
   *  [SOFTWAR $1E $1[google.cloud.kms.v1.ProtectionLevel.SOFTWAR $1E $1 keys, the AAD must be no larger than
   *  64KiB. For [HS $1M $1[google.cloud.kms.v1.ProtectionLevel.HS $1M $1 keys, the combined length of the
   *  plaintext and additional_authenticated_data fields must be no larger than
   *  8KiB.
   */
  // const additionalAuthenticatedData = 'Buffer.from('string')'

  // Imports the Kms library
  const {KeyManagementServiceClient} = require('kms').v1;

  // Instantiates a client
  const kmsClient = new KeyManagementServiceClient();

  async function encrypt() {
    // Construct request
    const request = {
    };

    // Run request
    const response = await kmsClient.encrypt(request);
    console.log(response);
  }

  encrypt();
  // [END cloudkms_v1_generated_KeyManagementService_Encrypt_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
