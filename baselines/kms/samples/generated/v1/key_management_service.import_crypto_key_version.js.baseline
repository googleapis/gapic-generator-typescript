// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


'use strict';

function main() {
  // [START cloudkms_v1_generated_KeyManagementService_ImportCryptoKeyVersion_async]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The [nam $1e $1[google.cloud.kms.v1.CryptoKey.nam $1e $1 of the [CryptoKe $1y $1[google.cloud.kms.v1.CryptoKe $1y $1 to
   *  be imported into.
   */
  // const parent = 'abc123'
  /**
   *  Required. The [algorith $1m $1[google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorith $1m $1 of
   *  the key being imported. This does not need to match the
   *  [version_templat $1e $1[google.cloud.kms.v1.CryptoKey.version_templat $1e $1 of the [CryptoKe $1y $1[google.cloud.kms.v1.CryptoKe $1y $1 this
   *  version imports into.
   */
  // const algorithm = ''
  /**
   *  Required. The [nam $1e $1[google.cloud.kms.v1.ImportJob.nam $1e $1 of the [ImportJo $1b $1[google.cloud.kms.v1.ImportJo $1b $1 that was used to
   *  wrap this key material.
   */
  // const importJob = 'abc123'
  /**
   *  Wrapped key material produced with
   *  [RSA_OAEP_3072_SHA1_AES_25 $16 $1[google.cloud.kms.v1.ImportJob.ImportMethod.RSA_OAEP_3072_SHA1_AES_25 $16 $1
   *  or
   *  [RSA_OAEP_4096_SHA1_AES_25 $16 $1[google.cloud.kms.v1.ImportJob.ImportMethod.RSA_OAEP_4096_SHA1_AES_25 $16 $1.
   *  This field contains the concatenation of two wrapped keys:
   *  <ol>
   *    <li>An ephemeral AES-256 wrapping key wrapped with the
   *        [public_ke $1y $1[google.cloud.kms.v1.ImportJob.public_ke $1y $1 using RSAES-OAEP with SHA-1,
   *        MGF1 with SHA-1, and an empty label.
   *    </li>
   *    <li>The key to be imported, wrapped with the ephemeral AES-256 key
   *        using AES-KWP (RFC 5649).
   *    </li>
   *  </ol>
   *  This format is the same as the format produced by PKCS#11 mechanism
   *  CKM_RSA_AES_KEY_WRAP.
   */
  // const rsaAesWrappedKey = 'Buffer.from('string')'

  // Imports the Kms library
  const {KeyManagementServiceClient} = require('kms').v1;

  // Instantiates a client
  const kmsClient = new KeyManagementServiceClient();

  async function importCryptoKeyVersion() {
    // Construct request
    const request = {
    };

    // Run request
    const response = await kmsClient.importCryptoKeyVersion(request);
    console.log(response);
  }

  importCryptoKeyVersion();
  // [END cloudkms_v1_generated_KeyManagementService_ImportCryptoKeyVersion_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
