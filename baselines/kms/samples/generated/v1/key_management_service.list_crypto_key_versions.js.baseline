


'use strict';

function main() {
  // [START kms_list_crypto_key_versions_sample]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The resource name of the [CryptoKey][google.cloud.kms.v1.CryptoKey] to list, in the format
   *  `projects/* /locations/* /keyRings/* /cryptoKeys/*`.
   */
  // const parent ='abc123'
  /**
   *  Optional limit on the number of [CryptoKeyVersions][google.cloud.kms.v1.CryptoKeyVersion] to
   *  include in the response. Further [CryptoKeyVersions][google.cloud.kms.v1.CryptoKeyVersion] can
   *  subsequently be obtained by including the
   *  [ListCryptoKeyVersionsResponse.next_page_token][google.cloud.kms.v1.ListCryptoKeyVersionsResponse.next_page_token] in a subsequent request.
   *  If unspecified, the server will pick an appropriate default.
   */
  // const pageSize =1234
  /**
   *  Optional pagination token, returned earlier via
   *  [ListCryptoKeyVersionsResponse.next_page_token][google.cloud.kms.v1.ListCryptoKeyVersionsResponse.next_page_token].
   */
  // const pageToken ='abc123'
  /**
   *  The fields to include in the response.
   */
  // const view =''
  /**
   *  Optional. Only include resources that match the filter in the response.
   */
  // const filter ='abc123'
  /**
   *  Optional. Specify how the results should be sorted. If not specified, the
   *  results will be sorted in the default order.
   */
  // const orderBy ='abc123'

  // Imports the Kms library
  const {KeyManagementServiceClient} = require('kms');

  // Instantiates a client
  const kmsClient = new KeyManagementServiceClient();

  async function listCryptoKeyVersions() {
    // Construct request
    const request = {
    };

    // Run request
    const iterable = await kmsClient.listCryptoKeyVersionsAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  listCryptoKeyVersions();
  // [END kms_list_crypto_key_versions_sample]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
