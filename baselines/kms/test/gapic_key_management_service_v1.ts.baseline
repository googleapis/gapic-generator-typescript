// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as keymanagementserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, IamProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.KeyManagementServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = keymanagementserviceModule.v1.KeyManagementServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = keymanagementserviceModule.v1.KeyManagementServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = keymanagementserviceModule.v1.KeyManagementServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new keymanagementserviceModule.v1.KeyManagementServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.keyManagementServiceStub, undefined);
        await client.initialize();
        assert(client.keyManagementServiceStub);
    });

    it('has close method for the initialized client', done => {
        const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.initialize();
        assert(client.keyManagementServiceStub);
        client.close().then(() => {
            done();
        });
    });

    it('has close method for the non-initialized client', done => {
        const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.keyManagementServiceStub, undefined);
        client.close().then(() => {
            done();
        });
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getKeyRing', () => {
        it('invokes getKeyRing without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetKeyRingRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing());
            client.innerApiCalls.getKeyRing = stubSimpleCall(expectedResponse);
            const [response] = await client.getKeyRing(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getKeyRing as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getKeyRing without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetKeyRingRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing());
            client.innerApiCalls.getKeyRing = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getKeyRing(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.IKeyRing|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getKeyRing as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getKeyRing with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetKeyRingRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getKeyRing = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getKeyRing(request), expectedError);
            assert((client.innerApiCalls.getKeyRing as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getKeyRing with closed client', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetKeyRingRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getKeyRing(request), expectedError);
        });
    });

    describe('getCryptoKey', () => {
        it('invokes getCryptoKey without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetCryptoKeyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey());
            client.innerApiCalls.getCryptoKey = stubSimpleCall(expectedResponse);
            const [response] = await client.getCryptoKey(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCryptoKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getCryptoKey without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetCryptoKeyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey());
            client.innerApiCalls.getCryptoKey = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getCryptoKey(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.ICryptoKey|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCryptoKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getCryptoKey with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetCryptoKeyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getCryptoKey = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getCryptoKey(request), expectedError);
            assert((client.innerApiCalls.getCryptoKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getCryptoKey with closed client', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetCryptoKeyRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getCryptoKey(request), expectedError);
        });
    });

    describe('getCryptoKeyVersion', () => {
        it('invokes getCryptoKeyVersion without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetCryptoKeyVersionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion());
            client.innerApiCalls.getCryptoKeyVersion = stubSimpleCall(expectedResponse);
            const [response] = await client.getCryptoKeyVersion(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCryptoKeyVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getCryptoKeyVersion without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetCryptoKeyVersionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion());
            client.innerApiCalls.getCryptoKeyVersion = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getCryptoKeyVersion(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.ICryptoKeyVersion|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCryptoKeyVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getCryptoKeyVersion with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetCryptoKeyVersionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getCryptoKeyVersion = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getCryptoKeyVersion(request), expectedError);
            assert((client.innerApiCalls.getCryptoKeyVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getCryptoKeyVersion with closed client', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetCryptoKeyVersionRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getCryptoKeyVersion(request), expectedError);
        });
    });

    describe('getPublicKey', () => {
        it('invokes getPublicKey without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetPublicKeyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.PublicKey());
            client.innerApiCalls.getPublicKey = stubSimpleCall(expectedResponse);
            const [response] = await client.getPublicKey(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getPublicKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getPublicKey without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetPublicKeyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.PublicKey());
            client.innerApiCalls.getPublicKey = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getPublicKey(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.IPublicKey|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getPublicKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getPublicKey with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetPublicKeyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getPublicKey = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getPublicKey(request), expectedError);
            assert((client.innerApiCalls.getPublicKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getPublicKey with closed client', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetPublicKeyRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getPublicKey(request), expectedError);
        });
    });

    describe('getImportJob', () => {
        it('invokes getImportJob without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetImportJobRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob());
            client.innerApiCalls.getImportJob = stubSimpleCall(expectedResponse);
            const [response] = await client.getImportJob(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getImportJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getImportJob without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetImportJobRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob());
            client.innerApiCalls.getImportJob = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getImportJob(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.IImportJob|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getImportJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getImportJob with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetImportJobRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getImportJob = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getImportJob(request), expectedError);
            assert((client.innerApiCalls.getImportJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getImportJob with closed client', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.GetImportJobRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getImportJob(request), expectedError);
        });
    });

    describe('createKeyRing', () => {
        it('invokes createKeyRing without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.CreateKeyRingRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing());
            client.innerApiCalls.createKeyRing = stubSimpleCall(expectedResponse);
            const [response] = await client.createKeyRing(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createKeyRing as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createKeyRing without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.CreateKeyRingRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing());
            client.innerApiCalls.createKeyRing = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createKeyRing(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.IKeyRing|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createKeyRing as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createKeyRing with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.CreateKeyRingRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createKeyRing = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createKeyRing(request), expectedError);
            assert((client.innerApiCalls.createKeyRing as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createKeyRing with closed client', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.CreateKeyRingRequest());
            request.parent = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createKeyRing(request), expectedError);
        });
    });

    describe('createCryptoKey', () => {
        it('invokes createCryptoKey without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.CreateCryptoKeyRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey());
            client.innerApiCalls.createCryptoKey = stubSimpleCall(expectedResponse);
            const [response] = await client.createCryptoKey(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createCryptoKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createCryptoKey without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.CreateCryptoKeyRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey());
            client.innerApiCalls.createCryptoKey = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createCryptoKey(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.ICryptoKey|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createCryptoKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createCryptoKey with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.CreateCryptoKeyRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createCryptoKey = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createCryptoKey(request), expectedError);
            assert((client.innerApiCalls.createCryptoKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createCryptoKey with closed client', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.CreateCryptoKeyRequest());
            request.parent = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createCryptoKey(request), expectedError);
        });
    });

    describe('createCryptoKeyVersion', () => {
        it('invokes createCryptoKeyVersion without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.CreateCryptoKeyVersionRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion());
            client.innerApiCalls.createCryptoKeyVersion = stubSimpleCall(expectedResponse);
            const [response] = await client.createCryptoKeyVersion(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createCryptoKeyVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createCryptoKeyVersion without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.CreateCryptoKeyVersionRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion());
            client.innerApiCalls.createCryptoKeyVersion = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createCryptoKeyVersion(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.ICryptoKeyVersion|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createCryptoKeyVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createCryptoKeyVersion with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.CreateCryptoKeyVersionRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createCryptoKeyVersion = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createCryptoKeyVersion(request), expectedError);
            assert((client.innerApiCalls.createCryptoKeyVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createCryptoKeyVersion with closed client', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.CreateCryptoKeyVersionRequest());
            request.parent = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createCryptoKeyVersion(request), expectedError);
        });
    });

    describe('importCryptoKeyVersion', () => {
        it('invokes importCryptoKeyVersion without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ImportCryptoKeyVersionRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion());
            client.innerApiCalls.importCryptoKeyVersion = stubSimpleCall(expectedResponse);
            const [response] = await client.importCryptoKeyVersion(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.importCryptoKeyVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes importCryptoKeyVersion without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ImportCryptoKeyVersionRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion());
            client.innerApiCalls.importCryptoKeyVersion = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.importCryptoKeyVersion(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.ICryptoKeyVersion|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.importCryptoKeyVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes importCryptoKeyVersion with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ImportCryptoKeyVersionRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.importCryptoKeyVersion = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.importCryptoKeyVersion(request), expectedError);
            assert((client.innerApiCalls.importCryptoKeyVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes importCryptoKeyVersion with closed client', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ImportCryptoKeyVersionRequest());
            request.parent = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.importCryptoKeyVersion(request), expectedError);
        });
    });

    describe('createImportJob', () => {
        it('invokes createImportJob without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.CreateImportJobRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob());
            client.innerApiCalls.createImportJob = stubSimpleCall(expectedResponse);
            const [response] = await client.createImportJob(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createImportJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createImportJob without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.CreateImportJobRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob());
            client.innerApiCalls.createImportJob = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createImportJob(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.IImportJob|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createImportJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createImportJob with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.CreateImportJobRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createImportJob = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createImportJob(request), expectedError);
            assert((client.innerApiCalls.createImportJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createImportJob with closed client', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.CreateImportJobRequest());
            request.parent = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createImportJob(request), expectedError);
        });
    });

    describe('updateCryptoKey', () => {
        it('invokes updateCryptoKey without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.UpdateCryptoKeyRequest());
            request.cryptoKey = {};
            request.cryptoKey.name = '';
            const expectedHeaderRequestParams = "crypto_key.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey());
            client.innerApiCalls.updateCryptoKey = stubSimpleCall(expectedResponse);
            const [response] = await client.updateCryptoKey(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCryptoKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateCryptoKey without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.UpdateCryptoKeyRequest());
            request.cryptoKey = {};
            request.cryptoKey.name = '';
            const expectedHeaderRequestParams = "crypto_key.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey());
            client.innerApiCalls.updateCryptoKey = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateCryptoKey(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.ICryptoKey|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCryptoKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateCryptoKey with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.UpdateCryptoKeyRequest());
            request.cryptoKey = {};
            request.cryptoKey.name = '';
            const expectedHeaderRequestParams = "crypto_key.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCryptoKey = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateCryptoKey(request), expectedError);
            assert((client.innerApiCalls.updateCryptoKey as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateCryptoKey with closed client', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.UpdateCryptoKeyRequest());
            request.cryptoKey = {};
            request.cryptoKey.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateCryptoKey(request), expectedError);
        });
    });

    describe('updateCryptoKeyVersion', () => {
        it('invokes updateCryptoKeyVersion without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.UpdateCryptoKeyVersionRequest());
            request.cryptoKeyVersion = {};
            request.cryptoKeyVersion.name = '';
            const expectedHeaderRequestParams = "crypto_key_version.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion());
            client.innerApiCalls.updateCryptoKeyVersion = stubSimpleCall(expectedResponse);
            const [response] = await client.updateCryptoKeyVersion(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCryptoKeyVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateCryptoKeyVersion without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.UpdateCryptoKeyVersionRequest());
            request.cryptoKeyVersion = {};
            request.cryptoKeyVersion.name = '';
            const expectedHeaderRequestParams = "crypto_key_version.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion());
            client.innerApiCalls.updateCryptoKeyVersion = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateCryptoKeyVersion(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.ICryptoKeyVersion|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCryptoKeyVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateCryptoKeyVersion with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.UpdateCryptoKeyVersionRequest());
            request.cryptoKeyVersion = {};
            request.cryptoKeyVersion.name = '';
            const expectedHeaderRequestParams = "crypto_key_version.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCryptoKeyVersion = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateCryptoKeyVersion(request), expectedError);
            assert((client.innerApiCalls.updateCryptoKeyVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateCryptoKeyVersion with closed client', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.UpdateCryptoKeyVersionRequest());
            request.cryptoKeyVersion = {};
            request.cryptoKeyVersion.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateCryptoKeyVersion(request), expectedError);
        });
    });

    describe('encrypt', () => {
        it('invokes encrypt without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.EncryptRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.EncryptResponse());
            client.innerApiCalls.encrypt = stubSimpleCall(expectedResponse);
            const [response] = await client.encrypt(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.encrypt as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes encrypt without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.EncryptRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.EncryptResponse());
            client.innerApiCalls.encrypt = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.encrypt(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.IEncryptResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.encrypt as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes encrypt with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.EncryptRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.encrypt = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.encrypt(request), expectedError);
            assert((client.innerApiCalls.encrypt as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes encrypt with closed client', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.EncryptRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.encrypt(request), expectedError);
        });
    });

    describe('decrypt', () => {
        it('invokes decrypt without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.DecryptRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.DecryptResponse());
            client.innerApiCalls.decrypt = stubSimpleCall(expectedResponse);
            const [response] = await client.decrypt(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.decrypt as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes decrypt without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.DecryptRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.DecryptResponse());
            client.innerApiCalls.decrypt = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.decrypt(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.IDecryptResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.decrypt as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes decrypt with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.DecryptRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.decrypt = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.decrypt(request), expectedError);
            assert((client.innerApiCalls.decrypt as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes decrypt with closed client', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.DecryptRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.decrypt(request), expectedError);
        });
    });

    describe('asymmetricSign', () => {
        it('invokes asymmetricSign without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.AsymmetricSignRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.AsymmetricSignResponse());
            client.innerApiCalls.asymmetricSign = stubSimpleCall(expectedResponse);
            const [response] = await client.asymmetricSign(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.asymmetricSign as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes asymmetricSign without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.AsymmetricSignRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.AsymmetricSignResponse());
            client.innerApiCalls.asymmetricSign = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.asymmetricSign(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.IAsymmetricSignResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.asymmetricSign as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes asymmetricSign with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.AsymmetricSignRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.asymmetricSign = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.asymmetricSign(request), expectedError);
            assert((client.innerApiCalls.asymmetricSign as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes asymmetricSign with closed client', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.AsymmetricSignRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.asymmetricSign(request), expectedError);
        });
    });

    describe('asymmetricDecrypt', () => {
        it('invokes asymmetricDecrypt without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.AsymmetricDecryptRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.AsymmetricDecryptResponse());
            client.innerApiCalls.asymmetricDecrypt = stubSimpleCall(expectedResponse);
            const [response] = await client.asymmetricDecrypt(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.asymmetricDecrypt as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes asymmetricDecrypt without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.AsymmetricDecryptRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.AsymmetricDecryptResponse());
            client.innerApiCalls.asymmetricDecrypt = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.asymmetricDecrypt(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.IAsymmetricDecryptResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.asymmetricDecrypt as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes asymmetricDecrypt with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.AsymmetricDecryptRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.asymmetricDecrypt = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.asymmetricDecrypt(request), expectedError);
            assert((client.innerApiCalls.asymmetricDecrypt as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes asymmetricDecrypt with closed client', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.AsymmetricDecryptRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.asymmetricDecrypt(request), expectedError);
        });
    });

    describe('updateCryptoKeyPrimaryVersion', () => {
        it('invokes updateCryptoKeyPrimaryVersion without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.UpdateCryptoKeyPrimaryVersionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey());
            client.innerApiCalls.updateCryptoKeyPrimaryVersion = stubSimpleCall(expectedResponse);
            const [response] = await client.updateCryptoKeyPrimaryVersion(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCryptoKeyPrimaryVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateCryptoKeyPrimaryVersion without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.UpdateCryptoKeyPrimaryVersionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey());
            client.innerApiCalls.updateCryptoKeyPrimaryVersion = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateCryptoKeyPrimaryVersion(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.ICryptoKey|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCryptoKeyPrimaryVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateCryptoKeyPrimaryVersion with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.UpdateCryptoKeyPrimaryVersionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCryptoKeyPrimaryVersion = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateCryptoKeyPrimaryVersion(request), expectedError);
            assert((client.innerApiCalls.updateCryptoKeyPrimaryVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateCryptoKeyPrimaryVersion with closed client', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.UpdateCryptoKeyPrimaryVersionRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateCryptoKeyPrimaryVersion(request), expectedError);
        });
    });

    describe('destroyCryptoKeyVersion', () => {
        it('invokes destroyCryptoKeyVersion without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.DestroyCryptoKeyVersionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion());
            client.innerApiCalls.destroyCryptoKeyVersion = stubSimpleCall(expectedResponse);
            const [response] = await client.destroyCryptoKeyVersion(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.destroyCryptoKeyVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes destroyCryptoKeyVersion without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.DestroyCryptoKeyVersionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion());
            client.innerApiCalls.destroyCryptoKeyVersion = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.destroyCryptoKeyVersion(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.ICryptoKeyVersion|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.destroyCryptoKeyVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes destroyCryptoKeyVersion with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.DestroyCryptoKeyVersionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.destroyCryptoKeyVersion = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.destroyCryptoKeyVersion(request), expectedError);
            assert((client.innerApiCalls.destroyCryptoKeyVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes destroyCryptoKeyVersion with closed client', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.DestroyCryptoKeyVersionRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.destroyCryptoKeyVersion(request), expectedError);
        });
    });

    describe('restoreCryptoKeyVersion', () => {
        it('invokes restoreCryptoKeyVersion without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.RestoreCryptoKeyVersionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion());
            client.innerApiCalls.restoreCryptoKeyVersion = stubSimpleCall(expectedResponse);
            const [response] = await client.restoreCryptoKeyVersion(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.restoreCryptoKeyVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes restoreCryptoKeyVersion without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.RestoreCryptoKeyVersionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion());
            client.innerApiCalls.restoreCryptoKeyVersion = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.restoreCryptoKeyVersion(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.ICryptoKeyVersion|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.restoreCryptoKeyVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes restoreCryptoKeyVersion with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.RestoreCryptoKeyVersionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.restoreCryptoKeyVersion = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.restoreCryptoKeyVersion(request), expectedError);
            assert((client.innerApiCalls.restoreCryptoKeyVersion as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes restoreCryptoKeyVersion with closed client', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.RestoreCryptoKeyVersionRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.restoreCryptoKeyVersion(request), expectedError);
        });
    });

    describe('listKeyRings', () => {
        it('invokes listKeyRings without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListKeyRingsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
              generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
              generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
            ];
            client.innerApiCalls.listKeyRings = stubSimpleCall(expectedResponse);
            const [response] = await client.listKeyRings(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listKeyRings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listKeyRings without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListKeyRingsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
              generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
              generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
            ];
            client.innerApiCalls.listKeyRings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listKeyRings(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.IKeyRing[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listKeyRings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listKeyRings with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListKeyRingsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listKeyRings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listKeyRings(request), expectedError);
            assert((client.innerApiCalls.listKeyRings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listKeyRingsStream without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListKeyRingsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
              generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
              generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
            ];
            client.descriptors.page.listKeyRings.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listKeyRingsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.kms.v1.KeyRing[] = [];
                stream.on('data', (response: protos.google.cloud.kms.v1.KeyRing) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listKeyRings.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listKeyRings, request));
            assert.strictEqual(
                (client.descriptors.page.listKeyRings.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listKeyRingsStream with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListKeyRingsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listKeyRings.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listKeyRingsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.kms.v1.KeyRing[] = [];
                stream.on('data', (response: protos.google.cloud.kms.v1.KeyRing) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listKeyRings.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listKeyRings, request));
            assert.strictEqual(
                (client.descriptors.page.listKeyRings.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listKeyRings without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListKeyRingsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
              generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
              generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
            ];
            client.descriptors.page.listKeyRings.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.kms.v1.IKeyRing[] = [];
            const iterable = client.listKeyRingsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listKeyRings.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listKeyRings.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listKeyRings with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListKeyRingsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listKeyRings.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listKeyRingsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.kms.v1.IKeyRing[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listKeyRings.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listKeyRings.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listCryptoKeys', () => {
        it('invokes listCryptoKeys without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListCryptoKeysRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
            ];
            client.innerApiCalls.listCryptoKeys = stubSimpleCall(expectedResponse);
            const [response] = await client.listCryptoKeys(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listCryptoKeys as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listCryptoKeys without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListCryptoKeysRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
            ];
            client.innerApiCalls.listCryptoKeys = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listCryptoKeys(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.ICryptoKey[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listCryptoKeys as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listCryptoKeys with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListCryptoKeysRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listCryptoKeys = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listCryptoKeys(request), expectedError);
            assert((client.innerApiCalls.listCryptoKeys as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listCryptoKeysStream without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListCryptoKeysRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
            ];
            client.descriptors.page.listCryptoKeys.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listCryptoKeysStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.kms.v1.CryptoKey[] = [];
                stream.on('data', (response: protos.google.cloud.kms.v1.CryptoKey) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listCryptoKeys.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCryptoKeys, request));
            assert.strictEqual(
                (client.descriptors.page.listCryptoKeys.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listCryptoKeysStream with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListCryptoKeysRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listCryptoKeys.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listCryptoKeysStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.kms.v1.CryptoKey[] = [];
                stream.on('data', (response: protos.google.cloud.kms.v1.CryptoKey) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listCryptoKeys.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCryptoKeys, request));
            assert.strictEqual(
                (client.descriptors.page.listCryptoKeys.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listCryptoKeys without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListCryptoKeysRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
            ];
            client.descriptors.page.listCryptoKeys.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.kms.v1.ICryptoKey[] = [];
            const iterable = client.listCryptoKeysAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listCryptoKeys.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listCryptoKeys.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listCryptoKeys with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListCryptoKeysRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listCryptoKeys.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listCryptoKeysAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.kms.v1.ICryptoKey[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listCryptoKeys.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listCryptoKeys.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listCryptoKeyVersions', () => {
        it('invokes listCryptoKeyVersions without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListCryptoKeyVersionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion()),
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion()),
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion()),
            ];
            client.innerApiCalls.listCryptoKeyVersions = stubSimpleCall(expectedResponse);
            const [response] = await client.listCryptoKeyVersions(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listCryptoKeyVersions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listCryptoKeyVersions without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListCryptoKeyVersionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion()),
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion()),
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion()),
            ];
            client.innerApiCalls.listCryptoKeyVersions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listCryptoKeyVersions(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.ICryptoKeyVersion[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listCryptoKeyVersions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listCryptoKeyVersions with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListCryptoKeyVersionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listCryptoKeyVersions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listCryptoKeyVersions(request), expectedError);
            assert((client.innerApiCalls.listCryptoKeyVersions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listCryptoKeyVersionsStream without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListCryptoKeyVersionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion()),
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion()),
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion()),
            ];
            client.descriptors.page.listCryptoKeyVersions.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listCryptoKeyVersionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.kms.v1.CryptoKeyVersion[] = [];
                stream.on('data', (response: protos.google.cloud.kms.v1.CryptoKeyVersion) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listCryptoKeyVersions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCryptoKeyVersions, request));
            assert.strictEqual(
                (client.descriptors.page.listCryptoKeyVersions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listCryptoKeyVersionsStream with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListCryptoKeyVersionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listCryptoKeyVersions.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listCryptoKeyVersionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.kms.v1.CryptoKeyVersion[] = [];
                stream.on('data', (response: protos.google.cloud.kms.v1.CryptoKeyVersion) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listCryptoKeyVersions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCryptoKeyVersions, request));
            assert.strictEqual(
                (client.descriptors.page.listCryptoKeyVersions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listCryptoKeyVersions without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListCryptoKeyVersionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion()),
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion()),
              generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKeyVersion()),
            ];
            client.descriptors.page.listCryptoKeyVersions.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.kms.v1.ICryptoKeyVersion[] = [];
            const iterable = client.listCryptoKeyVersionsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listCryptoKeyVersions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listCryptoKeyVersions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listCryptoKeyVersions with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListCryptoKeyVersionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listCryptoKeyVersions.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listCryptoKeyVersionsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.kms.v1.ICryptoKeyVersion[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listCryptoKeyVersions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listCryptoKeyVersions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listImportJobs', () => {
        it('invokes listImportJobs without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListImportJobsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
              generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
              generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
            ];
            client.innerApiCalls.listImportJobs = stubSimpleCall(expectedResponse);
            const [response] = await client.listImportJobs(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listImportJobs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listImportJobs without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListImportJobsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
              generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
              generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
            ];
            client.innerApiCalls.listImportJobs = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listImportJobs(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.kms.v1.IImportJob[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listImportJobs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listImportJobs with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListImportJobsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listImportJobs = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listImportJobs(request), expectedError);
            assert((client.innerApiCalls.listImportJobs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listImportJobsStream without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListImportJobsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
              generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
              generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
            ];
            client.descriptors.page.listImportJobs.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listImportJobsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.kms.v1.ImportJob[] = [];
                stream.on('data', (response: protos.google.cloud.kms.v1.ImportJob) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listImportJobs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listImportJobs, request));
            assert.strictEqual(
                (client.descriptors.page.listImportJobs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listImportJobsStream with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListImportJobsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listImportJobs.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listImportJobsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.kms.v1.ImportJob[] = [];
                stream.on('data', (response: protos.google.cloud.kms.v1.ImportJob) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listImportJobs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listImportJobs, request));
            assert.strictEqual(
                (client.descriptors.page.listImportJobs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listImportJobs without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListImportJobsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
              generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
              generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
            ];
            client.descriptors.page.listImportJobs.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.kms.v1.IImportJob[] = [];
            const iterable = client.listImportJobsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listImportJobs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listImportJobs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listImportJobs with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.kms.v1.ListImportJobsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listImportJobs.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listImportJobsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.kms.v1.IImportJob[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listImportJobs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listImportJobs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });
    describe('getIamPolicy', () => {
        it('invokes getIamPolicy without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(
                new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
                new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.getIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getIamPolicy without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(
                new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
                new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.getIamPolicy = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getIamPolicy(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.Policy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0));
        });
        it('invokes getIamPolicy with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(
                new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIamPolicy(request, expectedOptions), expectedError);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('setIamPolicy', () => {
        it('invokes setIamPolicy without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(
                new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
                new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.setIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes setIamPolicy without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(
                new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
                new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.setIamPolicy = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setIamPolicy(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.Policy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0));
        });
        it('invokes setIamPolicy with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(
                new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setIamPolicy(request, expectedOptions), expectedError);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('testIamPermissions', () => {
        it('invokes testIamPermissions without error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(
                new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
                new IamProtos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
            const response = await client.testIamPermissions(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes testIamPermissions without error using callback', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(
                new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
                new IamProtos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.iamClient.testIamPermissions = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.testIamPermissions(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.TestIamPermissionsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0));
        });
        it('invokes testIamPermissions with error', async () => {
            const client = new keymanagementserviceModule.v1.KeyManagementServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(
                new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.testIamPermissions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.testIamPermissions(request, expectedOptions), expectedError);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
});
