
'use strict';

function main() {
  // [START logging_update_bucket_sample]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The full resource name of the bucket to update.
   *      "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *      "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *      "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *      "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
   *  Example:
   *  `"projects/my-project-id/locations/my-location/buckets/my-bucket-id"`. Also
   *  requires permission "resourcemanager.projects.updateLiens" to set the
   *  locked property
   */
  // const name = 'abc123'
  /**
   *  Required. The updated bucket.
   */
  // const bucket = ''
  /**
   *  Required. Field mask that specifies the fields in `bucket` that need an update. A
   *  bucket field will be overwritten if, and only if, it is in the update
   *  mask. `name` and output only fields cannot be updated.
   *  For a detailed `FieldMask` definition, see
   *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask
   *  Example: `updateMask=retention_days`.
   */
  // const updateMask = ''

  // Imports the Logging library
  const {ConfigServiceV2Client} = require('logging').v2;

  // Instantiates a client
  const loggingClient = new ConfigServiceV2Client();

  async function updateBucket() {
    // Construct request
    const request = {
      name,
      bucket,
      updateMask,
    };

    // Run request
    const response = await loggingClient.updateBucket(request);
    console.log(`Response: ${JSON.stringify(response)}`);
  }

  updateBucket();
  // [END logging_update_bucket_sample]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
