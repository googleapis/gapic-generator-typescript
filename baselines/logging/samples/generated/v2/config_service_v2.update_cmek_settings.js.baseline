


'use strict';

function main() {
  // [START logging_update_cmek_settings_sample]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The resource name for the CMEK settings to update.
   *      "projects/[PROJECT_ID]/cmekSettings"
   *      "organizations/[ORGANIZATION_ID]/cmekSettings"
   *      "billingAccounts/[BILLING_ACCOUNT_ID]/cmekSettings"
   *      "folders/[FOLDER_ID]/cmekSettings"
   *  Example: `"organizations/12345/cmekSettings"`.
   *  Note: CMEK for the Logs Router can currently only be configured for GCP
   *  organizations. Once configured, it applies to all projects and folders in
   *  the GCP organization.
   */
  // const name ='abc123'
  /**
   *  Required. The CMEK settings to update.
   *  See [Enabling CMEK for Logs
   *  Router](/logging/docs/routing/managed-encryption) for more information.
   */
  // const cmekSettings =''
  /**
   *  Optional. Field mask identifying which fields from `cmek_settings` should
   *  be updated. A field will be overwritten if and only if it is in the update
   *  mask. Output only fields cannot be updated.
   *  See [FieldMask][google.protobuf.FieldMask] for more information.
   *  Example: `"updateMask=kmsKeyName"`
   */
  // const [updateMask] =''

  // Imports the Logging library
  const {ConfigServiceV2Client} = require('');

  // Instantiates a client
  const loggingClient = new ConfigServiceV2Client();

  async function updateCmekSettings() {
    // Construct request
    const request = {
      name,
      cmekSettings,
    };

    // Run request
    const response = await loggingClient.updateCmekSettings(request);
    console.log(`Response: ${response}`);
  }

  updateCmekSettings();
  // [END logging_update_cmek_settings_sample]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
