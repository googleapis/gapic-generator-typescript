


'use strict';

function main() {
  // [START logging_list_log_entries_sample]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. Names of one or more parent resources from which to
   *  retrieve log entries:
   *      "projects/[PROJECT_ID]"
   *      "organizations/[ORGANIZATION_ID]"
   *      "billingAccounts/[BILLING_ACCOUNT_ID]"
   *      "folders/[FOLDER_ID]"
   *  Projects listed in the `project_ids` field are added to this list.
   */
  // const resourceNames ='abc123'
  /**
   *  Optional. A filter that chooses which log entries to return.  See [Advanced
   *  Logs Queries](/logging/docs/view/advanced-queries).  Only log entries that
   *  match the filter are returned.  An empty filter matches all log entries in
   *  the resources listed in `resource_names`. Referencing a parent resource
   *  that is not listed in `resource_names` will cause the filter to return no
   *  results.
   *  The maximum length of the filter is 20000 characters.
   */
  // const [filter] ='abc123'
  /**
   *  Optional. How the results should be sorted.  Presently, the only permitted
   *  values are `"timestamp asc"` (default) and `"timestamp desc"`. The first
   *  option returns entries in order of increasing values of
   *  `LogEntry.timestamp` (oldest first), and the second option returns entries
   *  in order of decreasing timestamps (newest first).  Entries with equal
   *  timestamps are returned in order of their `insert_id` values.
   */
  // const [orderBy] ='abc123'
  /**
   *  Optional. The maximum number of results to return from this request.
   *  Non-positive values are ignored.  The presence of `next_page_token` in the
   *  response indicates that more results might be available.
   */
  // const [pageSize] =1234
  /**
   *  Optional. If present, then retrieve the next batch of results from the
   *  preceding call to this method.  `page_token` must be the value of
   *  `next_page_token` from the previous response.  The values of other method
   *  parameters should be identical to those in the previous call.
   */
  // const [pageToken] ='abc123'

  // Imports the Logging library
  const {LoggingServiceV2Client} = require('logging');

  // Instantiates a client
  const loggingClient = new LoggingServiceV2Client();

  async function listLogEntries() {
    // Construct request
    const request = {
      resourceNames,
    };

    // Run request
    const iterable = await loggingClient.listLogEntriesAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  listLogEntries();
  // [END logging_list_log_entries_sample]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
