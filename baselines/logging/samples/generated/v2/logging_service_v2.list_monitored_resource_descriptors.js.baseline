


'use strict';

function main() {
  // [START logging_list_monitored_resource_descriptors_sample]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Optional. The maximum number of results to return from this request.
   *  Non-positive values are ignored.  The presence of `nextPageToken` in the
   *  response indicates that more results might be available.
   */
  // const [pageSize] =1234
  /**
   *  Optional. If present, then retrieve the next batch of results from the
   *  preceding call to this method.  `pageToken` must be the value of
   *  `nextPageToken` from the previous response.  The values of other method
   *  parameters should be identical to those in the previous call.
   */
  // const [pageToken] ='abc123'

  // Imports the Logging library
  const {LoggingServiceV2Client} = require('logging');

  // Instantiates a client
  const loggingClient = new LoggingServiceV2Client();

  async function listMonitoredResourceDescriptors() {
    // Construct request
    const request = {
    };

    // Run request
    const iterable = await loggingClient.listMonitoredResourceDescriptorsAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  listMonitoredResourceDescriptors();
  // [END logging_list_monitored_resource_descriptors_sample]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
