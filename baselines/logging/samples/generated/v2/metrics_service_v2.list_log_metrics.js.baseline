
'use strict';

function main() {
  // [START logging_list_log_metrics_sample]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The name of the project containing the metrics:
   *      "projects/[PROJECT_ID]"
   */
  // const parent = 'abc123'
  /**
   *  Optional. If present, then retrieve the next batch of results from the
   *  preceding call to this method. `pageToken` must be the value of
   *  `nextPageToken` from the previous response. The values of other method
   *  parameters should be identical to those in the previous call.
   */
  // const [pageToken] = 'abc123'
  /**
   *  Optional. The maximum number of results to return from this request.
   *  Non-positive values are ignored. The presence of `nextPageToken` in the
   *  response indicates that more results might be available.
   */
  // const [pageSize] = 1234

  // Imports the Logging library
  const {MetricsServiceV2Client} = require('logging').v2;

  // Instantiates a client
  const loggingClient = new MetricsServiceV2Client();

  async function listLogMetrics() {
    // Construct request
    const request = {
      parent,
    };

    // Run request
    const iterable = await loggingClient.listLogMetricsAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  listLogMetrics();
  // [END logging_list_log_metrics_sample]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
