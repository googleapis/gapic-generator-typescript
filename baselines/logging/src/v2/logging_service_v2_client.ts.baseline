// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {APICallback, Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, PaginationResponse} from 'google-gax';
import * as path from 'path';

import { Transform } from 'stream';
import * as protosTypes from '../../protos/protos';
import * as gapicConfig from './logging_service_v2_client_config.json';

const version = require('../../../package.json').version;

/**
 *  Service for ingesting and querying logs.
 * @class
 * @memberof v2
 */
export class LoggingServiceV2Client {
  private _descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}, batching: {}};
  private _innerApiCalls: {[name: string]: Function};
  private _pathTemplates: {[name: string]: gax.PathTemplate};
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  loggingServiceV2Stub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of LoggingServiceV2Client.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof LoggingServiceV2Client;
    const servicePath = opts && opts.servicePath ?
        opts.servicePath :
        ((opts && opts.apiEndpoint) ? opts.apiEndpoint :
                                      staticMembers.servicePath);
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = (typeof window !== 'undefined');
    if (isBrowser){
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    this._gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof LoggingServiceV2Client).scopes;
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback ?
        require("../../protos/protos.json") :
        nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this._pathTemplates = {
      billingAccountCmekSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'billingAccounts/{billing_account}/cmekSettings'
      ),
      billingAccountExclusionPathTemplate: new this._gaxModule.PathTemplate(
        'billingAccounts/{billing_account}/exclusions/{exclusion}'
      ),
      billingAccountLocationBucketPathTemplate: new this._gaxModule.PathTemplate(
        'billingAccounts/{billing_account}/locations/{location}/buckets/{bucket}'
      ),
      billingAccountLogPathTemplate: new this._gaxModule.PathTemplate(
        'billingAccounts/{billing_account}/logs/{log}'
      ),
      billingAccountSinkPathTemplate: new this._gaxModule.PathTemplate(
        'billingAccounts/{billing_account}/sinks/{sink}'
      ),
      folderCmekSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/cmekSettings'
      ),
      folderExclusionPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/exclusions/{exclusion}'
      ),
      folderLocationBucketPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/locations/{location}/buckets/{bucket}'
      ),
      folderLogPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/logs/{log}'
      ),
      folderSinkPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/sinks/{sink}'
      ),
      logMetricPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/metrics/{metric}'
      ),
      organizationCmekSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/cmekSettings'
      ),
      organizationExclusionPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/exclusions/{exclusion}'
      ),
      organizationLocationBucketPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/buckets/{bucket}'
      ),
      organizationLogPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/logs/{log}'
      ),
      organizationSinkPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/sinks/{sink}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectCmekSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/cmekSettings'
      ),
      projectExclusionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/exclusions/{exclusion}'
      ),
      projectLocationBucketPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/buckets/{bucket}'
      ),
      projectLogPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/logs/{log}'
      ),
      projectSinkPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/sinks/{sink}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this._descriptors.page = {
      listLogEntries:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'entries'),
      listMonitoredResourceDescriptors:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'resourceDescriptors'),
      listLogs:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'logNames')
    };

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const protoFilesRoot = opts.fallback?
      this._gaxModule.protobuf.Root.fromJSON(require("../../protos/protos.json")) :
      this._gaxModule.protobuf.loadSync(nodejsProtoPath);

    // Some methods on this API support automatically batching
    // requests; denote this.

    this._descriptors.batching = {
      WriteLogEntries: new this._gaxModule.BundleDescriptor(
        'entries',
        ['log_name','resource','labels'],null,
        gax.createByteLengthFunction(
          // tslint:disable-next-line no-any
          protoFilesRoot.lookupType('google.logging.v2.LogEntry') as any
        )
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.logging.v2.LoggingServiceV2', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.loggingServiceV2Stub) {
      return this.loggingServiceV2Stub;
    }

    // Put together the "service stub" for
    // google.logging.v2.LoggingServiceV2.
    this.loggingServiceV2Stub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.logging.v2.LoggingServiceV2') :
          // tslint:disable-next-line no-any
          (this._protos as any).google.logging.v2.LoggingServiceV2,
        this._opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const loggingServiceV2StubMethods =
        ['deleteLog', 'writeLogEntries', 'listLogEntries', 'listMonitoredResourceDescriptors', 'listLogs'];

    for (const methodName of loggingServiceV2StubMethods) {
      const innerCallPromise = this.loggingServiceV2Stub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          return stub[methodName].apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const apiCall = this._gaxModule.createApiCall(
        innerCallPromise,
        this._defaults[methodName],
        this._descriptors.page[methodName] ||
            this._descriptors.stream[methodName] ||
            this._descriptors.longrunning[methodName]
      );

      this._innerApiCalls[methodName] = (
        argument: {},
        callOptions?: CallOptions,
        callback?: APICallback
      ) => {
        return apiCall(argument, callOptions, callback);
      };
    }

    return this.loggingServiceV2Stub;
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'logging.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'logging.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-platform.read-only',
      'https://www.googleapis.com/auth/logging.admin',
      'https://www.googleapis.com/auth/logging.read',
      'https://www.googleapis.com/auth/logging.write'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  deleteLog(
      request: protosTypes.google.logging.v2.IDeleteLogRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.logging.v2.IDeleteLogRequest|undefined, {}|undefined
      ]>;
  deleteLog(
      request: protosTypes.google.logging.v2.IDeleteLogRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.google.logging.v2.IDeleteLogRequest|undefined,
          {}|undefined>): void;
/**
 * Deletes all the log entries in a log. The log reappears if it receives new
 * entries. Log entries written shortly before the delete operation might not
 * be deleted. Entries received after the delete operation with a timestamp
 * before the operation will be deleted.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.logName
 *   Required. The resource name of the log to delete:
 *
 *       "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *       "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *       "folders/[FOLDER_ID]/logs/[LOG_ID]"
 *
 *   `[LOG_ID]` must be URL-encoded. For example,
 *   `"projects/my-project-id/logs/syslog"`,
 *   `"organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity"`.
 *   For more information about log names, see
 *   {@link google.logging.v2.LogEntry|LogEntry}.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  deleteLog(
      request: protosTypes.google.logging.v2.IDeleteLogRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.google.logging.v2.IDeleteLogRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.google.logging.v2.IDeleteLogRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.logging.v2.IDeleteLogRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'log_name': request.logName || '',
    });
    this.initialize();
    return this._innerApiCalls.deleteLog(request, options, callback);
  }
  writeLogEntries(
      request: protosTypes.google.logging.v2.IWriteLogEntriesRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.logging.v2.IWriteLogEntriesResponse,
        protosTypes.google.logging.v2.IWriteLogEntriesRequest|undefined, {}|undefined
      ]>;
  writeLogEntries(
      request: protosTypes.google.logging.v2.IWriteLogEntriesRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.logging.v2.IWriteLogEntriesResponse,
          protosTypes.google.logging.v2.IWriteLogEntriesRequest|undefined,
          {}|undefined>): void;
/**
 * Writes log entries to Logging. This API method is the
 * only way to send log entries to Logging. This method
 * is used, directly or indirectly, by the Logging agent
 * (fluentd) and all logging libraries configured to use Logging.
 * A single request may contain log entries for a maximum of 1000
 * different resources (projects, organizations, billing accounts or
 * folders)
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} [request.logName]
 *   Optional. A default log resource name that is assigned to all log entries
 *   in `entries` that do not specify a value for `log_name`:
 *
 *       "projects/[PROJECT_ID]/logs/[LOG_ID]"
 *       "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
 *       "folders/[FOLDER_ID]/logs/[LOG_ID]"
 *
 *   `[LOG_ID]` must be URL-encoded. For example:
 *
 *       "projects/my-project-id/logs/syslog"
 *       "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity"
 *
 *   The permission `logging.logEntries.create` is needed on each project,
 *   organization, billing account, or folder that is receiving new log
 *   entries, whether the resource is specified in `logName` or in an
 *   individual log entry.
 * @param {google.api.MonitoredResource} [request.resource]
 *   Optional. A default monitored resource object that is assigned to all log
 *   entries in `entries` that do not specify a value for `resource`. Example:
 *
 *       { "type": "gce_instance",
 *         "labels": {
 *           "zone": "us-central1-a", "instance_id": "00000000000000000000" }}
 *
 *   See {@link google.logging.v2.LogEntry|LogEntry}.
 * @param {number[]} [request.labels]
 *   Optional. Default labels that are added to the `labels` field of all log
 *   entries in `entries`. If a log entry already has a label with the same key
 *   as a label in this parameter, then the log entry's label is not changed.
 *   See {@link google.logging.v2.LogEntry|LogEntry}.
 * @param {number[]} request.entries
 *   Required. The log entries to send to Logging. The order of log
 *   entries in this list does not matter. Values supplied in this method's
 *   `log_name`, `resource`, and `labels` fields are copied into those log
 *   entries in this list that do not include values for their corresponding
 *   fields. For more information, see the
 *   {@link google.logging.v2.LogEntry|LogEntry} type.
 *
 *   If the `timestamp` or `insert_id` fields are missing in log entries, then
 *   this method supplies the current time or a unique identifier, respectively.
 *   The supplied values are chosen so that, among the log entries that did not
 *   supply their own values, the entries earlier in the list will sort before
 *   the entries later in the list. See the `entries.list` method.
 *
 *   Log entries with timestamps that are more than the
 *   [logs retention period](/logging/quota-policy) in the past or more than
 *   24 hours in the future will not be available when calling `entries.list`.
 *   However, those log entries can still be
 *   [exported with LogSinks](/logging/docs/api/tasks/exporting-logs).
 *
 *   To improve throughput and to avoid exceeding the
 *   [quota limit](/logging/quota-policy) for calls to `entries.write`,
 *   you should try to include several log entries in this list,
 *   rather than calling this method for each individual log entry.
 * @param {boolean} [request.partialSuccess]
 *   Optional. Whether valid entries should be written even if some other
 *   entries fail due to INVALID_ARGUMENT or PERMISSION_DENIED errors. If any
 *   entry is not written, then the response status is the error associated
 *   with one of the failed entries and the response includes error details
 *   keyed by the entries' zero-based index in the `entries.write` method.
 * @param {boolean} [request.dryRun]
 *   Optional. If true, the request should expect normal response, but the
 *   entries won't be persisted nor exported. Useful for checking whether the
 *   logging API endpoints are working properly before sending valuable data.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [WriteLogEntriesResponse]{@link google.logging.v2.WriteLogEntriesResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  writeLogEntries(
      request: protosTypes.google.logging.v2.IWriteLogEntriesRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.logging.v2.IWriteLogEntriesResponse,
          protosTypes.google.logging.v2.IWriteLogEntriesRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.logging.v2.IWriteLogEntriesResponse,
          protosTypes.google.logging.v2.IWriteLogEntriesRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.logging.v2.IWriteLogEntriesResponse,
        protosTypes.google.logging.v2.IWriteLogEntriesRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    this.initialize();
    return this._innerApiCalls.writeLogEntries(request, options, callback);
  }

  listLogEntries(
      request: protosTypes.google.logging.v2.IListLogEntriesRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.logging.v2.ILogEntry[],
        protosTypes.google.logging.v2.IListLogEntriesRequest|null,
        protosTypes.google.logging.v2.IListLogEntriesResponse
      ]>;
  listLogEntries(
      request: protosTypes.google.logging.v2.IListLogEntriesRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.logging.v2.ILogEntry[],
          protosTypes.google.logging.v2.IListLogEntriesRequest|null,
          protosTypes.google.logging.v2.IListLogEntriesResponse>): void;
/**
 * Lists log entries.  Use this method to retrieve log entries that originated
 * from a project/folder/organization/billing account.  For ways to export log
 * entries, see [Exporting Logs](/logging/docs/export).
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string[]} request.resourceNames
 *   Required. Names of one or more parent resources from which to
 *   retrieve log entries:
 *
 *       "projects/[PROJECT_ID]"
 *       "organizations/[ORGANIZATION_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]"
 *       "folders/[FOLDER_ID]"
 *
 *
 *   Projects listed in the `project_ids` field are added to this list.
 * @param {string} [request.filter]
 *   Optional. A filter that chooses which log entries to return.  See [Advanced
 *   Logs Queries](/logging/docs/view/advanced-queries).  Only log entries that
 *   match the filter are returned.  An empty filter matches all log entries in
 *   the resources listed in `resource_names`. Referencing a parent resource
 *   that is not listed in `resource_names` will cause the filter to return no
 *   results.
 *   The maximum length of the filter is 20000 characters.
 * @param {string} [request.orderBy]
 *   Optional. How the results should be sorted.  Presently, the only permitted
 *   values are `"timestamp asc"` (default) and `"timestamp desc"`. The first
 *   option returns entries in order of increasing values of
 *   `LogEntry.timestamp` (oldest first), and the second option returns entries
 *   in order of decreasing timestamps (newest first).  Entries with equal
 *   timestamps are returned in order of their `insert_id` values.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *   Non-positive values are ignored.  The presence of `next_page_token` in the
 *   response indicates that more results might be available.
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method.  `page_token` must be the value of
 *   `next_page_token` from the previous response.  The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [LogEntry]{@link google.logging.v2.LogEntry}.
 *   The client library support auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [LogEntry]{@link google.logging.v2.LogEntry} that corresponds to
 *   the one page received from the API server.
 *   If the second element is not null it contains the request object of type [ListLogEntriesRequest]{@link google.logging.v2.ListLogEntriesRequest}
 *   that can be used to obtain the next page of the results.
 *   If it is null, the next page does not exist.
 *   The third element contains the raw response received from the API server. Its type is
 *   [ListLogEntriesResponse]{@link google.logging.v2.ListLogEntriesResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  listLogEntries(
      request: protosTypes.google.logging.v2.IListLogEntriesRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.logging.v2.ILogEntry[],
          protosTypes.google.logging.v2.IListLogEntriesRequest|null,
          protosTypes.google.logging.v2.IListLogEntriesResponse>,
      callback?: Callback<
          protosTypes.google.logging.v2.ILogEntry[],
          protosTypes.google.logging.v2.IListLogEntriesRequest|null,
          protosTypes.google.logging.v2.IListLogEntriesResponse>):
      Promise<[
        protosTypes.google.logging.v2.ILogEntry[],
        protosTypes.google.logging.v2.IListLogEntriesRequest|null,
        protosTypes.google.logging.v2.IListLogEntriesResponse
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    this.initialize();
    return this._innerApiCalls.listLogEntries(request, options, callback);
  }

/**
 * Equivalent to {@link listLogEntries}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link listLogEntries} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string[]} request.resourceNames
 *   Required. Names of one or more parent resources from which to
 *   retrieve log entries:
 *
 *       "projects/[PROJECT_ID]"
 *       "organizations/[ORGANIZATION_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]"
 *       "folders/[FOLDER_ID]"
 *
 *
 *   Projects listed in the `project_ids` field are added to this list.
 * @param {string} [request.filter]
 *   Optional. A filter that chooses which log entries to return.  See [Advanced
 *   Logs Queries](/logging/docs/view/advanced-queries).  Only log entries that
 *   match the filter are returned.  An empty filter matches all log entries in
 *   the resources listed in `resource_names`. Referencing a parent resource
 *   that is not listed in `resource_names` will cause the filter to return no
 *   results.
 *   The maximum length of the filter is 20000 characters.
 * @param {string} [request.orderBy]
 *   Optional. How the results should be sorted.  Presently, the only permitted
 *   values are `"timestamp asc"` (default) and `"timestamp desc"`. The first
 *   option returns entries in order of increasing values of
 *   `LogEntry.timestamp` (oldest first), and the second option returns entries
 *   in order of decreasing timestamps (newest first).  Entries with equal
 *   timestamps are returned in order of their `insert_id` values.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *   Non-positive values are ignored.  The presence of `next_page_token` in the
 *   response indicates that more results might be available.
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method.  `page_token` must be the value of
 *   `next_page_token` from the previous response.  The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [LogEntry]{@link google.logging.v2.LogEntry} on 'data' event.
 */
  listLogEntriesStream(
      request?: protosTypes.google.logging.v2.IListLogEntriesRequest,
      options?: gax.CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this._descriptors.page.listLogEntries.createStream(
      this._innerApiCalls.listLogEntries as gax.GaxCall,
      request,
      callSettings
    );
  }
  listMonitoredResourceDescriptors(
      request: protosTypes.google.logging.v2.IListMonitoredResourceDescriptorsRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.api.IMonitoredResourceDescriptor[],
        protosTypes.google.logging.v2.IListMonitoredResourceDescriptorsRequest|null,
        protosTypes.google.logging.v2.IListMonitoredResourceDescriptorsResponse
      ]>;
  listMonitoredResourceDescriptors(
      request: protosTypes.google.logging.v2.IListMonitoredResourceDescriptorsRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.api.IMonitoredResourceDescriptor[],
          protosTypes.google.logging.v2.IListMonitoredResourceDescriptorsRequest|null,
          protosTypes.google.logging.v2.IListMonitoredResourceDescriptorsResponse>): void;
/**
 * Lists the descriptors for monitored resource types used by Logging.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *   Non-positive values are ignored.  The presence of `nextPageToken` in the
 *   response indicates that more results might be available.
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method.  `pageToken` must be the value of
 *   `nextPageToken` from the previous response.  The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [MonitoredResourceDescriptor]{@link google.api.MonitoredResourceDescriptor}.
 *   The client library support auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [MonitoredResourceDescriptor]{@link google.api.MonitoredResourceDescriptor} that corresponds to
 *   the one page received from the API server.
 *   If the second element is not null it contains the request object of type [ListMonitoredResourceDescriptorsRequest]{@link google.logging.v2.ListMonitoredResourceDescriptorsRequest}
 *   that can be used to obtain the next page of the results.
 *   If it is null, the next page does not exist.
 *   The third element contains the raw response received from the API server. Its type is
 *   [ListMonitoredResourceDescriptorsResponse]{@link google.logging.v2.ListMonitoredResourceDescriptorsResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  listMonitoredResourceDescriptors(
      request: protosTypes.google.logging.v2.IListMonitoredResourceDescriptorsRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.api.IMonitoredResourceDescriptor[],
          protosTypes.google.logging.v2.IListMonitoredResourceDescriptorsRequest|null,
          protosTypes.google.logging.v2.IListMonitoredResourceDescriptorsResponse>,
      callback?: Callback<
          protosTypes.google.api.IMonitoredResourceDescriptor[],
          protosTypes.google.logging.v2.IListMonitoredResourceDescriptorsRequest|null,
          protosTypes.google.logging.v2.IListMonitoredResourceDescriptorsResponse>):
      Promise<[
        protosTypes.google.api.IMonitoredResourceDescriptor[],
        protosTypes.google.logging.v2.IListMonitoredResourceDescriptorsRequest|null,
        protosTypes.google.logging.v2.IListMonitoredResourceDescriptorsResponse
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    this.initialize();
    return this._innerApiCalls.listMonitoredResourceDescriptors(request, options, callback);
  }

/**
 * Equivalent to {@link listMonitoredResourceDescriptors}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link listMonitoredResourceDescriptors} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *   Non-positive values are ignored.  The presence of `nextPageToken` in the
 *   response indicates that more results might be available.
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method.  `pageToken` must be the value of
 *   `nextPageToken` from the previous response.  The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [MonitoredResourceDescriptor]{@link google.api.MonitoredResourceDescriptor} on 'data' event.
 */
  listMonitoredResourceDescriptorsStream(
      request?: protosTypes.google.logging.v2.IListMonitoredResourceDescriptorsRequest,
      options?: gax.CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this._descriptors.page.listMonitoredResourceDescriptors.createStream(
      this._innerApiCalls.listMonitoredResourceDescriptors as gax.GaxCall,
      request,
      callSettings
    );
  }
  listLogs(
      request: protosTypes.google.logging.v2.IListLogsRequest,
      options?: gax.CallOptions):
      Promise<[
        string[],
        protosTypes.google.logging.v2.IListLogsRequest|null,
        protosTypes.google.logging.v2.IListLogsResponse
      ]>;
  listLogs(
      request: protosTypes.google.logging.v2.IListLogsRequest,
      options: gax.CallOptions,
      callback: Callback<
          string[],
          protosTypes.google.logging.v2.IListLogsRequest|null,
          protosTypes.google.logging.v2.IListLogsResponse>): void;
/**
 * Lists the logs in projects, organizations, folders, or billing accounts.
 * Only logs that have entries are listed.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name that owns the logs:
 *
 *       "projects/[PROJECT_ID]"
 *       "organizations/[ORGANIZATION_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]"
 *       "folders/[FOLDER_ID]"
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *   Non-positive values are ignored.  The presence of `nextPageToken` in the
 *   response indicates that more results might be available.
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method.  `pageToken` must be the value of
 *   `nextPageToken` from the previous response.  The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of string.
 *   The client library support auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of string that corresponds to
 *   the one page received from the API server.
 *   If the second element is not null it contains the request object of type [ListLogsRequest]{@link google.logging.v2.ListLogsRequest}
 *   that can be used to obtain the next page of the results.
 *   If it is null, the next page does not exist.
 *   The third element contains the raw response received from the API server. Its type is
 *   [ListLogsResponse]{@link google.logging.v2.ListLogsResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  listLogs(
      request: protosTypes.google.logging.v2.IListLogsRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          string[],
          protosTypes.google.logging.v2.IListLogsRequest|null,
          protosTypes.google.logging.v2.IListLogsResponse>,
      callback?: Callback<
          string[],
          protosTypes.google.logging.v2.IListLogsRequest|null,
          protosTypes.google.logging.v2.IListLogsResponse>):
      Promise<[
        string[],
        protosTypes.google.logging.v2.IListLogsRequest|null,
        protosTypes.google.logging.v2.IListLogsResponse
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.listLogs(request, options, callback);
  }

/**
 * Equivalent to {@link listLogs}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link listLogs} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name that owns the logs:
 *
 *       "projects/[PROJECT_ID]"
 *       "organizations/[ORGANIZATION_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]"
 *       "folders/[FOLDER_ID]"
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *   Non-positive values are ignored.  The presence of `nextPageToken` in the
 *   response indicates that more results might be available.
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method.  `pageToken` must be the value of
 *   `nextPageToken` from the previous response.  The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing string on 'data' event.
 */
  listLogsStream(
      request?: protosTypes.google.logging.v2.IListLogsRequest,
      options?: gax.CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this._descriptors.page.listLogs.createStream(
      this._innerApiCalls.listLogs as gax.GaxCall,
      request,
      callSettings
    );
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified billingAccountCmekSettings resource name string.
   *
   * @param {string} billing_account
   * @returns {string} Resource name string.
   */
  billingAccountCmekSettingsPath(billingAccount:string) {
    return this._pathTemplates.billingAccountCmekSettingsPathTemplate.render({
      billing_account: billingAccount,
    });
  }

  /**
   * Parse the billing_account from BillingAccountCmekSettings resource.
   *
   * @param {string} billingAccountCmekSettingsName
   *   A fully-qualified path representing billing_account_cmekSettings resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountCmekSettingsName(billingAccountCmekSettingsName: string) {
    return this._pathTemplates.billingAccountCmekSettingsPathTemplate.match(billingAccountCmekSettingsName).billing_account;
  }

  /**
   * Return a fully-qualified billingAccountExclusion resource name string.
   *
   * @param {string} billing_account
   * @param {string} exclusion
   * @returns {string} Resource name string.
   */
  billingAccountExclusionPath(billingAccount:string,exclusion:string) {
    return this._pathTemplates.billingAccountExclusionPathTemplate.render({
      billing_account: billingAccount,
      exclusion: exclusion,
    });
  }

  /**
   * Parse the billing_account from BillingAccountExclusion resource.
   *
   * @param {string} billingAccountExclusionName
   *   A fully-qualified path representing billing_account_exclusion resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountExclusionName(billingAccountExclusionName: string) {
    return this._pathTemplates.billingAccountExclusionPathTemplate.match(billingAccountExclusionName).billing_account;
  }

  /**
   * Parse the exclusion from BillingAccountExclusion resource.
   *
   * @param {string} billingAccountExclusionName
   *   A fully-qualified path representing billing_account_exclusion resource.
   * @returns {string} A string representing the exclusion.
   */
  matchExclusionFromBillingAccountExclusionName(billingAccountExclusionName: string) {
    return this._pathTemplates.billingAccountExclusionPathTemplate.match(billingAccountExclusionName).exclusion;
  }

  /**
   * Return a fully-qualified billingAccountLocationBucket resource name string.
   *
   * @param {string} billing_account
   * @param {string} location
   * @param {string} bucket
   * @returns {string} Resource name string.
   */
  billingAccountLocationBucketPath(billingAccount:string,location:string,bucket:string) {
    return this._pathTemplates.billingAccountLocationBucketPathTemplate.render({
      billing_account: billingAccount,
      location: location,
      bucket: bucket,
    });
  }

  /**
   * Parse the billing_account from BillingAccountLocationBucket resource.
   *
   * @param {string} billingAccountLocationBucketName
   *   A fully-qualified path representing billing_account_location_bucket resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountLocationBucketName(billingAccountLocationBucketName: string) {
    return this._pathTemplates.billingAccountLocationBucketPathTemplate.match(billingAccountLocationBucketName).billing_account;
  }

  /**
   * Parse the location from BillingAccountLocationBucket resource.
   *
   * @param {string} billingAccountLocationBucketName
   *   A fully-qualified path representing billing_account_location_bucket resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBillingAccountLocationBucketName(billingAccountLocationBucketName: string) {
    return this._pathTemplates.billingAccountLocationBucketPathTemplate.match(billingAccountLocationBucketName).location;
  }

  /**
   * Parse the bucket from BillingAccountLocationBucket resource.
   *
   * @param {string} billingAccountLocationBucketName
   *   A fully-qualified path representing billing_account_location_bucket resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromBillingAccountLocationBucketName(billingAccountLocationBucketName: string) {
    return this._pathTemplates.billingAccountLocationBucketPathTemplate.match(billingAccountLocationBucketName).bucket;
  }

  /**
   * Return a fully-qualified billingAccountLog resource name string.
   *
   * @param {string} billing_account
   * @param {string} log
   * @returns {string} Resource name string.
   */
  billingAccountLogPath(billingAccount:string,log:string) {
    return this._pathTemplates.billingAccountLogPathTemplate.render({
      billing_account: billingAccount,
      log: log,
    });
  }

  /**
   * Parse the billing_account from BillingAccountLog resource.
   *
   * @param {string} billingAccountLogName
   *   A fully-qualified path representing billing_account_log resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountLogName(billingAccountLogName: string) {
    return this._pathTemplates.billingAccountLogPathTemplate.match(billingAccountLogName).billing_account;
  }

  /**
   * Parse the log from BillingAccountLog resource.
   *
   * @param {string} billingAccountLogName
   *   A fully-qualified path representing billing_account_log resource.
   * @returns {string} A string representing the log.
   */
  matchLogFromBillingAccountLogName(billingAccountLogName: string) {
    return this._pathTemplates.billingAccountLogPathTemplate.match(billingAccountLogName).log;
  }

  /**
   * Return a fully-qualified billingAccountSink resource name string.
   *
   * @param {string} billing_account
   * @param {string} sink
   * @returns {string} Resource name string.
   */
  billingAccountSinkPath(billingAccount:string,sink:string) {
    return this._pathTemplates.billingAccountSinkPathTemplate.render({
      billing_account: billingAccount,
      sink: sink,
    });
  }

  /**
   * Parse the billing_account from BillingAccountSink resource.
   *
   * @param {string} billingAccountSinkName
   *   A fully-qualified path representing billing_account_sink resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountSinkName(billingAccountSinkName: string) {
    return this._pathTemplates.billingAccountSinkPathTemplate.match(billingAccountSinkName).billing_account;
  }

  /**
   * Parse the sink from BillingAccountSink resource.
   *
   * @param {string} billingAccountSinkName
   *   A fully-qualified path representing billing_account_sink resource.
   * @returns {string} A string representing the sink.
   */
  matchSinkFromBillingAccountSinkName(billingAccountSinkName: string) {
    return this._pathTemplates.billingAccountSinkPathTemplate.match(billingAccountSinkName).sink;
  }

  /**
   * Return a fully-qualified folderCmekSettings resource name string.
   *
   * @param {string} folder
   * @returns {string} Resource name string.
   */
  folderCmekSettingsPath(folder:string) {
    return this._pathTemplates.folderCmekSettingsPathTemplate.render({
      folder: folder,
    });
  }

  /**
   * Parse the folder from FolderCmekSettings resource.
   *
   * @param {string} folderCmekSettingsName
   *   A fully-qualified path representing folder_cmekSettings resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderCmekSettingsName(folderCmekSettingsName: string) {
    return this._pathTemplates.folderCmekSettingsPathTemplate.match(folderCmekSettingsName).folder;
  }

  /**
   * Return a fully-qualified folderExclusion resource name string.
   *
   * @param {string} folder
   * @param {string} exclusion
   * @returns {string} Resource name string.
   */
  folderExclusionPath(folder:string,exclusion:string) {
    return this._pathTemplates.folderExclusionPathTemplate.render({
      folder: folder,
      exclusion: exclusion,
    });
  }

  /**
   * Parse the folder from FolderExclusion resource.
   *
   * @param {string} folderExclusionName
   *   A fully-qualified path representing folder_exclusion resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderExclusionName(folderExclusionName: string) {
    return this._pathTemplates.folderExclusionPathTemplate.match(folderExclusionName).folder;
  }

  /**
   * Parse the exclusion from FolderExclusion resource.
   *
   * @param {string} folderExclusionName
   *   A fully-qualified path representing folder_exclusion resource.
   * @returns {string} A string representing the exclusion.
   */
  matchExclusionFromFolderExclusionName(folderExclusionName: string) {
    return this._pathTemplates.folderExclusionPathTemplate.match(folderExclusionName).exclusion;
  }

  /**
   * Return a fully-qualified folderLocationBucket resource name string.
   *
   * @param {string} folder
   * @param {string} location
   * @param {string} bucket
   * @returns {string} Resource name string.
   */
  folderLocationBucketPath(folder:string,location:string,bucket:string) {
    return this._pathTemplates.folderLocationBucketPathTemplate.render({
      folder: folder,
      location: location,
      bucket: bucket,
    });
  }

  /**
   * Parse the folder from FolderLocationBucket resource.
   *
   * @param {string} folderLocationBucketName
   *   A fully-qualified path representing folder_location_bucket resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLocationBucketName(folderLocationBucketName: string) {
    return this._pathTemplates.folderLocationBucketPathTemplate.match(folderLocationBucketName).folder;
  }

  /**
   * Parse the location from FolderLocationBucket resource.
   *
   * @param {string} folderLocationBucketName
   *   A fully-qualified path representing folder_location_bucket resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderLocationBucketName(folderLocationBucketName: string) {
    return this._pathTemplates.folderLocationBucketPathTemplate.match(folderLocationBucketName).location;
  }

  /**
   * Parse the bucket from FolderLocationBucket resource.
   *
   * @param {string} folderLocationBucketName
   *   A fully-qualified path representing folder_location_bucket resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromFolderLocationBucketName(folderLocationBucketName: string) {
    return this._pathTemplates.folderLocationBucketPathTemplate.match(folderLocationBucketName).bucket;
  }

  /**
   * Return a fully-qualified folderLog resource name string.
   *
   * @param {string} folder
   * @param {string} log
   * @returns {string} Resource name string.
   */
  folderLogPath(folder:string,log:string) {
    return this._pathTemplates.folderLogPathTemplate.render({
      folder: folder,
      log: log,
    });
  }

  /**
   * Parse the folder from FolderLog resource.
   *
   * @param {string} folderLogName
   *   A fully-qualified path representing folder_log resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLogName(folderLogName: string) {
    return this._pathTemplates.folderLogPathTemplate.match(folderLogName).folder;
  }

  /**
   * Parse the log from FolderLog resource.
   *
   * @param {string} folderLogName
   *   A fully-qualified path representing folder_log resource.
   * @returns {string} A string representing the log.
   */
  matchLogFromFolderLogName(folderLogName: string) {
    return this._pathTemplates.folderLogPathTemplate.match(folderLogName).log;
  }

  /**
   * Return a fully-qualified folderSink resource name string.
   *
   * @param {string} folder
   * @param {string} sink
   * @returns {string} Resource name string.
   */
  folderSinkPath(folder:string,sink:string) {
    return this._pathTemplates.folderSinkPathTemplate.render({
      folder: folder,
      sink: sink,
    });
  }

  /**
   * Parse the folder from FolderSink resource.
   *
   * @param {string} folderSinkName
   *   A fully-qualified path representing folder_sink resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderSinkName(folderSinkName: string) {
    return this._pathTemplates.folderSinkPathTemplate.match(folderSinkName).folder;
  }

  /**
   * Parse the sink from FolderSink resource.
   *
   * @param {string} folderSinkName
   *   A fully-qualified path representing folder_sink resource.
   * @returns {string} A string representing the sink.
   */
  matchSinkFromFolderSinkName(folderSinkName: string) {
    return this._pathTemplates.folderSinkPathTemplate.match(folderSinkName).sink;
  }

  /**
   * Return a fully-qualified logMetric resource name string.
   *
   * @param {string} project
   * @param {string} metric
   * @returns {string} Resource name string.
   */
  logMetricPath(project:string,metric:string) {
    return this._pathTemplates.logMetricPathTemplate.render({
      project: project,
      metric: metric,
    });
  }

  /**
   * Parse the project from LogMetric resource.
   *
   * @param {string} logMetricName
   *   A fully-qualified path representing LogMetric resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLogMetricName(logMetricName: string) {
    return this._pathTemplates.logMetricPathTemplate.match(logMetricName).project;
  }

  /**
   * Parse the metric from LogMetric resource.
   *
   * @param {string} logMetricName
   *   A fully-qualified path representing LogMetric resource.
   * @returns {string} A string representing the metric.
   */
  matchMetricFromLogMetricName(logMetricName: string) {
    return this._pathTemplates.logMetricPathTemplate.match(logMetricName).metric;
  }

  /**
   * Return a fully-qualified organizationCmekSettings resource name string.
   *
   * @param {string} organization
   * @returns {string} Resource name string.
   */
  organizationCmekSettingsPath(organization:string) {
    return this._pathTemplates.organizationCmekSettingsPathTemplate.render({
      organization: organization,
    });
  }

  /**
   * Parse the organization from OrganizationCmekSettings resource.
   *
   * @param {string} organizationCmekSettingsName
   *   A fully-qualified path representing organization_cmekSettings resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationCmekSettingsName(organizationCmekSettingsName: string) {
    return this._pathTemplates.organizationCmekSettingsPathTemplate.match(organizationCmekSettingsName).organization;
  }

  /**
   * Return a fully-qualified organizationExclusion resource name string.
   *
   * @param {string} organization
   * @param {string} exclusion
   * @returns {string} Resource name string.
   */
  organizationExclusionPath(organization:string,exclusion:string) {
    return this._pathTemplates.organizationExclusionPathTemplate.render({
      organization: organization,
      exclusion: exclusion,
    });
  }

  /**
   * Parse the organization from OrganizationExclusion resource.
   *
   * @param {string} organizationExclusionName
   *   A fully-qualified path representing organization_exclusion resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationExclusionName(organizationExclusionName: string) {
    return this._pathTemplates.organizationExclusionPathTemplate.match(organizationExclusionName).organization;
  }

  /**
   * Parse the exclusion from OrganizationExclusion resource.
   *
   * @param {string} organizationExclusionName
   *   A fully-qualified path representing organization_exclusion resource.
   * @returns {string} A string representing the exclusion.
   */
  matchExclusionFromOrganizationExclusionName(organizationExclusionName: string) {
    return this._pathTemplates.organizationExclusionPathTemplate.match(organizationExclusionName).exclusion;
  }

  /**
   * Return a fully-qualified organizationLocationBucket resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} bucket
   * @returns {string} Resource name string.
   */
  organizationLocationBucketPath(organization:string,location:string,bucket:string) {
    return this._pathTemplates.organizationLocationBucketPathTemplate.render({
      organization: organization,
      location: location,
      bucket: bucket,
    });
  }

  /**
   * Parse the organization from OrganizationLocationBucket resource.
   *
   * @param {string} organizationLocationBucketName
   *   A fully-qualified path representing organization_location_bucket resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationBucketName(organizationLocationBucketName: string) {
    return this._pathTemplates.organizationLocationBucketPathTemplate.match(organizationLocationBucketName).organization;
  }

  /**
   * Parse the location from OrganizationLocationBucket resource.
   *
   * @param {string} organizationLocationBucketName
   *   A fully-qualified path representing organization_location_bucket resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationBucketName(organizationLocationBucketName: string) {
    return this._pathTemplates.organizationLocationBucketPathTemplate.match(organizationLocationBucketName).location;
  }

  /**
   * Parse the bucket from OrganizationLocationBucket resource.
   *
   * @param {string} organizationLocationBucketName
   *   A fully-qualified path representing organization_location_bucket resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromOrganizationLocationBucketName(organizationLocationBucketName: string) {
    return this._pathTemplates.organizationLocationBucketPathTemplate.match(organizationLocationBucketName).bucket;
  }

  /**
   * Return a fully-qualified organizationLog resource name string.
   *
   * @param {string} organization
   * @param {string} log
   * @returns {string} Resource name string.
   */
  organizationLogPath(organization:string,log:string) {
    return this._pathTemplates.organizationLogPathTemplate.render({
      organization: organization,
      log: log,
    });
  }

  /**
   * Parse the organization from OrganizationLog resource.
   *
   * @param {string} organizationLogName
   *   A fully-qualified path representing organization_log resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLogName(organizationLogName: string) {
    return this._pathTemplates.organizationLogPathTemplate.match(organizationLogName).organization;
  }

  /**
   * Parse the log from OrganizationLog resource.
   *
   * @param {string} organizationLogName
   *   A fully-qualified path representing organization_log resource.
   * @returns {string} A string representing the log.
   */
  matchLogFromOrganizationLogName(organizationLogName: string) {
    return this._pathTemplates.organizationLogPathTemplate.match(organizationLogName).log;
  }

  /**
   * Return a fully-qualified organizationSink resource name string.
   *
   * @param {string} organization
   * @param {string} sink
   * @returns {string} Resource name string.
   */
  organizationSinkPath(organization:string,sink:string) {
    return this._pathTemplates.organizationSinkPathTemplate.render({
      organization: organization,
      sink: sink,
    });
  }

  /**
   * Parse the organization from OrganizationSink resource.
   *
   * @param {string} organizationSinkName
   *   A fully-qualified path representing organization_sink resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationSinkName(organizationSinkName: string) {
    return this._pathTemplates.organizationSinkPathTemplate.match(organizationSinkName).organization;
  }

  /**
   * Parse the sink from OrganizationSink resource.
   *
   * @param {string} organizationSinkName
   *   A fully-qualified path representing organization_sink resource.
   * @returns {string} A string representing the sink.
   */
  matchSinkFromOrganizationSinkName(organizationSinkName: string) {
    return this._pathTemplates.organizationSinkPathTemplate.match(organizationSinkName).sink;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this._pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this._pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectCmekSettings resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectCmekSettingsPath(project:string) {
    return this._pathTemplates.projectCmekSettingsPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from ProjectCmekSettings resource.
   *
   * @param {string} projectCmekSettingsName
   *   A fully-qualified path representing project_cmekSettings resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectCmekSettingsName(projectCmekSettingsName: string) {
    return this._pathTemplates.projectCmekSettingsPathTemplate.match(projectCmekSettingsName).project;
  }

  /**
   * Return a fully-qualified projectExclusion resource name string.
   *
   * @param {string} project
   * @param {string} exclusion
   * @returns {string} Resource name string.
   */
  projectExclusionPath(project:string,exclusion:string) {
    return this._pathTemplates.projectExclusionPathTemplate.render({
      project: project,
      exclusion: exclusion,
    });
  }

  /**
   * Parse the project from ProjectExclusion resource.
   *
   * @param {string} projectExclusionName
   *   A fully-qualified path representing project_exclusion resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectExclusionName(projectExclusionName: string) {
    return this._pathTemplates.projectExclusionPathTemplate.match(projectExclusionName).project;
  }

  /**
   * Parse the exclusion from ProjectExclusion resource.
   *
   * @param {string} projectExclusionName
   *   A fully-qualified path representing project_exclusion resource.
   * @returns {string} A string representing the exclusion.
   */
  matchExclusionFromProjectExclusionName(projectExclusionName: string) {
    return this._pathTemplates.projectExclusionPathTemplate.match(projectExclusionName).exclusion;
  }

  /**
   * Return a fully-qualified projectLocationBucket resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} bucket
   * @returns {string} Resource name string.
   */
  projectLocationBucketPath(project:string,location:string,bucket:string) {
    return this._pathTemplates.projectLocationBucketPathTemplate.render({
      project: project,
      location: location,
      bucket: bucket,
    });
  }

  /**
   * Parse the project from ProjectLocationBucket resource.
   *
   * @param {string} projectLocationBucketName
   *   A fully-qualified path representing project_location_bucket resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationBucketName(projectLocationBucketName: string) {
    return this._pathTemplates.projectLocationBucketPathTemplate.match(projectLocationBucketName).project;
  }

  /**
   * Parse the location from ProjectLocationBucket resource.
   *
   * @param {string} projectLocationBucketName
   *   A fully-qualified path representing project_location_bucket resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationBucketName(projectLocationBucketName: string) {
    return this._pathTemplates.projectLocationBucketPathTemplate.match(projectLocationBucketName).location;
  }

  /**
   * Parse the bucket from ProjectLocationBucket resource.
   *
   * @param {string} projectLocationBucketName
   *   A fully-qualified path representing project_location_bucket resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromProjectLocationBucketName(projectLocationBucketName: string) {
    return this._pathTemplates.projectLocationBucketPathTemplate.match(projectLocationBucketName).bucket;
  }

  /**
   * Return a fully-qualified projectLog resource name string.
   *
   * @param {string} project
   * @param {string} log
   * @returns {string} Resource name string.
   */
  projectLogPath(project:string,log:string) {
    return this._pathTemplates.projectLogPathTemplate.render({
      project: project,
      log: log,
    });
  }

  /**
   * Parse the project from ProjectLog resource.
   *
   * @param {string} projectLogName
   *   A fully-qualified path representing project_log resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLogName(projectLogName: string) {
    return this._pathTemplates.projectLogPathTemplate.match(projectLogName).project;
  }

  /**
   * Parse the log from ProjectLog resource.
   *
   * @param {string} projectLogName
   *   A fully-qualified path representing project_log resource.
   * @returns {string} A string representing the log.
   */
  matchLogFromProjectLogName(projectLogName: string) {
    return this._pathTemplates.projectLogPathTemplate.match(projectLogName).log;
  }

  /**
   * Return a fully-qualified projectSink resource name string.
   *
   * @param {string} project
   * @param {string} sink
   * @returns {string} Resource name string.
   */
  projectSinkPath(project:string,sink:string) {
    return this._pathTemplates.projectSinkPathTemplate.render({
      project: project,
      sink: sink,
    });
  }

  /**
   * Parse the project from ProjectSink resource.
   *
   * @param {string} projectSinkName
   *   A fully-qualified path representing project_sink resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectSinkName(projectSinkName: string) {
    return this._pathTemplates.projectSinkPathTemplate.match(projectSinkName).project;
  }

  /**
   * Parse the sink from ProjectSink resource.
   *
   * @param {string} projectSinkName
   *   A fully-qualified path representing project_sink resource.
   * @returns {string} A string representing the sink.
   */
  matchSinkFromProjectSinkName(projectSinkName: string) {
    return this._pathTemplates.projectSinkPathTemplate.match(projectSinkName).sink;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.loggingServiceV2Stub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
