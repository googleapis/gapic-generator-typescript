// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v2/metrics_service_v2_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './metrics_service_v2_client_config.json';

const version = require('../../../package.json').version;

/**
 *  Service for configuring logs-based metrics.
 * @class
 * @memberof v2
 */
export class MetricsServiceV2Client {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  metricsServiceV2Stub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of MetricsServiceV2Client.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof MetricsServiceV2Client;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      billingAccountCmekSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'billingAccounts/{billing_account}/cmekSettings'
      ),
      billingAccountExclusionPathTemplate: new this._gaxModule.PathTemplate(
        'billingAccounts/{billing_account}/exclusions/{exclusion}'
      ),
      billingAccountLocationBucketPathTemplate: new this._gaxModule.PathTemplate(
        'billingAccounts/{billing_account}/locations/{location}/buckets/{bucket}'
      ),
      billingAccountLogPathTemplate: new this._gaxModule.PathTemplate(
        'billingAccounts/{billing_account}/logs/{log}'
      ),
      billingAccountSinkPathTemplate: new this._gaxModule.PathTemplate(
        'billingAccounts/{billing_account}/sinks/{sink}'
      ),
      folderCmekSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/cmekSettings'
      ),
      folderExclusionPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/exclusions/{exclusion}'
      ),
      folderLocationBucketPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/locations/{location}/buckets/{bucket}'
      ),
      folderLogPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/logs/{log}'
      ),
      folderSinkPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/sinks/{sink}'
      ),
      logMetricPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/metrics/{metric}'
      ),
      organizationCmekSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/cmekSettings'
      ),
      organizationExclusionPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/exclusions/{exclusion}'
      ),
      organizationLocationBucketPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/buckets/{bucket}'
      ),
      organizationLogPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/logs/{log}'
      ),
      organizationSinkPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/sinks/{sink}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectCmekSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/cmekSettings'
      ),
      projectExclusionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/exclusions/{exclusion}'
      ),
      projectLocationBucketPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/buckets/{bucket}'
      ),
      projectLogPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/logs/{log}'
      ),
      projectSinkPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/sinks/{sink}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listLogMetrics:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'metrics')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.logging.v2.MetricsServiceV2', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = gax.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.metricsServiceV2Stub) {
      return this.metricsServiceV2Stub;
    }

    // Put together the "service stub" for
    // google.logging.v2.MetricsServiceV2.
    this.metricsServiceV2Stub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.logging.v2.MetricsServiceV2') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.logging.v2.MetricsServiceV2,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const metricsServiceV2StubMethods =
        ['listLogMetrics', 'getLogMetric', 'createLogMetric', 'updateLogMetric', 'deleteLogMetric'];
    for (const methodName of metricsServiceV2StubMethods) {
      const callPromise = this.metricsServiceV2Stub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.metricsServiceV2Stub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'logging.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'logging.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-platform.read-only',
      'https://www.googleapis.com/auth/logging.admin',
      'https://www.googleapis.com/auth/logging.read',
      'https://www.googleapis.com/auth/logging.write'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Gets a logs-based metric.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.metricName
 *   Required. The resource name of the desired metric:
 *
 *       "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [LogMetric]{@link google.logging.v2.LogMetric}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/metrics_service_v2.get_log_metric.js</caption>
 * region_tag:logging_v2_generated_MetricsServiceV2_GetLogMetric_async
 */
  getLogMetric(
      request?: protos.google.logging.v2.IGetLogMetricRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogMetric,
        protos.google.logging.v2.IGetLogMetricRequest|undefined, {}|undefined
      ]>;
  getLogMetric(
      request: protos.google.logging.v2.IGetLogMetricRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ILogMetric,
          protos.google.logging.v2.IGetLogMetricRequest|null|undefined,
          {}|null|undefined>): void;
  getLogMetric(
      request: protos.google.logging.v2.IGetLogMetricRequest,
      callback: Callback<
          protos.google.logging.v2.ILogMetric,
          protos.google.logging.v2.IGetLogMetricRequest|null|undefined,
          {}|null|undefined>): void;
  getLogMetric(
      request?: protos.google.logging.v2.IGetLogMetricRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ILogMetric,
          protos.google.logging.v2.IGetLogMetricRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ILogMetric,
          protos.google.logging.v2.IGetLogMetricRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ILogMetric,
        protos.google.logging.v2.IGetLogMetricRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'metric_name': request.metricName || '',
    });
    this.initialize();
    return this.innerApiCalls.getLogMetric(request, options, callback);
  }
/**
 * Creates a logs-based metric.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the project in which to create the metric:
 *
 *       "projects/[PROJECT_ID]"
 *
 *   The new metric must be provided in the request.
 * @param {google.logging.v2.LogMetric} request.metric
 *   Required. The new logs-based metric, which must not have an identifier that
 *   already exists.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [LogMetric]{@link google.logging.v2.LogMetric}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/metrics_service_v2.create_log_metric.js</caption>
 * region_tag:logging_v2_generated_MetricsServiceV2_CreateLogMetric_async
 */
  createLogMetric(
      request?: protos.google.logging.v2.ICreateLogMetricRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogMetric,
        protos.google.logging.v2.ICreateLogMetricRequest|undefined, {}|undefined
      ]>;
  createLogMetric(
      request: protos.google.logging.v2.ICreateLogMetricRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ILogMetric,
          protos.google.logging.v2.ICreateLogMetricRequest|null|undefined,
          {}|null|undefined>): void;
  createLogMetric(
      request: protos.google.logging.v2.ICreateLogMetricRequest,
      callback: Callback<
          protos.google.logging.v2.ILogMetric,
          protos.google.logging.v2.ICreateLogMetricRequest|null|undefined,
          {}|null|undefined>): void;
  createLogMetric(
      request?: protos.google.logging.v2.ICreateLogMetricRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ILogMetric,
          protos.google.logging.v2.ICreateLogMetricRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ILogMetric,
          protos.google.logging.v2.ICreateLogMetricRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ILogMetric,
        protos.google.logging.v2.ICreateLogMetricRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createLogMetric(request, options, callback);
  }
/**
 * Creates or updates a logs-based metric.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.metricName
 *   Required. The resource name of the metric to update:
 *
 *       "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
 *
 *   The updated metric must be provided in the request and it's
 *   `name` field must be the same as `[METRIC_ID]` If the metric
 *   does not exist in `[PROJECT_ID]`, then a new metric is created.
 * @param {google.logging.v2.LogMetric} request.metric
 *   Required. The updated metric.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [LogMetric]{@link google.logging.v2.LogMetric}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/metrics_service_v2.update_log_metric.js</caption>
 * region_tag:logging_v2_generated_MetricsServiceV2_UpdateLogMetric_async
 */
  updateLogMetric(
      request?: protos.google.logging.v2.IUpdateLogMetricRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogMetric,
        protos.google.logging.v2.IUpdateLogMetricRequest|undefined, {}|undefined
      ]>;
  updateLogMetric(
      request: protos.google.logging.v2.IUpdateLogMetricRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ILogMetric,
          protos.google.logging.v2.IUpdateLogMetricRequest|null|undefined,
          {}|null|undefined>): void;
  updateLogMetric(
      request: protos.google.logging.v2.IUpdateLogMetricRequest,
      callback: Callback<
          protos.google.logging.v2.ILogMetric,
          protos.google.logging.v2.IUpdateLogMetricRequest|null|undefined,
          {}|null|undefined>): void;
  updateLogMetric(
      request?: protos.google.logging.v2.IUpdateLogMetricRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ILogMetric,
          protos.google.logging.v2.IUpdateLogMetricRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ILogMetric,
          protos.google.logging.v2.IUpdateLogMetricRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ILogMetric,
        protos.google.logging.v2.IUpdateLogMetricRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'metric_name': request.metricName || '',
    });
    this.initialize();
    return this.innerApiCalls.updateLogMetric(request, options, callback);
  }
/**
 * Deletes a logs-based metric.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.metricName
 *   Required. The resource name of the metric to delete:
 *
 *       "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/metrics_service_v2.delete_log_metric.js</caption>
 * region_tag:logging_v2_generated_MetricsServiceV2_DeleteLogMetric_async
 */
  deleteLogMetric(
      request?: protos.google.logging.v2.IDeleteLogMetricRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.logging.v2.IDeleteLogMetricRequest|undefined, {}|undefined
      ]>;
  deleteLogMetric(
      request: protos.google.logging.v2.IDeleteLogMetricRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteLogMetricRequest|null|undefined,
          {}|null|undefined>): void;
  deleteLogMetric(
      request: protos.google.logging.v2.IDeleteLogMetricRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteLogMetricRequest|null|undefined,
          {}|null|undefined>): void;
  deleteLogMetric(
      request?: protos.google.logging.v2.IDeleteLogMetricRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteLogMetricRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteLogMetricRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.logging.v2.IDeleteLogMetricRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'metric_name': request.metricName || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteLogMetric(request, options, callback);
  }

 /**
 * Lists logs-based metrics.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the project containing the metrics:
 *
 *       "projects/[PROJECT_ID]"
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method. `pageToken` must be the value of
 *   `nextPageToken` from the previous response. The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *   Non-positive values are ignored. The presence of `nextPageToken` in the
 *   response indicates that more results might be available.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [LogMetric]{@link google.logging.v2.LogMetric}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listLogMetricsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listLogMetrics(
      request?: protos.google.logging.v2.IListLogMetricsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogMetric[],
        protos.google.logging.v2.IListLogMetricsRequest|null,
        protos.google.logging.v2.IListLogMetricsResponse
      ]>;
  listLogMetrics(
      request: protos.google.logging.v2.IListLogMetricsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.logging.v2.IListLogMetricsRequest,
          protos.google.logging.v2.IListLogMetricsResponse|null|undefined,
          protos.google.logging.v2.ILogMetric>): void;
  listLogMetrics(
      request: protos.google.logging.v2.IListLogMetricsRequest,
      callback: PaginationCallback<
          protos.google.logging.v2.IListLogMetricsRequest,
          protos.google.logging.v2.IListLogMetricsResponse|null|undefined,
          protos.google.logging.v2.ILogMetric>): void;
  listLogMetrics(
      request?: protos.google.logging.v2.IListLogMetricsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.logging.v2.IListLogMetricsRequest,
          protos.google.logging.v2.IListLogMetricsResponse|null|undefined,
          protos.google.logging.v2.ILogMetric>,
      callback?: PaginationCallback<
          protos.google.logging.v2.IListLogMetricsRequest,
          protos.google.logging.v2.IListLogMetricsResponse|null|undefined,
          protos.google.logging.v2.ILogMetric>):
      Promise<[
        protos.google.logging.v2.ILogMetric[],
        protos.google.logging.v2.IListLogMetricsRequest|null,
        protos.google.logging.v2.IListLogMetricsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listLogMetrics(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the project containing the metrics:
 *
 *       "projects/[PROJECT_ID]"
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method. `pageToken` must be the value of
 *   `nextPageToken` from the previous response. The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *   Non-positive values are ignored. The presence of `nextPageToken` in the
 *   response indicates that more results might be available.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [LogMetric]{@link google.logging.v2.LogMetric} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listLogMetricsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listLogMetricsStream(
      request?: protos.google.logging.v2.IListLogMetricsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const defaultCallSettings = this._defaults['listLogMetrics'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listLogMetrics.createStream(
      this.innerApiCalls.listLogMetrics as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listLogMetrics`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the project containing the metrics:
 *
 *       "projects/[PROJECT_ID]"
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method. `pageToken` must be the value of
 *   `nextPageToken` from the previous response. The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *   Non-positive values are ignored. The presence of `nextPageToken` in the
 *   response indicates that more results might be available.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [LogMetric]{@link google.logging.v2.LogMetric}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/metrics_service_v2.list_log_metrics.js</caption>
 * region_tag:logging_v2_generated_MetricsServiceV2_ListLogMetrics_async
 */
  listLogMetricsAsync(
      request?: protos.google.logging.v2.IListLogMetricsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.logging.v2.ILogMetric>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const defaultCallSettings = this._defaults['listLogMetrics'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listLogMetrics.asyncIterate(
      this.innerApiCalls['listLogMetrics'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.logging.v2.ILogMetric>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified billingAccountCmekSettings resource name string.
   *
   * @param {string} billing_account
   * @returns {string} Resource name string.
   */
  billingAccountCmekSettingsPath(billingAccount:string) {
    return this.pathTemplates.billingAccountCmekSettingsPathTemplate.render({
      billing_account: billingAccount,
    });
  }

  /**
   * Parse the billing_account from BillingAccountCmekSettings resource.
   *
   * @param {string} billingAccountCmekSettingsName
   *   A fully-qualified path representing billing_account_cmekSettings resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountCmekSettingsName(billingAccountCmekSettingsName: string) {
    return this.pathTemplates.billingAccountCmekSettingsPathTemplate.match(billingAccountCmekSettingsName).billing_account;
  }

  /**
   * Return a fully-qualified billingAccountExclusion resource name string.
   *
   * @param {string} billing_account
   * @param {string} exclusion
   * @returns {string} Resource name string.
   */
  billingAccountExclusionPath(billingAccount:string,exclusion:string) {
    return this.pathTemplates.billingAccountExclusionPathTemplate.render({
      billing_account: billingAccount,
      exclusion: exclusion,
    });
  }

  /**
   * Parse the billing_account from BillingAccountExclusion resource.
   *
   * @param {string} billingAccountExclusionName
   *   A fully-qualified path representing billing_account_exclusion resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountExclusionName(billingAccountExclusionName: string) {
    return this.pathTemplates.billingAccountExclusionPathTemplate.match(billingAccountExclusionName).billing_account;
  }

  /**
   * Parse the exclusion from BillingAccountExclusion resource.
   *
   * @param {string} billingAccountExclusionName
   *   A fully-qualified path representing billing_account_exclusion resource.
   * @returns {string} A string representing the exclusion.
   */
  matchExclusionFromBillingAccountExclusionName(billingAccountExclusionName: string) {
    return this.pathTemplates.billingAccountExclusionPathTemplate.match(billingAccountExclusionName).exclusion;
  }

  /**
   * Return a fully-qualified billingAccountLocationBucket resource name string.
   *
   * @param {string} billing_account
   * @param {string} location
   * @param {string} bucket
   * @returns {string} Resource name string.
   */
  billingAccountLocationBucketPath(billingAccount:string,location:string,bucket:string) {
    return this.pathTemplates.billingAccountLocationBucketPathTemplate.render({
      billing_account: billingAccount,
      location: location,
      bucket: bucket,
    });
  }

  /**
   * Parse the billing_account from BillingAccountLocationBucket resource.
   *
   * @param {string} billingAccountLocationBucketName
   *   A fully-qualified path representing billing_account_location_bucket resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountLocationBucketName(billingAccountLocationBucketName: string) {
    return this.pathTemplates.billingAccountLocationBucketPathTemplate.match(billingAccountLocationBucketName).billing_account;
  }

  /**
   * Parse the location from BillingAccountLocationBucket resource.
   *
   * @param {string} billingAccountLocationBucketName
   *   A fully-qualified path representing billing_account_location_bucket resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBillingAccountLocationBucketName(billingAccountLocationBucketName: string) {
    return this.pathTemplates.billingAccountLocationBucketPathTemplate.match(billingAccountLocationBucketName).location;
  }

  /**
   * Parse the bucket from BillingAccountLocationBucket resource.
   *
   * @param {string} billingAccountLocationBucketName
   *   A fully-qualified path representing billing_account_location_bucket resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromBillingAccountLocationBucketName(billingAccountLocationBucketName: string) {
    return this.pathTemplates.billingAccountLocationBucketPathTemplate.match(billingAccountLocationBucketName).bucket;
  }

  /**
   * Return a fully-qualified billingAccountLog resource name string.
   *
   * @param {string} billing_account
   * @param {string} log
   * @returns {string} Resource name string.
   */
  billingAccountLogPath(billingAccount:string,log:string) {
    return this.pathTemplates.billingAccountLogPathTemplate.render({
      billing_account: billingAccount,
      log: log,
    });
  }

  /**
   * Parse the billing_account from BillingAccountLog resource.
   *
   * @param {string} billingAccountLogName
   *   A fully-qualified path representing billing_account_log resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountLogName(billingAccountLogName: string) {
    return this.pathTemplates.billingAccountLogPathTemplate.match(billingAccountLogName).billing_account;
  }

  /**
   * Parse the log from BillingAccountLog resource.
   *
   * @param {string} billingAccountLogName
   *   A fully-qualified path representing billing_account_log resource.
   * @returns {string} A string representing the log.
   */
  matchLogFromBillingAccountLogName(billingAccountLogName: string) {
    return this.pathTemplates.billingAccountLogPathTemplate.match(billingAccountLogName).log;
  }

  /**
   * Return a fully-qualified billingAccountSink resource name string.
   *
   * @param {string} billing_account
   * @param {string} sink
   * @returns {string} Resource name string.
   */
  billingAccountSinkPath(billingAccount:string,sink:string) {
    return this.pathTemplates.billingAccountSinkPathTemplate.render({
      billing_account: billingAccount,
      sink: sink,
    });
  }

  /**
   * Parse the billing_account from BillingAccountSink resource.
   *
   * @param {string} billingAccountSinkName
   *   A fully-qualified path representing billing_account_sink resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountSinkName(billingAccountSinkName: string) {
    return this.pathTemplates.billingAccountSinkPathTemplate.match(billingAccountSinkName).billing_account;
  }

  /**
   * Parse the sink from BillingAccountSink resource.
   *
   * @param {string} billingAccountSinkName
   *   A fully-qualified path representing billing_account_sink resource.
   * @returns {string} A string representing the sink.
   */
  matchSinkFromBillingAccountSinkName(billingAccountSinkName: string) {
    return this.pathTemplates.billingAccountSinkPathTemplate.match(billingAccountSinkName).sink;
  }

  /**
   * Return a fully-qualified folderCmekSettings resource name string.
   *
   * @param {string} folder
   * @returns {string} Resource name string.
   */
  folderCmekSettingsPath(folder:string) {
    return this.pathTemplates.folderCmekSettingsPathTemplate.render({
      folder: folder,
    });
  }

  /**
   * Parse the folder from FolderCmekSettings resource.
   *
   * @param {string} folderCmekSettingsName
   *   A fully-qualified path representing folder_cmekSettings resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderCmekSettingsName(folderCmekSettingsName: string) {
    return this.pathTemplates.folderCmekSettingsPathTemplate.match(folderCmekSettingsName).folder;
  }

  /**
   * Return a fully-qualified folderExclusion resource name string.
   *
   * @param {string} folder
   * @param {string} exclusion
   * @returns {string} Resource name string.
   */
  folderExclusionPath(folder:string,exclusion:string) {
    return this.pathTemplates.folderExclusionPathTemplate.render({
      folder: folder,
      exclusion: exclusion,
    });
  }

  /**
   * Parse the folder from FolderExclusion resource.
   *
   * @param {string} folderExclusionName
   *   A fully-qualified path representing folder_exclusion resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderExclusionName(folderExclusionName: string) {
    return this.pathTemplates.folderExclusionPathTemplate.match(folderExclusionName).folder;
  }

  /**
   * Parse the exclusion from FolderExclusion resource.
   *
   * @param {string} folderExclusionName
   *   A fully-qualified path representing folder_exclusion resource.
   * @returns {string} A string representing the exclusion.
   */
  matchExclusionFromFolderExclusionName(folderExclusionName: string) {
    return this.pathTemplates.folderExclusionPathTemplate.match(folderExclusionName).exclusion;
  }

  /**
   * Return a fully-qualified folderLocationBucket resource name string.
   *
   * @param {string} folder
   * @param {string} location
   * @param {string} bucket
   * @returns {string} Resource name string.
   */
  folderLocationBucketPath(folder:string,location:string,bucket:string) {
    return this.pathTemplates.folderLocationBucketPathTemplate.render({
      folder: folder,
      location: location,
      bucket: bucket,
    });
  }

  /**
   * Parse the folder from FolderLocationBucket resource.
   *
   * @param {string} folderLocationBucketName
   *   A fully-qualified path representing folder_location_bucket resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLocationBucketName(folderLocationBucketName: string) {
    return this.pathTemplates.folderLocationBucketPathTemplate.match(folderLocationBucketName).folder;
  }

  /**
   * Parse the location from FolderLocationBucket resource.
   *
   * @param {string} folderLocationBucketName
   *   A fully-qualified path representing folder_location_bucket resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderLocationBucketName(folderLocationBucketName: string) {
    return this.pathTemplates.folderLocationBucketPathTemplate.match(folderLocationBucketName).location;
  }

  /**
   * Parse the bucket from FolderLocationBucket resource.
   *
   * @param {string} folderLocationBucketName
   *   A fully-qualified path representing folder_location_bucket resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromFolderLocationBucketName(folderLocationBucketName: string) {
    return this.pathTemplates.folderLocationBucketPathTemplate.match(folderLocationBucketName).bucket;
  }

  /**
   * Return a fully-qualified folderLog resource name string.
   *
   * @param {string} folder
   * @param {string} log
   * @returns {string} Resource name string.
   */
  folderLogPath(folder:string,log:string) {
    return this.pathTemplates.folderLogPathTemplate.render({
      folder: folder,
      log: log,
    });
  }

  /**
   * Parse the folder from FolderLog resource.
   *
   * @param {string} folderLogName
   *   A fully-qualified path representing folder_log resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLogName(folderLogName: string) {
    return this.pathTemplates.folderLogPathTemplate.match(folderLogName).folder;
  }

  /**
   * Parse the log from FolderLog resource.
   *
   * @param {string} folderLogName
   *   A fully-qualified path representing folder_log resource.
   * @returns {string} A string representing the log.
   */
  matchLogFromFolderLogName(folderLogName: string) {
    return this.pathTemplates.folderLogPathTemplate.match(folderLogName).log;
  }

  /**
   * Return a fully-qualified folderSink resource name string.
   *
   * @param {string} folder
   * @param {string} sink
   * @returns {string} Resource name string.
   */
  folderSinkPath(folder:string,sink:string) {
    return this.pathTemplates.folderSinkPathTemplate.render({
      folder: folder,
      sink: sink,
    });
  }

  /**
   * Parse the folder from FolderSink resource.
   *
   * @param {string} folderSinkName
   *   A fully-qualified path representing folder_sink resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderSinkName(folderSinkName: string) {
    return this.pathTemplates.folderSinkPathTemplate.match(folderSinkName).folder;
  }

  /**
   * Parse the sink from FolderSink resource.
   *
   * @param {string} folderSinkName
   *   A fully-qualified path representing folder_sink resource.
   * @returns {string} A string representing the sink.
   */
  matchSinkFromFolderSinkName(folderSinkName: string) {
    return this.pathTemplates.folderSinkPathTemplate.match(folderSinkName).sink;
  }

  /**
   * Return a fully-qualified logMetric resource name string.
   *
   * @param {string} project
   * @param {string} metric
   * @returns {string} Resource name string.
   */
  logMetricPath(project:string,metric:string) {
    return this.pathTemplates.logMetricPathTemplate.render({
      project: project,
      metric: metric,
    });
  }

  /**
   * Parse the project from LogMetric resource.
   *
   * @param {string} logMetricName
   *   A fully-qualified path representing LogMetric resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLogMetricName(logMetricName: string) {
    return this.pathTemplates.logMetricPathTemplate.match(logMetricName).project;
  }

  /**
   * Parse the metric from LogMetric resource.
   *
   * @param {string} logMetricName
   *   A fully-qualified path representing LogMetric resource.
   * @returns {string} A string representing the metric.
   */
  matchMetricFromLogMetricName(logMetricName: string) {
    return this.pathTemplates.logMetricPathTemplate.match(logMetricName).metric;
  }

  /**
   * Return a fully-qualified organizationCmekSettings resource name string.
   *
   * @param {string} organization
   * @returns {string} Resource name string.
   */
  organizationCmekSettingsPath(organization:string) {
    return this.pathTemplates.organizationCmekSettingsPathTemplate.render({
      organization: organization,
    });
  }

  /**
   * Parse the organization from OrganizationCmekSettings resource.
   *
   * @param {string} organizationCmekSettingsName
   *   A fully-qualified path representing organization_cmekSettings resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationCmekSettingsName(organizationCmekSettingsName: string) {
    return this.pathTemplates.organizationCmekSettingsPathTemplate.match(organizationCmekSettingsName).organization;
  }

  /**
   * Return a fully-qualified organizationExclusion resource name string.
   *
   * @param {string} organization
   * @param {string} exclusion
   * @returns {string} Resource name string.
   */
  organizationExclusionPath(organization:string,exclusion:string) {
    return this.pathTemplates.organizationExclusionPathTemplate.render({
      organization: organization,
      exclusion: exclusion,
    });
  }

  /**
   * Parse the organization from OrganizationExclusion resource.
   *
   * @param {string} organizationExclusionName
   *   A fully-qualified path representing organization_exclusion resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationExclusionName(organizationExclusionName: string) {
    return this.pathTemplates.organizationExclusionPathTemplate.match(organizationExclusionName).organization;
  }

  /**
   * Parse the exclusion from OrganizationExclusion resource.
   *
   * @param {string} organizationExclusionName
   *   A fully-qualified path representing organization_exclusion resource.
   * @returns {string} A string representing the exclusion.
   */
  matchExclusionFromOrganizationExclusionName(organizationExclusionName: string) {
    return this.pathTemplates.organizationExclusionPathTemplate.match(organizationExclusionName).exclusion;
  }

  /**
   * Return a fully-qualified organizationLocationBucket resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} bucket
   * @returns {string} Resource name string.
   */
  organizationLocationBucketPath(organization:string,location:string,bucket:string) {
    return this.pathTemplates.organizationLocationBucketPathTemplate.render({
      organization: organization,
      location: location,
      bucket: bucket,
    });
  }

  /**
   * Parse the organization from OrganizationLocationBucket resource.
   *
   * @param {string} organizationLocationBucketName
   *   A fully-qualified path representing organization_location_bucket resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationBucketName(organizationLocationBucketName: string) {
    return this.pathTemplates.organizationLocationBucketPathTemplate.match(organizationLocationBucketName).organization;
  }

  /**
   * Parse the location from OrganizationLocationBucket resource.
   *
   * @param {string} organizationLocationBucketName
   *   A fully-qualified path representing organization_location_bucket resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationBucketName(organizationLocationBucketName: string) {
    return this.pathTemplates.organizationLocationBucketPathTemplate.match(organizationLocationBucketName).location;
  }

  /**
   * Parse the bucket from OrganizationLocationBucket resource.
   *
   * @param {string} organizationLocationBucketName
   *   A fully-qualified path representing organization_location_bucket resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromOrganizationLocationBucketName(organizationLocationBucketName: string) {
    return this.pathTemplates.organizationLocationBucketPathTemplate.match(organizationLocationBucketName).bucket;
  }

  /**
   * Return a fully-qualified organizationLog resource name string.
   *
   * @param {string} organization
   * @param {string} log
   * @returns {string} Resource name string.
   */
  organizationLogPath(organization:string,log:string) {
    return this.pathTemplates.organizationLogPathTemplate.render({
      organization: organization,
      log: log,
    });
  }

  /**
   * Parse the organization from OrganizationLog resource.
   *
   * @param {string} organizationLogName
   *   A fully-qualified path representing organization_log resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLogName(organizationLogName: string) {
    return this.pathTemplates.organizationLogPathTemplate.match(organizationLogName).organization;
  }

  /**
   * Parse the log from OrganizationLog resource.
   *
   * @param {string} organizationLogName
   *   A fully-qualified path representing organization_log resource.
   * @returns {string} A string representing the log.
   */
  matchLogFromOrganizationLogName(organizationLogName: string) {
    return this.pathTemplates.organizationLogPathTemplate.match(organizationLogName).log;
  }

  /**
   * Return a fully-qualified organizationSink resource name string.
   *
   * @param {string} organization
   * @param {string} sink
   * @returns {string} Resource name string.
   */
  organizationSinkPath(organization:string,sink:string) {
    return this.pathTemplates.organizationSinkPathTemplate.render({
      organization: organization,
      sink: sink,
    });
  }

  /**
   * Parse the organization from OrganizationSink resource.
   *
   * @param {string} organizationSinkName
   *   A fully-qualified path representing organization_sink resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationSinkName(organizationSinkName: string) {
    return this.pathTemplates.organizationSinkPathTemplate.match(organizationSinkName).organization;
  }

  /**
   * Parse the sink from OrganizationSink resource.
   *
   * @param {string} organizationSinkName
   *   A fully-qualified path representing organization_sink resource.
   * @returns {string} A string representing the sink.
   */
  matchSinkFromOrganizationSinkName(organizationSinkName: string) {
    return this.pathTemplates.organizationSinkPathTemplate.match(organizationSinkName).sink;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectCmekSettings resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectCmekSettingsPath(project:string) {
    return this.pathTemplates.projectCmekSettingsPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from ProjectCmekSettings resource.
   *
   * @param {string} projectCmekSettingsName
   *   A fully-qualified path representing project_cmekSettings resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectCmekSettingsName(projectCmekSettingsName: string) {
    return this.pathTemplates.projectCmekSettingsPathTemplate.match(projectCmekSettingsName).project;
  }

  /**
   * Return a fully-qualified projectExclusion resource name string.
   *
   * @param {string} project
   * @param {string} exclusion
   * @returns {string} Resource name string.
   */
  projectExclusionPath(project:string,exclusion:string) {
    return this.pathTemplates.projectExclusionPathTemplate.render({
      project: project,
      exclusion: exclusion,
    });
  }

  /**
   * Parse the project from ProjectExclusion resource.
   *
   * @param {string} projectExclusionName
   *   A fully-qualified path representing project_exclusion resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectExclusionName(projectExclusionName: string) {
    return this.pathTemplates.projectExclusionPathTemplate.match(projectExclusionName).project;
  }

  /**
   * Parse the exclusion from ProjectExclusion resource.
   *
   * @param {string} projectExclusionName
   *   A fully-qualified path representing project_exclusion resource.
   * @returns {string} A string representing the exclusion.
   */
  matchExclusionFromProjectExclusionName(projectExclusionName: string) {
    return this.pathTemplates.projectExclusionPathTemplate.match(projectExclusionName).exclusion;
  }

  /**
   * Return a fully-qualified projectLocationBucket resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} bucket
   * @returns {string} Resource name string.
   */
  projectLocationBucketPath(project:string,location:string,bucket:string) {
    return this.pathTemplates.projectLocationBucketPathTemplate.render({
      project: project,
      location: location,
      bucket: bucket,
    });
  }

  /**
   * Parse the project from ProjectLocationBucket resource.
   *
   * @param {string} projectLocationBucketName
   *   A fully-qualified path representing project_location_bucket resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationBucketName(projectLocationBucketName: string) {
    return this.pathTemplates.projectLocationBucketPathTemplate.match(projectLocationBucketName).project;
  }

  /**
   * Parse the location from ProjectLocationBucket resource.
   *
   * @param {string} projectLocationBucketName
   *   A fully-qualified path representing project_location_bucket resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationBucketName(projectLocationBucketName: string) {
    return this.pathTemplates.projectLocationBucketPathTemplate.match(projectLocationBucketName).location;
  }

  /**
   * Parse the bucket from ProjectLocationBucket resource.
   *
   * @param {string} projectLocationBucketName
   *   A fully-qualified path representing project_location_bucket resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromProjectLocationBucketName(projectLocationBucketName: string) {
    return this.pathTemplates.projectLocationBucketPathTemplate.match(projectLocationBucketName).bucket;
  }

  /**
   * Return a fully-qualified projectLog resource name string.
   *
   * @param {string} project
   * @param {string} log
   * @returns {string} Resource name string.
   */
  projectLogPath(project:string,log:string) {
    return this.pathTemplates.projectLogPathTemplate.render({
      project: project,
      log: log,
    });
  }

  /**
   * Parse the project from ProjectLog resource.
   *
   * @param {string} projectLogName
   *   A fully-qualified path representing project_log resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLogName(projectLogName: string) {
    return this.pathTemplates.projectLogPathTemplate.match(projectLogName).project;
  }

  /**
   * Parse the log from ProjectLog resource.
   *
   * @param {string} projectLogName
   *   A fully-qualified path representing project_log resource.
   * @returns {string} A string representing the log.
   */
  matchLogFromProjectLogName(projectLogName: string) {
    return this.pathTemplates.projectLogPathTemplate.match(projectLogName).log;
  }

  /**
   * Return a fully-qualified projectSink resource name string.
   *
   * @param {string} project
   * @param {string} sink
   * @returns {string} Resource name string.
   */
  projectSinkPath(project:string,sink:string) {
    return this.pathTemplates.projectSinkPathTemplate.render({
      project: project,
      sink: sink,
    });
  }

  /**
   * Parse the project from ProjectSink resource.
   *
   * @param {string} projectSinkName
   *   A fully-qualified path representing project_sink resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectSinkName(projectSinkName: string) {
    return this.pathTemplates.projectSinkPathTemplate.match(projectSinkName).project;
  }

  /**
   * Parse the sink from ProjectSink resource.
   *
   * @param {string} projectSinkName
   *   A fully-qualified path representing project_sink resource.
   * @returns {string} A string representing the sink.
   */
  matchSinkFromProjectSinkName(projectSinkName: string) {
    return this.pathTemplates.projectSinkPathTemplate.match(projectSinkName).sink;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.metricsServiceV2Stub && !this._terminated) {
      return this.metricsServiceV2Stub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
