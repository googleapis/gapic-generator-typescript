// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as loggingservicev2Module from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v2.LoggingServiceV2Client', () => {
    it('has servicePath', () => {
        const servicePath = loggingservicev2Module.v2.LoggingServiceV2Client.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = loggingservicev2Module.v2.LoggingServiceV2Client.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = loggingservicev2Module.v2.LoggingServiceV2Client.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new loggingservicev2Module.v2.LoggingServiceV2Client();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.loggingServiceV2Stub, undefined);
        await client.initialize();
        assert(client.loggingServiceV2Stub);
    });

    it('has close method for the initialized client', done => {
        const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.initialize();
        assert(client.loggingServiceV2Stub);
        client.close().then(() => {
            done();
        });
    });

    it('has close method for the non-initialized client', done => {
        const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.loggingServiceV2Stub, undefined);
        client.close().then(() => {
            done();
        });
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('deleteLog', () => {
        it('invokes deleteLog without error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.DeleteLogRequest());
            request.logName = '';
            const expectedHeaderRequestParams = "log_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteLog = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteLog(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteLog as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteLog without error using callback', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.DeleteLogRequest());
            request.logName = '';
            const expectedHeaderRequestParams = "log_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteLog = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteLog(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteLog as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteLog with error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.DeleteLogRequest());
            request.logName = '';
            const expectedHeaderRequestParams = "log_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteLog = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteLog(request), expectedError);
            assert((client.innerApiCalls.deleteLog as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteLog with closed client', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.DeleteLogRequest());
            request.logName = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteLog(request), expectedError);
        });
    });

    describe('writeLogEntries', () => {
        it('invokes writeLogEntries without error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.WriteLogEntriesRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.logging.v2.WriteLogEntriesResponse());
            client.innerApiCalls.writeLogEntries = stubSimpleCall(expectedResponse);
            const [response] = await client.writeLogEntries(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.writeLogEntries as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes writeLogEntries without error using callback', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.WriteLogEntriesRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = generateSampleMessage(new protos.google.logging.v2.WriteLogEntriesResponse());
            client.innerApiCalls.writeLogEntries = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.writeLogEntries(
                    request,
                    (err?: Error|null, result?: protos.google.logging.v2.IWriteLogEntriesResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.writeLogEntries as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes writeLogEntries with error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.WriteLogEntriesRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.writeLogEntries = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.writeLogEntries(request), expectedError);
            assert((client.innerApiCalls.writeLogEntries as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes writeLogEntries with closed client', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.WriteLogEntriesRequest());
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.writeLogEntries(request), expectedError);
        });
    });

    describe('listLogEntries', () => {
        it('invokes listLogEntries without error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListLogEntriesRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = [
              generateSampleMessage(new protos.google.logging.v2.LogEntry()),
              generateSampleMessage(new protos.google.logging.v2.LogEntry()),
              generateSampleMessage(new protos.google.logging.v2.LogEntry()),
            ];
            client.innerApiCalls.listLogEntries = stubSimpleCall(expectedResponse);
            const [response] = await client.listLogEntries(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listLogEntries as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listLogEntries without error using callback', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListLogEntriesRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = [
              generateSampleMessage(new protos.google.logging.v2.LogEntry()),
              generateSampleMessage(new protos.google.logging.v2.LogEntry()),
              generateSampleMessage(new protos.google.logging.v2.LogEntry()),
            ];
            client.innerApiCalls.listLogEntries = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listLogEntries(
                    request,
                    (err?: Error|null, result?: protos.google.logging.v2.ILogEntry[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listLogEntries as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listLogEntries with error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListLogEntriesRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.listLogEntries = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listLogEntries(request), expectedError);
            assert((client.innerApiCalls.listLogEntries as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listLogEntriesStream without error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListLogEntriesRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.logging.v2.LogEntry()),
              generateSampleMessage(new protos.google.logging.v2.LogEntry()),
              generateSampleMessage(new protos.google.logging.v2.LogEntry()),
            ];
            client.descriptors.page.listLogEntries.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listLogEntriesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.logging.v2.LogEntry[] = [];
                stream.on('data', (response: protos.google.logging.v2.LogEntry) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listLogEntries.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listLogEntries, request));
        });

        it('invokes listLogEntriesStream with error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListLogEntriesRequest());
            const expectedError = new Error('expected');
            client.descriptors.page.listLogEntries.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listLogEntriesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.logging.v2.LogEntry[] = [];
                stream.on('data', (response: protos.google.logging.v2.LogEntry) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listLogEntries.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listLogEntries, request));
        });

        it('uses async iteration with listLogEntries without error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListLogEntriesRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.logging.v2.LogEntry()),
              generateSampleMessage(new protos.google.logging.v2.LogEntry()),
              generateSampleMessage(new protos.google.logging.v2.LogEntry()),
            ];
            client.descriptors.page.listLogEntries.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.logging.v2.ILogEntry[] = [];
            const iterable = client.listLogEntriesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listLogEntries.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with listLogEntries with error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListLogEntriesRequest());const expectedError = new Error('expected');
            client.descriptors.page.listLogEntries.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listLogEntriesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.logging.v2.ILogEntry[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listLogEntries.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('listMonitoredResourceDescriptors', () => {
        it('invokes listMonitoredResourceDescriptors without error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListMonitoredResourceDescriptorsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = [
              generateSampleMessage(new protos.google.api.MonitoredResourceDescriptor()),
              generateSampleMessage(new protos.google.api.MonitoredResourceDescriptor()),
              generateSampleMessage(new protos.google.api.MonitoredResourceDescriptor()),
            ];
            client.innerApiCalls.listMonitoredResourceDescriptors = stubSimpleCall(expectedResponse);
            const [response] = await client.listMonitoredResourceDescriptors(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listMonitoredResourceDescriptors as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listMonitoredResourceDescriptors without error using callback', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListMonitoredResourceDescriptorsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedResponse = [
              generateSampleMessage(new protos.google.api.MonitoredResourceDescriptor()),
              generateSampleMessage(new protos.google.api.MonitoredResourceDescriptor()),
              generateSampleMessage(new protos.google.api.MonitoredResourceDescriptor()),
            ];
            client.innerApiCalls.listMonitoredResourceDescriptors = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listMonitoredResourceDescriptors(
                    request,
                    (err?: Error|null, result?: protos.google.api.IMonitoredResourceDescriptor[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listMonitoredResourceDescriptors as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listMonitoredResourceDescriptors with error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListMonitoredResourceDescriptorsRequest());
            const expectedOptions = {otherArgs: {headers: {}}};;
            const expectedError = new Error('expected');
            client.innerApiCalls.listMonitoredResourceDescriptors = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listMonitoredResourceDescriptors(request), expectedError);
            assert((client.innerApiCalls.listMonitoredResourceDescriptors as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listMonitoredResourceDescriptorsStream without error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListMonitoredResourceDescriptorsRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.api.MonitoredResourceDescriptor()),
              generateSampleMessage(new protos.google.api.MonitoredResourceDescriptor()),
              generateSampleMessage(new protos.google.api.MonitoredResourceDescriptor()),
            ];
            client.descriptors.page.listMonitoredResourceDescriptors.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listMonitoredResourceDescriptorsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.api.MonitoredResourceDescriptor[] = [];
                stream.on('data', (response: protos.google.api.MonitoredResourceDescriptor) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listMonitoredResourceDescriptors.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listMonitoredResourceDescriptors, request));
        });

        it('invokes listMonitoredResourceDescriptorsStream with error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListMonitoredResourceDescriptorsRequest());
            const expectedError = new Error('expected');
            client.descriptors.page.listMonitoredResourceDescriptors.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listMonitoredResourceDescriptorsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.api.MonitoredResourceDescriptor[] = [];
                stream.on('data', (response: protos.google.api.MonitoredResourceDescriptor) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listMonitoredResourceDescriptors.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listMonitoredResourceDescriptors, request));
        });

        it('uses async iteration with listMonitoredResourceDescriptors without error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListMonitoredResourceDescriptorsRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.api.MonitoredResourceDescriptor()),
              generateSampleMessage(new protos.google.api.MonitoredResourceDescriptor()),
              generateSampleMessage(new protos.google.api.MonitoredResourceDescriptor()),
            ];
            client.descriptors.page.listMonitoredResourceDescriptors.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.api.IMonitoredResourceDescriptor[] = [];
            const iterable = client.listMonitoredResourceDescriptorsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listMonitoredResourceDescriptors.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with listMonitoredResourceDescriptors with error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListMonitoredResourceDescriptorsRequest());const expectedError = new Error('expected');
            client.descriptors.page.listMonitoredResourceDescriptors.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listMonitoredResourceDescriptorsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.api.IMonitoredResourceDescriptor[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listMonitoredResourceDescriptors.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('listLogs', () => {
        it('invokes listLogs without error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListLogsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [new String(), new String(), new String()];
            client.innerApiCalls.listLogs = stubSimpleCall(expectedResponse);
            const [response] = await client.listLogs(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listLogs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listLogs without error using callback', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListLogsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [new String(), new String(), new String()];
            client.innerApiCalls.listLogs = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listLogs(
                    request,
                    (err?: Error|null, result?: string[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listLogs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listLogs with error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListLogsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listLogs = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listLogs(request), expectedError);
            assert((client.innerApiCalls.listLogs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listLogsStream without error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListLogsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [new String(), new String(), new String()];
            client.descriptors.page.listLogs.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listLogsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: string[] = [];
                stream.on('data', (response: string) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listLogs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listLogs, request));
            assert.strictEqual(
                (client.descriptors.page.listLogs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listLogsStream with error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListLogsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listLogs.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listLogsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: string[] = [];
                stream.on('data', (response: string) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listLogs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listLogs, request));
            assert.strictEqual(
                (client.descriptors.page.listLogs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listLogs without error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListLogsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [new String(), new String(), new String()];
            client.descriptors.page.listLogs.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: string[] = [];
            const iterable = client.listLogsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listLogs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listLogs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listLogs with error', async () => {
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.logging.v2.ListLogsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listLogs.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listLogsAsync(request);
            await assert.rejects(async () => {
                const responses: string[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listLogs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listLogs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('billingAccountCmekSettings', () => {
            const fakePath = "/rendered/path/billingAccountCmekSettings";
            const expectedParameters = {
                billing_account: "billingAccountValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.billingAccountCmekSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.billingAccountCmekSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('billingAccountCmekSettingsPath', () => {
                const result = client.billingAccountCmekSettingsPath("billingAccountValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.billingAccountCmekSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchBillingAccountFromBillingAccountCmekSettingsName', () => {
                const result = client.matchBillingAccountFromBillingAccountCmekSettingsName(fakePath);
                assert.strictEqual(result, "billingAccountValue");
                assert((client.pathTemplates.billingAccountCmekSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('billingAccountExclusion', () => {
            const fakePath = "/rendered/path/billingAccountExclusion";
            const expectedParameters = {
                billing_account: "billingAccountValue",
                exclusion: "exclusionValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.billingAccountExclusionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.billingAccountExclusionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('billingAccountExclusionPath', () => {
                const result = client.billingAccountExclusionPath("billingAccountValue", "exclusionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.billingAccountExclusionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchBillingAccountFromBillingAccountExclusionName', () => {
                const result = client.matchBillingAccountFromBillingAccountExclusionName(fakePath);
                assert.strictEqual(result, "billingAccountValue");
                assert((client.pathTemplates.billingAccountExclusionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchExclusionFromBillingAccountExclusionName', () => {
                const result = client.matchExclusionFromBillingAccountExclusionName(fakePath);
                assert.strictEqual(result, "exclusionValue");
                assert((client.pathTemplates.billingAccountExclusionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('billingAccountLocationBucket', () => {
            const fakePath = "/rendered/path/billingAccountLocationBucket";
            const expectedParameters = {
                billing_account: "billingAccountValue",
                location: "locationValue",
                bucket: "bucketValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.billingAccountLocationBucketPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.billingAccountLocationBucketPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('billingAccountLocationBucketPath', () => {
                const result = client.billingAccountLocationBucketPath("billingAccountValue", "locationValue", "bucketValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.billingAccountLocationBucketPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchBillingAccountFromBillingAccountLocationBucketName', () => {
                const result = client.matchBillingAccountFromBillingAccountLocationBucketName(fakePath);
                assert.strictEqual(result, "billingAccountValue");
                assert((client.pathTemplates.billingAccountLocationBucketPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromBillingAccountLocationBucketName', () => {
                const result = client.matchLocationFromBillingAccountLocationBucketName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.billingAccountLocationBucketPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBucketFromBillingAccountLocationBucketName', () => {
                const result = client.matchBucketFromBillingAccountLocationBucketName(fakePath);
                assert.strictEqual(result, "bucketValue");
                assert((client.pathTemplates.billingAccountLocationBucketPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('billingAccountLog', () => {
            const fakePath = "/rendered/path/billingAccountLog";
            const expectedParameters = {
                billing_account: "billingAccountValue",
                log: "logValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.billingAccountLogPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.billingAccountLogPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('billingAccountLogPath', () => {
                const result = client.billingAccountLogPath("billingAccountValue", "logValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.billingAccountLogPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchBillingAccountFromBillingAccountLogName', () => {
                const result = client.matchBillingAccountFromBillingAccountLogName(fakePath);
                assert.strictEqual(result, "billingAccountValue");
                assert((client.pathTemplates.billingAccountLogPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLogFromBillingAccountLogName', () => {
                const result = client.matchLogFromBillingAccountLogName(fakePath);
                assert.strictEqual(result, "logValue");
                assert((client.pathTemplates.billingAccountLogPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('billingAccountSink', () => {
            const fakePath = "/rendered/path/billingAccountSink";
            const expectedParameters = {
                billing_account: "billingAccountValue",
                sink: "sinkValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.billingAccountSinkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.billingAccountSinkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('billingAccountSinkPath', () => {
                const result = client.billingAccountSinkPath("billingAccountValue", "sinkValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.billingAccountSinkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchBillingAccountFromBillingAccountSinkName', () => {
                const result = client.matchBillingAccountFromBillingAccountSinkName(fakePath);
                assert.strictEqual(result, "billingAccountValue");
                assert((client.pathTemplates.billingAccountSinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSinkFromBillingAccountSinkName', () => {
                const result = client.matchSinkFromBillingAccountSinkName(fakePath);
                assert.strictEqual(result, "sinkValue");
                assert((client.pathTemplates.billingAccountSinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('folderCmekSettings', () => {
            const fakePath = "/rendered/path/folderCmekSettings";
            const expectedParameters = {
                folder: "folderValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.folderCmekSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.folderCmekSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('folderCmekSettingsPath', () => {
                const result = client.folderCmekSettingsPath("folderValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.folderCmekSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchFolderFromFolderCmekSettingsName', () => {
                const result = client.matchFolderFromFolderCmekSettingsName(fakePath);
                assert.strictEqual(result, "folderValue");
                assert((client.pathTemplates.folderCmekSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('folderExclusion', () => {
            const fakePath = "/rendered/path/folderExclusion";
            const expectedParameters = {
                folder: "folderValue",
                exclusion: "exclusionValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.folderExclusionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.folderExclusionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('folderExclusionPath', () => {
                const result = client.folderExclusionPath("folderValue", "exclusionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.folderExclusionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchFolderFromFolderExclusionName', () => {
                const result = client.matchFolderFromFolderExclusionName(fakePath);
                assert.strictEqual(result, "folderValue");
                assert((client.pathTemplates.folderExclusionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchExclusionFromFolderExclusionName', () => {
                const result = client.matchExclusionFromFolderExclusionName(fakePath);
                assert.strictEqual(result, "exclusionValue");
                assert((client.pathTemplates.folderExclusionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('folderLocationBucket', () => {
            const fakePath = "/rendered/path/folderLocationBucket";
            const expectedParameters = {
                folder: "folderValue",
                location: "locationValue",
                bucket: "bucketValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.folderLocationBucketPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.folderLocationBucketPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('folderLocationBucketPath', () => {
                const result = client.folderLocationBucketPath("folderValue", "locationValue", "bucketValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.folderLocationBucketPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchFolderFromFolderLocationBucketName', () => {
                const result = client.matchFolderFromFolderLocationBucketName(fakePath);
                assert.strictEqual(result, "folderValue");
                assert((client.pathTemplates.folderLocationBucketPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromFolderLocationBucketName', () => {
                const result = client.matchLocationFromFolderLocationBucketName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.folderLocationBucketPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBucketFromFolderLocationBucketName', () => {
                const result = client.matchBucketFromFolderLocationBucketName(fakePath);
                assert.strictEqual(result, "bucketValue");
                assert((client.pathTemplates.folderLocationBucketPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('folderLog', () => {
            const fakePath = "/rendered/path/folderLog";
            const expectedParameters = {
                folder: "folderValue",
                log: "logValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.folderLogPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.folderLogPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('folderLogPath', () => {
                const result = client.folderLogPath("folderValue", "logValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.folderLogPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchFolderFromFolderLogName', () => {
                const result = client.matchFolderFromFolderLogName(fakePath);
                assert.strictEqual(result, "folderValue");
                assert((client.pathTemplates.folderLogPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLogFromFolderLogName', () => {
                const result = client.matchLogFromFolderLogName(fakePath);
                assert.strictEqual(result, "logValue");
                assert((client.pathTemplates.folderLogPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('folderSink', () => {
            const fakePath = "/rendered/path/folderSink";
            const expectedParameters = {
                folder: "folderValue",
                sink: "sinkValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.folderSinkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.folderSinkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('folderSinkPath', () => {
                const result = client.folderSinkPath("folderValue", "sinkValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.folderSinkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchFolderFromFolderSinkName', () => {
                const result = client.matchFolderFromFolderSinkName(fakePath);
                assert.strictEqual(result, "folderValue");
                assert((client.pathTemplates.folderSinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSinkFromFolderSinkName', () => {
                const result = client.matchSinkFromFolderSinkName(fakePath);
                assert.strictEqual(result, "sinkValue");
                assert((client.pathTemplates.folderSinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('logMetric', () => {
            const fakePath = "/rendered/path/logMetric";
            const expectedParameters = {
                project: "projectValue",
                metric: "metricValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.logMetricPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.logMetricPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('logMetricPath', () => {
                const result = client.logMetricPath("projectValue", "metricValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.logMetricPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLogMetricName', () => {
                const result = client.matchProjectFromLogMetricName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.logMetricPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMetricFromLogMetricName', () => {
                const result = client.matchMetricFromLogMetricName(fakePath);
                assert.strictEqual(result, "metricValue");
                assert((client.pathTemplates.logMetricPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('organizationCmekSettings', () => {
            const fakePath = "/rendered/path/organizationCmekSettings";
            const expectedParameters = {
                organization: "organizationValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.organizationCmekSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.organizationCmekSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('organizationCmekSettingsPath', () => {
                const result = client.organizationCmekSettingsPath("organizationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.organizationCmekSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchOrganizationFromOrganizationCmekSettingsName', () => {
                const result = client.matchOrganizationFromOrganizationCmekSettingsName(fakePath);
                assert.strictEqual(result, "organizationValue");
                assert((client.pathTemplates.organizationCmekSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('organizationExclusion', () => {
            const fakePath = "/rendered/path/organizationExclusion";
            const expectedParameters = {
                organization: "organizationValue",
                exclusion: "exclusionValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.organizationExclusionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.organizationExclusionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('organizationExclusionPath', () => {
                const result = client.organizationExclusionPath("organizationValue", "exclusionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.organizationExclusionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchOrganizationFromOrganizationExclusionName', () => {
                const result = client.matchOrganizationFromOrganizationExclusionName(fakePath);
                assert.strictEqual(result, "organizationValue");
                assert((client.pathTemplates.organizationExclusionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchExclusionFromOrganizationExclusionName', () => {
                const result = client.matchExclusionFromOrganizationExclusionName(fakePath);
                assert.strictEqual(result, "exclusionValue");
                assert((client.pathTemplates.organizationExclusionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('organizationLocationBucket', () => {
            const fakePath = "/rendered/path/organizationLocationBucket";
            const expectedParameters = {
                organization: "organizationValue",
                location: "locationValue",
                bucket: "bucketValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.organizationLocationBucketPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.organizationLocationBucketPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('organizationLocationBucketPath', () => {
                const result = client.organizationLocationBucketPath("organizationValue", "locationValue", "bucketValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.organizationLocationBucketPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchOrganizationFromOrganizationLocationBucketName', () => {
                const result = client.matchOrganizationFromOrganizationLocationBucketName(fakePath);
                assert.strictEqual(result, "organizationValue");
                assert((client.pathTemplates.organizationLocationBucketPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromOrganizationLocationBucketName', () => {
                const result = client.matchLocationFromOrganizationLocationBucketName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.organizationLocationBucketPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBucketFromOrganizationLocationBucketName', () => {
                const result = client.matchBucketFromOrganizationLocationBucketName(fakePath);
                assert.strictEqual(result, "bucketValue");
                assert((client.pathTemplates.organizationLocationBucketPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('organizationLog', () => {
            const fakePath = "/rendered/path/organizationLog";
            const expectedParameters = {
                organization: "organizationValue",
                log: "logValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.organizationLogPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.organizationLogPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('organizationLogPath', () => {
                const result = client.organizationLogPath("organizationValue", "logValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.organizationLogPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchOrganizationFromOrganizationLogName', () => {
                const result = client.matchOrganizationFromOrganizationLogName(fakePath);
                assert.strictEqual(result, "organizationValue");
                assert((client.pathTemplates.organizationLogPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLogFromOrganizationLogName', () => {
                const result = client.matchLogFromOrganizationLogName(fakePath);
                assert.strictEqual(result, "logValue");
                assert((client.pathTemplates.organizationLogPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('organizationSink', () => {
            const fakePath = "/rendered/path/organizationSink";
            const expectedParameters = {
                organization: "organizationValue",
                sink: "sinkValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.organizationSinkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.organizationSinkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('organizationSinkPath', () => {
                const result = client.organizationSinkPath("organizationValue", "sinkValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.organizationSinkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchOrganizationFromOrganizationSinkName', () => {
                const result = client.matchOrganizationFromOrganizationSinkName(fakePath);
                assert.strictEqual(result, "organizationValue");
                assert((client.pathTemplates.organizationSinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSinkFromOrganizationSinkName', () => {
                const result = client.matchSinkFromOrganizationSinkName(fakePath);
                assert.strictEqual(result, "sinkValue");
                assert((client.pathTemplates.organizationSinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('project', () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectCmekSettings', () => {
            const fakePath = "/rendered/path/projectCmekSettings";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectCmekSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectCmekSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectCmekSettingsPath', () => {
                const result = client.projectCmekSettingsPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectCmekSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectCmekSettingsName', () => {
                const result = client.matchProjectFromProjectCmekSettingsName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectCmekSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectExclusion', () => {
            const fakePath = "/rendered/path/projectExclusion";
            const expectedParameters = {
                project: "projectValue",
                exclusion: "exclusionValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectExclusionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectExclusionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectExclusionPath', () => {
                const result = client.projectExclusionPath("projectValue", "exclusionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectExclusionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectExclusionName', () => {
                const result = client.matchProjectFromProjectExclusionName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectExclusionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchExclusionFromProjectExclusionName', () => {
                const result = client.matchExclusionFromProjectExclusionName(fakePath);
                assert.strictEqual(result, "exclusionValue");
                assert((client.pathTemplates.projectExclusionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectLocationBucket', () => {
            const fakePath = "/rendered/path/projectLocationBucket";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                bucket: "bucketValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectLocationBucketPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectLocationBucketPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectLocationBucketPath', () => {
                const result = client.projectLocationBucketPath("projectValue", "locationValue", "bucketValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectLocationBucketPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectLocationBucketName', () => {
                const result = client.matchProjectFromProjectLocationBucketName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectLocationBucketPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProjectLocationBucketName', () => {
                const result = client.matchLocationFromProjectLocationBucketName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.projectLocationBucketPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBucketFromProjectLocationBucketName', () => {
                const result = client.matchBucketFromProjectLocationBucketName(fakePath);
                assert.strictEqual(result, "bucketValue");
                assert((client.pathTemplates.projectLocationBucketPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectLog', () => {
            const fakePath = "/rendered/path/projectLog";
            const expectedParameters = {
                project: "projectValue",
                log: "logValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectLogPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectLogPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectLogPath', () => {
                const result = client.projectLogPath("projectValue", "logValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectLogPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectLogName', () => {
                const result = client.matchProjectFromProjectLogName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectLogPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLogFromProjectLogName', () => {
                const result = client.matchLogFromProjectLogName(fakePath);
                assert.strictEqual(result, "logValue");
                assert((client.pathTemplates.projectLogPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectSink', () => {
            const fakePath = "/rendered/path/projectSink";
            const expectedParameters = {
                project: "projectValue",
                sink: "sinkValue",
            };
            const client = new loggingservicev2Module.v2.LoggingServiceV2Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectSinkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectSinkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectSinkPath', () => {
                const result = client.projectSinkPath("projectValue", "sinkValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectSinkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectSinkName', () => {
                const result = client.matchProjectFromProjectSinkName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectSinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSinkFromProjectSinkName', () => {
                const result = client.matchSinkFromProjectSinkName(fakePath);
                assert.strictEqual(result, "sinkValue");
                assert((client.pathTemplates.projectSinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
