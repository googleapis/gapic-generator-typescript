


'use strict';

function main() {
  // [START monitoring_list_groups_sample]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The project whose groups are to be listed. The format is
   *  `"projects/{project_id_or_number}"`.
   */
  // const name ='abc123'
  /**
   *  A group name: `"projects/{project_id_or_number}/groups/{group_id}"`.
   *  Returns groups whose `parentName` field contains the group
   *  name.  If no groups have this parent, the results are empty.
   */
  // const childrenOfGroup ='abc123'
  /**
   *  A group name: `"projects/{project_id_or_number}/groups/{group_id}"`.
   *  Returns groups that are ancestors of the specified group.
   *  The groups are returned in order, starting with the immediate parent and
   *  ending with the most distant ancestor.  If the specified group has no
   *  immediate parent, the results are empty.
   */
  // const ancestorsOfGroup ='abc123'
  /**
   *  A group name: `"projects/{project_id_or_number}/groups/{group_id}"`.
   *  Returns the descendants of the specified group.  This is a superset of
   *  the results returned by the `childrenOfGroup` filter, and includes
   *  children-of-children, and so forth.
   */
  // const descendantsOfGroup ='abc123'
  /**
   *  A positive number that is the maximum number of results to return.
   */
  // const pageSize =1234
  /**
   *  If this field is not empty then it must contain the `nextPageToken` value
   *  returned by a previous call to this method.  Using this field causes the
   *  method to return additional results from the previous method call.
   */
  // const pageToken ='abc123'

  // Imports the Monitoring library
  const {GroupServiceClient} = require('monitoring');

  // Instantiates a client
  const monitoringClient = new GroupServiceClient();

  async function listGroups() {
    // Construct request
    const request = {
      name,
    };

    // Run request
    const iterable = await monitoringClient.listGroupsAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  listGroups();
  // [END monitoring_list_groups_sample]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
