


'use strict';

function main() {
  // [START monitoring_list_uptime_check_ips_sample]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  The maximum number of results to return in a single response. The server
   *  may further constrain the maximum number of results returned in a single
   *  page. If the page_size is <=0, the server will decide the number of results
   *  to be returned.
   *  NOTE: this field is not yet implemented
   */
  // const pageSize =1234
  /**
   *  If this field is not empty then it must contain the `nextPageToken` value
   *  returned by a previous call to this method.  Using this field causes the
   *  method to return more results from the previous method call.
   *  NOTE: this field is not yet implemented
   */
  // const pageToken ='abc123'

  // Imports the Monitoring library
  const {UptimeCheckServiceClient} = require('');

  // Instantiates a client
  const monitoringClient = new UptimeCheckServiceClient();

  async function listUptimeCheckIps() {
    // Construct request
    const request = {
    };

    // Run request
    const iterable = await monitoringClient.listUptimeCheckIpsAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  listUptimeCheckIps();
  // [END monitoring_list_uptime_check_ips_sample]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
