
'use strict';

function main() {
  // [START monitoring_update_uptime_check_config_sample]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Optional. If present, only the listed fields in the current Uptime check
   *  configuration are updated with values from the new configuration. If this
   *  field is empty, then the current configuration is completely replaced with
   *  the new configuration.
   */
  // const updateMask = ''
  /**
   *  Required. If an `updateMask` has been specified, this field gives
   *  the values for the set of fields mentioned in the `updateMask`. If an
   *  `updateMask` has not been given, this Uptime check configuration replaces
   *  the current configuration. If a field is mentioned in `updateMask` but
   *  the corresonding field is omitted in this partial Uptime check
   *  configuration, it has the effect of deleting/clearing the field from the
   *  configuration on the server.
   *  The following fields can be updated: `display_name`,
   *  `http_check`, `tcp_check`, `timeout`, `content_matchers`, and
   *  `selected_regions`.
   */
  // const uptimeCheckConfig = ''

  // Imports the Monitoring library
  const {UptimeCheckServiceClient} = require('monitoring').v3;

  // Instantiates a client
  const monitoringClient = new UptimeCheckServiceClient();

  async function updateUptimeCheckConfig() {
    // Construct request
    const request = {
      uptimeCheckConfig,
    };

    // Run request
    const response = await monitoringClient.updateUptimeCheckConfig(request);
    console.log(`Response: ${JSON.stringify(response)}`);
  }

  updateUptimeCheckConfig();
  // [END monitoring_update_uptime_check_config_sample]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
