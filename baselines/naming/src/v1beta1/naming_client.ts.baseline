// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, GaxCall} from 'google-gax';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/naming_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './naming_client_config.json';
import { operationsProtos } from 'google-gax';
const version = require('../../../package.json').version;

/**
 *  Fake service to test various possible naming problems.
 * @class
 * @memberof v1beta1
 */
export class NamingClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  namingStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of NamingClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof NamingClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath1;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port1;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath1 && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes1;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize1() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath1;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath1) {
      this.auth.defaultScopes = staticMembers.scopes1;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      projectExportPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/exports/{export}'
      ),
      projectPackagePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/packages/{package}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      paginatedMethod:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'content')
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.

    this.operationsClient = this._gaxModule.lro({
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    }).operationsClient(opts);
    const longRunningResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const longRunningMetadata = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      longRunning: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        longRunningResponse.decode.bind(longRunningResponse),
        longRunningMetadata.decode.bind(longRunningMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.naming.v1beta1.Naming', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = gax.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize1() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize1() {
    // If the client stub promise is already initialized, return immediately.
    if (this.namingStub) {
      return this.namingStub;
    }

    // Put together the "service stub" for
    // google.naming.v1beta1.Naming.
    this.namingStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.naming.v1beta1.Naming') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.naming.v1beta1.Naming,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const namingStubMethods =
        ['paginatedMethod', 'paginatedMethodStream', 'paginatedMethodAsync', 'longRunning', 'checkLongRunningProgress', 'initialize', 'servicePath', 'apiEndpoint', 'port', 'scopes', 'getProjectId', 'getReservedWord'];
    for (const methodName of namingStubMethods) {
      const callPromise = this.namingStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.namingStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath1() {
    return 'localhost';
  }

  /**
   * The DNS address for this API service - same as servicePath1(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint1() {
    return 'localhost';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port1() {
    return 1234;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes1() {
    return [];
  }

  getProjectId1(): Promise<string>;
  getProjectId1(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId1(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/naming.paginated_method_stream.js</caption>
 * region_tag:localhost_v1beta1_generated_Naming_PaginatedMethodStream_async
 */
  paginatedMethodStream(
      request?: protos.google.protobuf.IEmpty,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>;
  paginatedMethodStream(
      request: protos.google.protobuf.IEmpty,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  paginatedMethodStream(
      request: protos.google.protobuf.IEmpty,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  paginatedMethodStream(
      request?: protos.google.protobuf.IEmpty,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize1();
    return this.innerApiCalls.paginatedMethodStream(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/naming.paginated_method_async.js</caption>
 * region_tag:localhost_v1beta1_generated_Naming_PaginatedMethodAsync_async
 */
  paginatedMethodAsync(
      request?: protos.google.protobuf.IEmpty,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>;
  paginatedMethodAsync(
      request: protos.google.protobuf.IEmpty,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  paginatedMethodAsync(
      request: protos.google.protobuf.IEmpty,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  paginatedMethodAsync(
      request?: protos.google.protobuf.IEmpty,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize1();
    return this.innerApiCalls.paginatedMethodAsync(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/naming.check_long_running_progress.js</caption>
 * region_tag:localhost_v1beta1_generated_Naming_CheckLongRunningProgress_async
 */
  checkLongRunningProgress(
      request?: protos.google.protobuf.IEmpty,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>;
  checkLongRunningProgress(
      request: protos.google.protobuf.IEmpty,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  checkLongRunningProgress(
      request: protos.google.protobuf.IEmpty,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  checkLongRunningProgress(
      request?: protos.google.protobuf.IEmpty,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize1();
    return this.innerApiCalls.checkLongRunningProgress(request, options, callback);
  }
/**
 * Problem #3: RPCs that conflict with auto-generated methods
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/naming.initialize.js</caption>
 * region_tag:localhost_v1beta1_generated_Naming_Initialize_async
 */
  initialize(
      request?: protos.google.protobuf.IEmpty,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>;
  initialize(
      request: protos.google.protobuf.IEmpty,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  initialize(
      request: protos.google.protobuf.IEmpty,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  initialize(
      request?: protos.google.protobuf.IEmpty,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize1();
    return this.innerApiCalls.initialize(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/naming.service_path.js</caption>
 * region_tag:localhost_v1beta1_generated_Naming_ServicePath_async
 */
  servicePath(
      request?: protos.google.protobuf.IEmpty,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>;
  servicePath(
      request: protos.google.protobuf.IEmpty,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  servicePath(
      request: protos.google.protobuf.IEmpty,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  servicePath(
      request?: protos.google.protobuf.IEmpty,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize1();
    return this.innerApiCalls.servicePath(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/naming.api_endpoint.js</caption>
 * region_tag:localhost_v1beta1_generated_Naming_ApiEndpoint_async
 */
  apiEndpoint(
      request?: protos.google.protobuf.IEmpty,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>;
  apiEndpoint(
      request: protos.google.protobuf.IEmpty,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  apiEndpoint(
      request: protos.google.protobuf.IEmpty,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  apiEndpoint(
      request?: protos.google.protobuf.IEmpty,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize1();
    return this.innerApiCalls.apiEndpoint(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/naming.port.js</caption>
 * region_tag:localhost_v1beta1_generated_Naming_Port_async
 */
  port(
      request?: protos.google.protobuf.IEmpty,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>;
  port(
      request: protos.google.protobuf.IEmpty,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  port(
      request: protos.google.protobuf.IEmpty,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  port(
      request?: protos.google.protobuf.IEmpty,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize1();
    return this.innerApiCalls.port(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/naming.scopes.js</caption>
 * region_tag:localhost_v1beta1_generated_Naming_Scopes_async
 */
  scopes(
      request?: protos.google.protobuf.IEmpty,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>;
  scopes(
      request: protos.google.protobuf.IEmpty,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  scopes(
      request: protos.google.protobuf.IEmpty,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  scopes(
      request?: protos.google.protobuf.IEmpty,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize1();
    return this.innerApiCalls.scopes(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/naming.get_project_id.js</caption>
 * region_tag:localhost_v1beta1_generated_Naming_getProjectId_async
 */
  getProjectId(
      request?: protos.google.protobuf.IEmpty,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>;
  getProjectId(
      request: protos.google.protobuf.IEmpty,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  getProjectId(
      request: protos.google.protobuf.IEmpty,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>): void;
  getProjectId(
      request?: protos.google.protobuf.IEmpty,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.protobuf.IEmpty|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IEmpty|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize1();
    return this.innerApiCalls.getProjectId(request, options, callback);
  }
/**
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.word
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ReservedWord]{@link google.naming.v1beta1.ReservedWord}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/naming.get_reserved_word.js</caption>
 * region_tag:localhost_v1beta1_generated_Naming_getReservedWord_async
 */
  getReservedWord(
      request?: protos.google.naming.v1beta1.IGetReservedWordRequest,
      options?: CallOptions):
      Promise<[
        protos.google.naming.v1beta1.IReservedWord,
        protos.google.naming.v1beta1.IGetReservedWordRequest|undefined, {}|undefined
      ]>;
  getReservedWord(
      request: protos.google.naming.v1beta1.IGetReservedWordRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.naming.v1beta1.IReservedWord,
          protos.google.naming.v1beta1.IGetReservedWordRequest|null|undefined,
          {}|null|undefined>): void;
  getReservedWord(
      request: protos.google.naming.v1beta1.IGetReservedWordRequest,
      callback: Callback<
          protos.google.naming.v1beta1.IReservedWord,
          protos.google.naming.v1beta1.IGetReservedWordRequest|null|undefined,
          {}|null|undefined>): void;
  getReservedWord(
      request?: protos.google.naming.v1beta1.IGetReservedWordRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.naming.v1beta1.IReservedWord,
          protos.google.naming.v1beta1.IGetReservedWordRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.naming.v1beta1.IReservedWord,
          protos.google.naming.v1beta1.IGetReservedWordRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.naming.v1beta1.IReservedWord,
        protos.google.naming.v1beta1.IGetReservedWordRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize1();
    return this.innerApiCalls.getReservedWord(request, options, callback);
  }

/**
 * Problem #2: long running method generates extra method check*Progress()
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/naming.long_running.js</caption>
 * region_tag:localhost_v1beta1_generated_Naming_LongRunning_async
 */
  longRunning(
      request?: protos.google.protobuf.IEmpty,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IEmpty>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  longRunning(
      request: protos.google.protobuf.IEmpty,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IEmpty>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  longRunning(
      request: protos.google.protobuf.IEmpty,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IEmpty>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  longRunning(
      request?: protos.google.protobuf.IEmpty,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IEmpty>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IEmpty>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IEmpty>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize1();
    return this.innerApiCalls.longRunning(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `longRunning()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/naming.long_running.js</caption>
 * region_tag:localhost_v1beta1_generated_Naming_LongRunning_async
 */
  async checkLongRunningProgress1(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.protobuf.Empty>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.longRunning, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.protobuf.Empty>;
  }
 /**
 * Problem #1: paginated method generates extra methods *Stream() and
 * *Async(), which might conflict with unary methods with the same names.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.Empty} request.content
 * @param {number} request.pageSize
 * @param {string} request.pageToken
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Empty]{@link google.protobuf.Empty}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `paginatedMethodAsync1()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  paginatedMethod(
      request?: protos.google.naming.v1beta1.IPaginatedMethodRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty[],
        protos.google.naming.v1beta1.IPaginatedMethodRequest|null,
        protos.google.naming.v1beta1.IPaginatedMethodResponse
      ]>;
  paginatedMethod(
      request: protos.google.naming.v1beta1.IPaginatedMethodRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.naming.v1beta1.IPaginatedMethodRequest,
          protos.google.naming.v1beta1.IPaginatedMethodResponse|null|undefined,
          protos.google.protobuf.IEmpty>): void;
  paginatedMethod(
      request: protos.google.naming.v1beta1.IPaginatedMethodRequest,
      callback: PaginationCallback<
          protos.google.naming.v1beta1.IPaginatedMethodRequest,
          protos.google.naming.v1beta1.IPaginatedMethodResponse|null|undefined,
          protos.google.protobuf.IEmpty>): void;
  paginatedMethod(
      request?: protos.google.naming.v1beta1.IPaginatedMethodRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.naming.v1beta1.IPaginatedMethodRequest,
          protos.google.naming.v1beta1.IPaginatedMethodResponse|null|undefined,
          protos.google.protobuf.IEmpty>,
      callback?: PaginationCallback<
          protos.google.naming.v1beta1.IPaginatedMethodRequest,
          protos.google.naming.v1beta1.IPaginatedMethodResponse|null|undefined,
          protos.google.protobuf.IEmpty>):
      Promise<[
        protos.google.protobuf.IEmpty[],
        protos.google.naming.v1beta1.IPaginatedMethodRequest|null,
        protos.google.naming.v1beta1.IPaginatedMethodResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize1();
    return this.innerApiCalls.paginatedMethod(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.Empty} request.content
 * @param {number} request.pageSize
 * @param {string} request.pageToken
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Empty]{@link google.protobuf.Empty} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `paginatedMethodAsync1()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  paginatedMethodStream1(
      request?: protos.google.naming.v1beta1.IPaginatedMethodRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['paginatedMethod'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize1();
    return this.descriptors.page.paginatedMethod.createStream(
      this.innerApiCalls.paginatedMethod as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `paginatedMethod`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.Empty} request.content
 * @param {number} request.pageSize
 * @param {string} request.pageToken
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Empty]{@link google.protobuf.Empty}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/naming.paginated_method.js</caption>
 * region_tag:localhost_v1beta1_generated_Naming_PaginatedMethod_async
 */
  paginatedMethodAsync1(
      request?: protos.google.naming.v1beta1.IPaginatedMethodRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.protobuf.IEmpty>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['paginatedMethod'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize1();
    return this.descriptors.page.paginatedMethod.asyncIterate(
      this.innerApiCalls['paginatedMethod'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.protobuf.IEmpty>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified projectExport resource name string.
   *
   * @param {string} project
   * @param {string} exportParam
   * @returns {string} Resource name string.
   */
  projectExportPath(project:string,exportParam:string) {
    return this.pathTemplates.projectExportPathTemplate.render({
      project: project,
      export: exportParam,
    });
  }

  /**
   * Parse the project from ProjectExport resource.
   *
   * @param {string} projectExportName
   *   A fully-qualified path representing project_export resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectExportName(projectExportName: string) {
    return this.pathTemplates.projectExportPathTemplate.match(projectExportName).project;
  }

  /**
   * Parse the export from ProjectExport resource.
   *
   * @param {string} projectExportName
   *   A fully-qualified path representing project_export resource.
   * @returns {string} A string representing the export.
   */
  matchExportFromProjectExportName(projectExportName: string) {
    return this.pathTemplates.projectExportPathTemplate.match(projectExportName).export;
  }

  /**
   * Return a fully-qualified projectPackage resource name string.
   *
   * @param {string} project
   * @param {string} packageParam
   * @returns {string} Resource name string.
   */
  projectPackagePath(project:string,packageParam:string) {
    return this.pathTemplates.projectPackagePathTemplate.render({
      project: project,
      package: packageParam,
    });
  }

  /**
   * Parse the project from ProjectPackage resource.
   *
   * @param {string} projectPackageName
   *   A fully-qualified path representing project_package resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectPackageName(projectPackageName: string) {
    return this.pathTemplates.projectPackagePathTemplate.match(projectPackageName).project;
  }

  /**
   * Parse the package from ProjectPackage resource.
   *
   * @param {string} projectPackageName
   *   A fully-qualified path representing project_package resource.
   * @returns {string} A string representing the package.
   */
  matchPackageFromProjectPackageName(projectPackageName: string) {
    return this.pathTemplates.projectPackagePathTemplate.match(projectPackageName).package;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.namingStub && !this._terminated) {
      return this.namingStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
