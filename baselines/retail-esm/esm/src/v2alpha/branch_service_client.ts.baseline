// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions} from 'google-gax';

// @ts-ignore
import type * as protos from '../../../protos/protos.js';
import * as branch_service_client_config from './branch_service_client_config.json';
import fs from 'fs';
import path from 'path';
import {fileURLToPath} from 'url';
import {getJSON} from '../json-helper.cjs';
// @ts-ignore
const dirname = path.dirname(fileURLToPath(import.meta.url));

/**
 * Client JSON configuration object, loaded from
 * `src/v2alpha/branch_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = getJSON(
  path.join(dirname, 'branch_service_client_config.json')
);

const jsonProtos = getJSON(
  path.join(dirname, '..', '..', '..', 'protos/protos.json')
);
import {loggingUtils as logging, decodeAnyProtosInArray} from 'google-gax';
const version = getJSON(
  path.join(dirname, '..', '..', '..', '..', 'package.json')
).version;

/**
 *  Service for {@link protos.google.cloud.retail.v2alpha.Branch|Branch} Management
 *
 *  {@link protos.google.cloud.retail.v2alpha.Branch|Branch}es are automatically created when
 *  a {@link protos.google.cloud.retail.v2alpha.Catalog|Catalog} is created. There are fixed
 *  three branches in each catalog, and may use
 *  {@link protos.google.cloud.retail.v2alpha.BranchService.ListBranches|ListBranches} method
 *  to get the details of all branches.
 * @class
 * @memberof v2alpha
 */
export class BranchServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('retail');
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  branchServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of BranchServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new BranchServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof BranchServiceClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'retail.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = gax as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Add ESM headers
    const isEsm = true;
    const isEsmString = isEsm ? '-esm' : '-cjs';
    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/{process.versions.node}${isEsmString}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }

    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos as gax.protobuf.INamespace);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      alertConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/alertConfig'
      ),
      attributesConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/catalogs/{catalog}/attributesConfig'
      ),
      branchPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/catalogs/{catalog}/branches/{branch}'
      ),
      catalogPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/catalogs/{catalog}'
      ),
      completionConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/catalogs/{catalog}/completionConfig'
      ),
      controlPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/catalogs/{catalog}/controls/{control}'
      ),
      loggingConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/loggingConfig'
      ),
      merchantCenterAccountLinkPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/catalogs/{catalog}/merchantCenterAccountLinks/{merchant_center_account_link}'
      ),
      modelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/catalogs/{catalog}/models/{model}'
      ),
      productPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/catalogs/{catalog}/branches/{branch}/products/{product}'
      ),
      retailProjectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/retailProject'
      ),
      servingConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/catalogs/{catalog}/servingConfigs/{serving_config}'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.retail.v2alpha.BranchService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.branchServiceStub) {
      return this.branchServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.retail.v2alpha.BranchService.
    this.branchServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.retail.v2alpha.BranchService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.retail.v2alpha.BranchService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const branchServiceStubMethods =
        ['listBranches', 'getBranch'];
    for (const methodName of branchServiceStubMethods) {
      const callPromise = this.branchServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.branchServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'retail.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath,
   * exists for compatibility reasons.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'retail.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Lists all instances of {@link protos.google.cloud.retail.v2alpha.Branch|Branch} under
 * the specified parent {@link protos.google.cloud.retail.v2alpha.Catalog|Catalog}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent catalog resource name.
 * @param {google.cloud.retail.v2alpha.BranchView} request.view
 *   The view to apply to the returned
 *   {@link protos.google.cloud.retail.v2alpha.Branch|Branch}. Defaults to
 *   [Branch.BranchView.BASIC] if unspecified.
 *   See documentation of fields of {@link protos.google.cloud.retail.v2alpha.Branch|Branch}
 *   to find what fields are excluded from BASIC view.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.retail.v2alpha.ListBranchesResponse|ListBranchesResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2alpha/branch_service.list_branches.js</caption>
 * region_tag:retail_v2alpha_generated_BranchService_ListBranches_async
 */
  listBranches(
      request?: protos.google.cloud.retail.v2alpha.IListBranchesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.retail.v2alpha.IListBranchesResponse,
        protos.google.cloud.retail.v2alpha.IListBranchesRequest|undefined, {}|undefined
      ]>;
  listBranches(
      request: protos.google.cloud.retail.v2alpha.IListBranchesRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.retail.v2alpha.IListBranchesResponse,
          protos.google.cloud.retail.v2alpha.IListBranchesRequest|null|undefined,
          {}|null|undefined>): void;
  listBranches(
      request: protos.google.cloud.retail.v2alpha.IListBranchesRequest,
      callback: Callback<
          protos.google.cloud.retail.v2alpha.IListBranchesResponse,
          protos.google.cloud.retail.v2alpha.IListBranchesRequest|null|undefined,
          {}|null|undefined>): void;
  listBranches(
      request?: protos.google.cloud.retail.v2alpha.IListBranchesRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.retail.v2alpha.IListBranchesResponse,
          protos.google.cloud.retail.v2alpha.IListBranchesRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.retail.v2alpha.IListBranchesResponse,
          protos.google.cloud.retail.v2alpha.IListBranchesRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.retail.v2alpha.IListBranchesResponse,
        protos.google.cloud.retail.v2alpha.IListBranchesRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent?.toString() ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('listBranches request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.retail.v2alpha.IListBranchesResponse,
        protos.google.cloud.retail.v2alpha.IListBranchesRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('listBranches response %j', response);
          callback!(error, response, options, rawResponse);
        }
      : undefined;
    return this.innerApiCalls.listBranches(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.retail.v2alpha.IListBranchesResponse,
        protos.google.cloud.retail.v2alpha.IListBranchesRequest|undefined, {}|undefined
      ]) => {
        this._log.info('listBranches response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Retrieves a {@link protos.google.cloud.retail.v2alpha.Branch|Branch}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the branch to retrieve.
 *   Format:
 *   `projects/* /locations/global/catalogs/default_catalog/branches/some_branch_id`.
 *
 *   "default_branch" can be used as a special branch_id, it returns the
 *   default branch that has been set for the catalog.
 * @param {google.cloud.retail.v2alpha.BranchView} request.view
 *   The view to apply to the returned
 *   {@link protos.google.cloud.retail.v2alpha.Branch|Branch}. Defaults to
 *   [Branch.BranchView.BASIC] if unspecified.
 *   See documentation of fields of {@link protos.google.cloud.retail.v2alpha.Branch|Branch}
 *   to find what fields are excluded from BASIC view.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.retail.v2alpha.Branch|Branch}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2alpha/branch_service.get_branch.js</caption>
 * region_tag:retail_v2alpha_generated_BranchService_GetBranch_async
 */
  getBranch(
      request?: protos.google.cloud.retail.v2alpha.IGetBranchRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.retail.v2alpha.IBranch,
        protos.google.cloud.retail.v2alpha.IGetBranchRequest|undefined, {}|undefined
      ]>;
  getBranch(
      request: protos.google.cloud.retail.v2alpha.IGetBranchRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.retail.v2alpha.IBranch,
          protos.google.cloud.retail.v2alpha.IGetBranchRequest|null|undefined,
          {}|null|undefined>): void;
  getBranch(
      request: protos.google.cloud.retail.v2alpha.IGetBranchRequest,
      callback: Callback<
          protos.google.cloud.retail.v2alpha.IBranch,
          protos.google.cloud.retail.v2alpha.IGetBranchRequest|null|undefined,
          {}|null|undefined>): void;
  getBranch(
      request?: protos.google.cloud.retail.v2alpha.IGetBranchRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.retail.v2alpha.IBranch,
          protos.google.cloud.retail.v2alpha.IGetBranchRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.retail.v2alpha.IBranch,
          protos.google.cloud.retail.v2alpha.IGetBranchRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.retail.v2alpha.IBranch,
        protos.google.cloud.retail.v2alpha.IGetBranchRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name?.toString() ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getBranch request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.retail.v2alpha.IBranch,
        protos.google.cloud.retail.v2alpha.IGetBranchRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getBranch response %j', response);
          callback!(error, response, options, rawResponse);
        }
      : undefined;
    return this.innerApiCalls.getBranch(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.retail.v2alpha.IBranch,
        protos.google.cloud.retail.v2alpha.IGetBranchRequest|undefined, {}|undefined
      ]) => {
        this._log.info('getBranch response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified alertConfig resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  alertConfigPath(project:string) {
    return this.pathTemplates.alertConfigPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from AlertConfig resource.
   *
   * @param {string} alertConfigName
   *   A fully-qualified path representing AlertConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAlertConfigName(alertConfigName: string) {
    return this.pathTemplates.alertConfigPathTemplate.match(alertConfigName).project;
  }

  /**
   * Return a fully-qualified attributesConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} catalog
   * @returns {string} Resource name string.
   */
  attributesConfigPath(project:string,location:string,catalog:string) {
    return this.pathTemplates.attributesConfigPathTemplate.render({
      project: project,
      location: location,
      catalog: catalog,
    });
  }

  /**
   * Parse the project from AttributesConfig resource.
   *
   * @param {string} attributesConfigName
   *   A fully-qualified path representing AttributesConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAttributesConfigName(attributesConfigName: string) {
    return this.pathTemplates.attributesConfigPathTemplate.match(attributesConfigName).project;
  }

  /**
   * Parse the location from AttributesConfig resource.
   *
   * @param {string} attributesConfigName
   *   A fully-qualified path representing AttributesConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAttributesConfigName(attributesConfigName: string) {
    return this.pathTemplates.attributesConfigPathTemplate.match(attributesConfigName).location;
  }

  /**
   * Parse the catalog from AttributesConfig resource.
   *
   * @param {string} attributesConfigName
   *   A fully-qualified path representing AttributesConfig resource.
   * @returns {string} A string representing the catalog.
   */
  matchCatalogFromAttributesConfigName(attributesConfigName: string) {
    return this.pathTemplates.attributesConfigPathTemplate.match(attributesConfigName).catalog;
  }

  /**
   * Return a fully-qualified branch resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} catalog
   * @param {string} branch
   * @returns {string} Resource name string.
   */
  branchPath(project:string,location:string,catalog:string,branch:string) {
    return this.pathTemplates.branchPathTemplate.render({
      project: project,
      location: location,
      catalog: catalog,
      branch: branch,
    });
  }

  /**
   * Parse the project from Branch resource.
   *
   * @param {string} branchName
   *   A fully-qualified path representing Branch resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBranchName(branchName: string) {
    return this.pathTemplates.branchPathTemplate.match(branchName).project;
  }

  /**
   * Parse the location from Branch resource.
   *
   * @param {string} branchName
   *   A fully-qualified path representing Branch resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBranchName(branchName: string) {
    return this.pathTemplates.branchPathTemplate.match(branchName).location;
  }

  /**
   * Parse the catalog from Branch resource.
   *
   * @param {string} branchName
   *   A fully-qualified path representing Branch resource.
   * @returns {string} A string representing the catalog.
   */
  matchCatalogFromBranchName(branchName: string) {
    return this.pathTemplates.branchPathTemplate.match(branchName).catalog;
  }

  /**
   * Parse the branch from Branch resource.
   *
   * @param {string} branchName
   *   A fully-qualified path representing Branch resource.
   * @returns {string} A string representing the branch.
   */
  matchBranchFromBranchName(branchName: string) {
    return this.pathTemplates.branchPathTemplate.match(branchName).branch;
  }

  /**
   * Return a fully-qualified catalog resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} catalog
   * @returns {string} Resource name string.
   */
  catalogPath(project:string,location:string,catalog:string) {
    return this.pathTemplates.catalogPathTemplate.render({
      project: project,
      location: location,
      catalog: catalog,
    });
  }

  /**
   * Parse the project from Catalog resource.
   *
   * @param {string} catalogName
   *   A fully-qualified path representing Catalog resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCatalogName(catalogName: string) {
    return this.pathTemplates.catalogPathTemplate.match(catalogName).project;
  }

  /**
   * Parse the location from Catalog resource.
   *
   * @param {string} catalogName
   *   A fully-qualified path representing Catalog resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCatalogName(catalogName: string) {
    return this.pathTemplates.catalogPathTemplate.match(catalogName).location;
  }

  /**
   * Parse the catalog from Catalog resource.
   *
   * @param {string} catalogName
   *   A fully-qualified path representing Catalog resource.
   * @returns {string} A string representing the catalog.
   */
  matchCatalogFromCatalogName(catalogName: string) {
    return this.pathTemplates.catalogPathTemplate.match(catalogName).catalog;
  }

  /**
   * Return a fully-qualified completionConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} catalog
   * @returns {string} Resource name string.
   */
  completionConfigPath(project:string,location:string,catalog:string) {
    return this.pathTemplates.completionConfigPathTemplate.render({
      project: project,
      location: location,
      catalog: catalog,
    });
  }

  /**
   * Parse the project from CompletionConfig resource.
   *
   * @param {string} completionConfigName
   *   A fully-qualified path representing CompletionConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCompletionConfigName(completionConfigName: string) {
    return this.pathTemplates.completionConfigPathTemplate.match(completionConfigName).project;
  }

  /**
   * Parse the location from CompletionConfig resource.
   *
   * @param {string} completionConfigName
   *   A fully-qualified path representing CompletionConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCompletionConfigName(completionConfigName: string) {
    return this.pathTemplates.completionConfigPathTemplate.match(completionConfigName).location;
  }

  /**
   * Parse the catalog from CompletionConfig resource.
   *
   * @param {string} completionConfigName
   *   A fully-qualified path representing CompletionConfig resource.
   * @returns {string} A string representing the catalog.
   */
  matchCatalogFromCompletionConfigName(completionConfigName: string) {
    return this.pathTemplates.completionConfigPathTemplate.match(completionConfigName).catalog;
  }

  /**
   * Return a fully-qualified control resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} catalog
   * @param {string} control
   * @returns {string} Resource name string.
   */
  controlPath(project:string,location:string,catalog:string,control:string) {
    return this.pathTemplates.controlPathTemplate.render({
      project: project,
      location: location,
      catalog: catalog,
      control: control,
    });
  }

  /**
   * Parse the project from Control resource.
   *
   * @param {string} controlName
   *   A fully-qualified path representing Control resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromControlName(controlName: string) {
    return this.pathTemplates.controlPathTemplate.match(controlName).project;
  }

  /**
   * Parse the location from Control resource.
   *
   * @param {string} controlName
   *   A fully-qualified path representing Control resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromControlName(controlName: string) {
    return this.pathTemplates.controlPathTemplate.match(controlName).location;
  }

  /**
   * Parse the catalog from Control resource.
   *
   * @param {string} controlName
   *   A fully-qualified path representing Control resource.
   * @returns {string} A string representing the catalog.
   */
  matchCatalogFromControlName(controlName: string) {
    return this.pathTemplates.controlPathTemplate.match(controlName).catalog;
  }

  /**
   * Parse the control from Control resource.
   *
   * @param {string} controlName
   *   A fully-qualified path representing Control resource.
   * @returns {string} A string representing the control.
   */
  matchControlFromControlName(controlName: string) {
    return this.pathTemplates.controlPathTemplate.match(controlName).control;
  }

  /**
   * Return a fully-qualified loggingConfig resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  loggingConfigPath(project:string) {
    return this.pathTemplates.loggingConfigPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from LoggingConfig resource.
   *
   * @param {string} loggingConfigName
   *   A fully-qualified path representing LoggingConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLoggingConfigName(loggingConfigName: string) {
    return this.pathTemplates.loggingConfigPathTemplate.match(loggingConfigName).project;
  }

  /**
   * Return a fully-qualified merchantCenterAccountLink resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} catalog
   * @param {string} merchant_center_account_link
   * @returns {string} Resource name string.
   */
  merchantCenterAccountLinkPath(project:string,location:string,catalog:string,merchantCenterAccountLink:string) {
    return this.pathTemplates.merchantCenterAccountLinkPathTemplate.render({
      project: project,
      location: location,
      catalog: catalog,
      merchant_center_account_link: merchantCenterAccountLink,
    });
  }

  /**
   * Parse the project from MerchantCenterAccountLink resource.
   *
   * @param {string} merchantCenterAccountLinkName
   *   A fully-qualified path representing MerchantCenterAccountLink resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromMerchantCenterAccountLinkName(merchantCenterAccountLinkName: string) {
    return this.pathTemplates.merchantCenterAccountLinkPathTemplate.match(merchantCenterAccountLinkName).project;
  }

  /**
   * Parse the location from MerchantCenterAccountLink resource.
   *
   * @param {string} merchantCenterAccountLinkName
   *   A fully-qualified path representing MerchantCenterAccountLink resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromMerchantCenterAccountLinkName(merchantCenterAccountLinkName: string) {
    return this.pathTemplates.merchantCenterAccountLinkPathTemplate.match(merchantCenterAccountLinkName).location;
  }

  /**
   * Parse the catalog from MerchantCenterAccountLink resource.
   *
   * @param {string} merchantCenterAccountLinkName
   *   A fully-qualified path representing MerchantCenterAccountLink resource.
   * @returns {string} A string representing the catalog.
   */
  matchCatalogFromMerchantCenterAccountLinkName(merchantCenterAccountLinkName: string) {
    return this.pathTemplates.merchantCenterAccountLinkPathTemplate.match(merchantCenterAccountLinkName).catalog;
  }

  /**
   * Parse the merchant_center_account_link from MerchantCenterAccountLink resource.
   *
   * @param {string} merchantCenterAccountLinkName
   *   A fully-qualified path representing MerchantCenterAccountLink resource.
   * @returns {string} A string representing the merchant_center_account_link.
   */
  matchMerchantCenterAccountLinkFromMerchantCenterAccountLinkName(merchantCenterAccountLinkName: string) {
    return this.pathTemplates.merchantCenterAccountLinkPathTemplate.match(merchantCenterAccountLinkName).merchant_center_account_link;
  }

  /**
   * Return a fully-qualified model resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} catalog
   * @param {string} model
   * @returns {string} Resource name string.
   */
  modelPath(project:string,location:string,catalog:string,model:string) {
    return this.pathTemplates.modelPathTemplate.render({
      project: project,
      location: location,
      catalog: catalog,
      model: model,
    });
  }

  /**
   * Parse the project from Model resource.
   *
   * @param {string} modelName
   *   A fully-qualified path representing Model resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromModelName(modelName: string) {
    return this.pathTemplates.modelPathTemplate.match(modelName).project;
  }

  /**
   * Parse the location from Model resource.
   *
   * @param {string} modelName
   *   A fully-qualified path representing Model resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromModelName(modelName: string) {
    return this.pathTemplates.modelPathTemplate.match(modelName).location;
  }

  /**
   * Parse the catalog from Model resource.
   *
   * @param {string} modelName
   *   A fully-qualified path representing Model resource.
   * @returns {string} A string representing the catalog.
   */
  matchCatalogFromModelName(modelName: string) {
    return this.pathTemplates.modelPathTemplate.match(modelName).catalog;
  }

  /**
   * Parse the model from Model resource.
   *
   * @param {string} modelName
   *   A fully-qualified path representing Model resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromModelName(modelName: string) {
    return this.pathTemplates.modelPathTemplate.match(modelName).model;
  }

  /**
   * Return a fully-qualified product resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} catalog
   * @param {string} branch
   * @param {string} product
   * @returns {string} Resource name string.
   */
  productPath(project:string,location:string,catalog:string,branch:string,product:string) {
    return this.pathTemplates.productPathTemplate.render({
      project: project,
      location: location,
      catalog: catalog,
      branch: branch,
      product: product,
    });
  }

  /**
   * Parse the project from Product resource.
   *
   * @param {string} productName
   *   A fully-qualified path representing Product resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProductName(productName: string) {
    return this.pathTemplates.productPathTemplate.match(productName).project;
  }

  /**
   * Parse the location from Product resource.
   *
   * @param {string} productName
   *   A fully-qualified path representing Product resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProductName(productName: string) {
    return this.pathTemplates.productPathTemplate.match(productName).location;
  }

  /**
   * Parse the catalog from Product resource.
   *
   * @param {string} productName
   *   A fully-qualified path representing Product resource.
   * @returns {string} A string representing the catalog.
   */
  matchCatalogFromProductName(productName: string) {
    return this.pathTemplates.productPathTemplate.match(productName).catalog;
  }

  /**
   * Parse the branch from Product resource.
   *
   * @param {string} productName
   *   A fully-qualified path representing Product resource.
   * @returns {string} A string representing the branch.
   */
  matchBranchFromProductName(productName: string) {
    return this.pathTemplates.productPathTemplate.match(productName).branch;
  }

  /**
   * Parse the product from Product resource.
   *
   * @param {string} productName
   *   A fully-qualified path representing Product resource.
   * @returns {string} A string representing the product.
   */
  matchProductFromProductName(productName: string) {
    return this.pathTemplates.productPathTemplate.match(productName).product;
  }

  /**
   * Return a fully-qualified retailProject resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  retailProjectPath(project:string) {
    return this.pathTemplates.retailProjectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from RetailProject resource.
   *
   * @param {string} retailProjectName
   *   A fully-qualified path representing RetailProject resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRetailProjectName(retailProjectName: string) {
    return this.pathTemplates.retailProjectPathTemplate.match(retailProjectName).project;
  }

  /**
   * Return a fully-qualified servingConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} catalog
   * @param {string} serving_config
   * @returns {string} Resource name string.
   */
  servingConfigPath(project:string,location:string,catalog:string,servingConfig:string) {
    return this.pathTemplates.servingConfigPathTemplate.render({
      project: project,
      location: location,
      catalog: catalog,
      serving_config: servingConfig,
    });
  }

  /**
   * Parse the project from ServingConfig resource.
   *
   * @param {string} servingConfigName
   *   A fully-qualified path representing ServingConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromServingConfigName(servingConfigName: string) {
    return this.pathTemplates.servingConfigPathTemplate.match(servingConfigName).project;
  }

  /**
   * Parse the location from ServingConfig resource.
   *
   * @param {string} servingConfigName
   *   A fully-qualified path representing ServingConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromServingConfigName(servingConfigName: string) {
    return this.pathTemplates.servingConfigPathTemplate.match(servingConfigName).location;
  }

  /**
   * Parse the catalog from ServingConfig resource.
   *
   * @param {string} servingConfigName
   *   A fully-qualified path representing ServingConfig resource.
   * @returns {string} A string representing the catalog.
   */
  matchCatalogFromServingConfigName(servingConfigName: string) {
    return this.pathTemplates.servingConfigPathTemplate.match(servingConfigName).catalog;
  }

  /**
   * Parse the serving_config from ServingConfig resource.
   *
   * @param {string} servingConfigName
   *   A fully-qualified path representing ServingConfig resource.
   * @returns {string} A string representing the serving_config.
   */
  matchServingConfigFromServingConfigName(servingConfigName: string) {
    return this.pathTemplates.servingConfigPathTemplate.match(servingConfigName).serving_config;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.branchServiceStub && !this._terminated) {
      return this.branchServiceStub.then(stub => {
        this._log.info('ending gRPC channel');
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}