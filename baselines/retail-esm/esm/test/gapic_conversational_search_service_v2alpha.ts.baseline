// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

// @ts-ignore
import * as protos from '../../protos/protos.js';
import assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as conversationalsearchserviceModule from '../src/index.js';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';
import fs from 'fs';
import path from 'path';
import {fileURLToPath} from 'url';

// @ts-ignore
const dirname = path.dirname(fileURLToPath(import.meta.url));
// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  JSON.parse(
    fs.readFileSync(path.join(dirname, '..', '..', 'protos/protos.json'), 'utf8')
  ))

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type?.fields[field]?.resolvedType as protobuf.Type;
    }
    return type?.fields[fields[fields.length - 1]]?.defaultValue ?? null;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubServerStreamingCall<ResponseType>(response?: ResponseType, error?: Error) {
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // write something to the stream to trigger transformStub and send the response back to the client
    setImmediate(() => { mockStream.write({}); });
    setImmediate(() => { mockStream.end(); });
    return sinon.stub().returns(mockStream);
}

describe('v2alpha.ConversationalSearchServiceClient', () => {
    describe('Common methods', () => {
        it('has apiEndpoint', () => {
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'retail.googleapis.com');
        });

        it('has universeDomain', () => {
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });

        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            it('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient.servicePath;
                assert.strictEqual(servicePath, 'retail.googleapis.com');
                assert(stub.called);
                stub.restore();
            });

            it('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'retail.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
        }
        it('sets apiEndpoint according to universe domain camelCase', () => {
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({universeDomain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'retail.example.com');
        });

        it('sets apiEndpoint according to universe domain snakeCase', () => {
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({universe_domain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'retail.example.com');
        });

        if (typeof process === 'object' && 'env' in process) {
            describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
                it('sets apiEndpoint from environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient();
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'retail.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });

                it('value configured in code has priority over environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({universeDomain: 'configured.example.com'});
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'retail.configured.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
            });
        }
        it('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({universe_domain: 'example.com', universeDomain: 'example.net'}); });
        });

        it('has port', () => {
            const port = conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.conversationalSearchServiceStub, undefined);
            await client.initialize();
            assert(client.conversationalSearchServiceStub);
        });

        it('has close method for the initialized client', done => {
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            assert(client.conversationalSearchServiceStub);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has close method for the non-initialized client', done => {
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.conversationalSearchServiceStub, undefined);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('conversationalSearch', () => {
        it('invokes conversationalSearch without error', async () => {
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.retail.v2alpha.ConversationalSearchRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.retail.v2alpha.ConversationalSearchRequest', ['placement']);
            request.placement = defaultValue1;
            const expectedHeaderRequestParams = `placement=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.retail.v2alpha.ConversationalSearchResponse()
            );
            client.innerApiCalls.conversationalSearch = stubServerStreamingCall(expectedResponse);
            const stream = client.conversationalSearch(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.cloud.retail.v2alpha.ConversationalSearchResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.conversationalSearch as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.conversationalSearch as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes conversationalSearch without error and gaxServerStreamingRetries enabled', async () => {
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.retail.v2alpha.ConversationalSearchRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.retail.v2alpha.ConversationalSearchRequest', ['placement']);
            request.placement = defaultValue1;
            const expectedHeaderRequestParams = `placement=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.retail.v2alpha.ConversationalSearchResponse()
            );
            client.innerApiCalls.conversationalSearch = stubServerStreamingCall(expectedResponse);
            const stream = client.conversationalSearch(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.cloud.retail.v2alpha.ConversationalSearchResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.conversationalSearch as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.conversationalSearch as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes conversationalSearch with error', async () => {
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.retail.v2alpha.ConversationalSearchRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.retail.v2alpha.ConversationalSearchRequest', ['placement']);
            request.placement = defaultValue1;
            const expectedHeaderRequestParams = `placement=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.conversationalSearch = stubServerStreamingCall(undefined, expectedError);
            const stream = client.conversationalSearch(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.cloud.retail.v2alpha.ConversationalSearchResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            const actualRequest = (client.innerApiCalls.conversationalSearch as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.conversationalSearch as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes conversationalSearch with closed client', async () => {
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.retail.v2alpha.ConversationalSearchRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.retail.v2alpha.ConversationalSearchRequest', ['placement']);
            request.placement = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            const stream = client.conversationalSearch(request, {retryRequestOptions: {noResponseRetries: 0}});
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.cloud.retail.v2alpha.ConversationalSearchResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
        });
        it('should create a client with gaxServerStreamingRetries enabled', () => {
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
                gaxServerStreamingRetries: true,
            });
            assert(client);
        });
    });

    describe('Path templates', () => {

        describe('alertConfig', () => {
            const fakePath = "/rendered/path/alertConfig";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            client.pathTemplates.alertConfigPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.alertConfigPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('alertConfigPath', () => {
                const result = client.alertConfigPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.alertConfigPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromAlertConfigName', () => {
                const result = client.matchProjectFromAlertConfigName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.alertConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('attributesConfig', () => {
            const fakePath = "/rendered/path/attributesConfig";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                catalog: "catalogValue",
            };
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            client.pathTemplates.attributesConfigPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.attributesConfigPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('attributesConfigPath', () => {
                const result = client.attributesConfigPath("projectValue", "locationValue", "catalogValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.attributesConfigPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromAttributesConfigName', () => {
                const result = client.matchProjectFromAttributesConfigName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.attributesConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAttributesConfigName', () => {
                const result = client.matchLocationFromAttributesConfigName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.attributesConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogFromAttributesConfigName', () => {
                const result = client.matchCatalogFromAttributesConfigName(fakePath);
                assert.strictEqual(result, "catalogValue");
                assert((client.pathTemplates.attributesConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('branch', () => {
            const fakePath = "/rendered/path/branch";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                catalog: "catalogValue",
                branch: "branchValue",
            };
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            client.pathTemplates.branchPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.branchPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('branchPath', () => {
                const result = client.branchPath("projectValue", "locationValue", "catalogValue", "branchValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.branchPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromBranchName', () => {
                const result = client.matchProjectFromBranchName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.branchPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromBranchName', () => {
                const result = client.matchLocationFromBranchName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.branchPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogFromBranchName', () => {
                const result = client.matchCatalogFromBranchName(fakePath);
                assert.strictEqual(result, "catalogValue");
                assert((client.pathTemplates.branchPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBranchFromBranchName', () => {
                const result = client.matchBranchFromBranchName(fakePath);
                assert.strictEqual(result, "branchValue");
                assert((client.pathTemplates.branchPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('catalog', () => {
            const fakePath = "/rendered/path/catalog";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                catalog: "catalogValue",
            };
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            client.pathTemplates.catalogPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.catalogPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('catalogPath', () => {
                const result = client.catalogPath("projectValue", "locationValue", "catalogValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.catalogPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromCatalogName', () => {
                const result = client.matchProjectFromCatalogName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.catalogPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCatalogName', () => {
                const result = client.matchLocationFromCatalogName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.catalogPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogFromCatalogName', () => {
                const result = client.matchCatalogFromCatalogName(fakePath);
                assert.strictEqual(result, "catalogValue");
                assert((client.pathTemplates.catalogPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('completionConfig', () => {
            const fakePath = "/rendered/path/completionConfig";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                catalog: "catalogValue",
            };
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            client.pathTemplates.completionConfigPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.completionConfigPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('completionConfigPath', () => {
                const result = client.completionConfigPath("projectValue", "locationValue", "catalogValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.completionConfigPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromCompletionConfigName', () => {
                const result = client.matchProjectFromCompletionConfigName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.completionConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCompletionConfigName', () => {
                const result = client.matchLocationFromCompletionConfigName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.completionConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogFromCompletionConfigName', () => {
                const result = client.matchCatalogFromCompletionConfigName(fakePath);
                assert.strictEqual(result, "catalogValue");
                assert((client.pathTemplates.completionConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('control', () => {
            const fakePath = "/rendered/path/control";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                catalog: "catalogValue",
                control: "controlValue",
            };
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            client.pathTemplates.controlPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.controlPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('controlPath', () => {
                const result = client.controlPath("projectValue", "locationValue", "catalogValue", "controlValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.controlPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromControlName', () => {
                const result = client.matchProjectFromControlName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.controlPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromControlName', () => {
                const result = client.matchLocationFromControlName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.controlPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogFromControlName', () => {
                const result = client.matchCatalogFromControlName(fakePath);
                assert.strictEqual(result, "catalogValue");
                assert((client.pathTemplates.controlPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchControlFromControlName', () => {
                const result = client.matchControlFromControlName(fakePath);
                assert.strictEqual(result, "controlValue");
                assert((client.pathTemplates.controlPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('loggingConfig', () => {
            const fakePath = "/rendered/path/loggingConfig";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            client.pathTemplates.loggingConfigPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.loggingConfigPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('loggingConfigPath', () => {
                const result = client.loggingConfigPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.loggingConfigPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLoggingConfigName', () => {
                const result = client.matchProjectFromLoggingConfigName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.loggingConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('merchantCenterAccountLink', () => {
            const fakePath = "/rendered/path/merchantCenterAccountLink";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                catalog: "catalogValue",
                merchant_center_account_link: "merchantCenterAccountLinkValue",
            };
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            client.pathTemplates.merchantCenterAccountLinkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.merchantCenterAccountLinkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('merchantCenterAccountLinkPath', () => {
                const result = client.merchantCenterAccountLinkPath("projectValue", "locationValue", "catalogValue", "merchantCenterAccountLinkValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.merchantCenterAccountLinkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromMerchantCenterAccountLinkName', () => {
                const result = client.matchProjectFromMerchantCenterAccountLinkName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.merchantCenterAccountLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromMerchantCenterAccountLinkName', () => {
                const result = client.matchLocationFromMerchantCenterAccountLinkName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.merchantCenterAccountLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogFromMerchantCenterAccountLinkName', () => {
                const result = client.matchCatalogFromMerchantCenterAccountLinkName(fakePath);
                assert.strictEqual(result, "catalogValue");
                assert((client.pathTemplates.merchantCenterAccountLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMerchantCenterAccountLinkFromMerchantCenterAccountLinkName', () => {
                const result = client.matchMerchantCenterAccountLinkFromMerchantCenterAccountLinkName(fakePath);
                assert.strictEqual(result, "merchantCenterAccountLinkValue");
                assert((client.pathTemplates.merchantCenterAccountLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('model', () => {
            const fakePath = "/rendered/path/model";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                catalog: "catalogValue",
                model: "modelValue",
            };
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            client.pathTemplates.modelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.modelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('modelPath', () => {
                const result = client.modelPath("projectValue", "locationValue", "catalogValue", "modelValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.modelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromModelName', () => {
                const result = client.matchProjectFromModelName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.modelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromModelName', () => {
                const result = client.matchLocationFromModelName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.modelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogFromModelName', () => {
                const result = client.matchCatalogFromModelName(fakePath);
                assert.strictEqual(result, "catalogValue");
                assert((client.pathTemplates.modelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchModelFromModelName', () => {
                const result = client.matchModelFromModelName(fakePath);
                assert.strictEqual(result, "modelValue");
                assert((client.pathTemplates.modelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('product', () => {
            const fakePath = "/rendered/path/product";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                catalog: "catalogValue",
                branch: "branchValue",
                product: "productValue",
            };
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            client.pathTemplates.productPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.productPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('productPath', () => {
                const result = client.productPath("projectValue", "locationValue", "catalogValue", "branchValue", "productValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.productPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProductName', () => {
                const result = client.matchProjectFromProductName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.productPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProductName', () => {
                const result = client.matchLocationFromProductName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.productPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogFromProductName', () => {
                const result = client.matchCatalogFromProductName(fakePath);
                assert.strictEqual(result, "catalogValue");
                assert((client.pathTemplates.productPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBranchFromProductName', () => {
                const result = client.matchBranchFromProductName(fakePath);
                assert.strictEqual(result, "branchValue");
                assert((client.pathTemplates.productPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchProductFromProductName', () => {
                const result = client.matchProductFromProductName(fakePath);
                assert.strictEqual(result, "productValue");
                assert((client.pathTemplates.productPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('retailProject', () => {
            const fakePath = "/rendered/path/retailProject";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            client.pathTemplates.retailProjectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.retailProjectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('retailProjectPath', () => {
                const result = client.retailProjectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.retailProjectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromRetailProjectName', () => {
                const result = client.matchProjectFromRetailProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.retailProjectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('servingConfig', () => {
            const fakePath = "/rendered/path/servingConfig";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                catalog: "catalogValue",
                serving_config: "servingConfigValue",
            };
            const client = new conversationalsearchserviceModule.v2alpha.ConversationalSearchServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            client.pathTemplates.servingConfigPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.servingConfigPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('servingConfigPath', () => {
                const result = client.servingConfigPath("projectValue", "locationValue", "catalogValue", "servingConfigValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.servingConfigPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromServingConfigName', () => {
                const result = client.matchProjectFromServingConfigName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.servingConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromServingConfigName', () => {
                const result = client.matchLocationFromServingConfigName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.servingConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogFromServingConfigName', () => {
                const result = client.matchCatalogFromServingConfigName(fakePath);
                assert.strictEqual(result, "catalogValue");
                assert((client.pathTemplates.servingConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchServingConfigFromServingConfigName', () => {
                const result = client.matchServingConfigFromServingConfigName(fakePath);
                assert.strictEqual(result, "servingConfigValue");
                assert((client.pathTemplates.servingConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
