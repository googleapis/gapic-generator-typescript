// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

// @ts-ignore
import * as protos from '../../protos/protos.js';
import assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as complianceModule from '../src/index.js';

import {protobuf} from 'google-gax';
import fs from 'fs';
import path from 'path';
import {fileURLToPath} from 'url';

// @ts-ignore
const dirname = path.dirname(fileURLToPath(import.meta.url));
// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  JSON.parse(
    fs.readFileSync(path.join(dirname, '..', '..', 'protos/protos.json'), 'utf8')
  ))

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type?.fields[field]?.resolvedType as protobuf.Type;
    }
    return type?.fields[fields[fields.length - 1]]?.defaultValue ?? null;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

describe('v1beta1.ComplianceClient', () => {
    describe('Common methods', () => {
        it('has servicePath', () => {
            const client = new complianceModule.v1beta1.ComplianceClient();
            const servicePath = client.servicePath;
            assert.strictEqual(servicePath, 'localhost');
        });

        it('has apiEndpoint', () => {
            const client = new complianceModule.v1beta1.ComplianceClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'localhost');
        });
        
        it('has universeDomain', () => {
            const client = new complianceModule.v1beta1.ComplianceClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });

        if (typeof process !== 'undefined' && typeof process.emitWarning === 'function') {
            it('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = complianceModule.v1beta1.ComplianceClient.servicePath;
                assert.strictEqual(servicePath, 'localhost');
                assert(stub.called);
                stub.restore();
            });

            it('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = complianceModule.v1beta1.ComplianceClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'localhost');
                assert(stub.called);
                stub.restore();
            });
        }
        it('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new complianceModule.v1beta1.ComplianceClient({universe_domain: 'example.com', universeDomain: 'example.net'}); });
        });

        it('has port', () => {
            const port = complianceModule.v1beta1.ComplianceClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new complianceModule.v1beta1.ComplianceClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.complianceStub, undefined);
            await client.initialize();
            assert(client.complianceStub);
        });

        it('has close method for the initialized client', done => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.complianceStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.complianceStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('repeatDataBody', () => {
        it('invokes repeatDataBody without error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatResponse()
            );
            client.innerApiCalls.repeatDataBody = stubSimpleCall(expectedResponse);
            const [response] = await client.repeatDataBody(request);
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes repeatDataBody without error using callback', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatResponse()
            );
            client.innerApiCalls.repeatDataBody = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.repeatDataBody(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IRepeatResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes repeatDataBody with error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.repeatDataBody = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.repeatDataBody(request), expectedError);
        });

        it('invokes repeatDataBody with closed client', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.repeatDataBody(request), expectedError);
        });
    });

    describe('repeatDataBodyInfo', () => {
        it('invokes repeatDataBodyInfo without error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatResponse()
            );
            client.innerApiCalls.repeatDataBodyInfo = stubSimpleCall(expectedResponse);
            const [response] = await client.repeatDataBodyInfo(request);
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes repeatDataBodyInfo without error using callback', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatResponse()
            );
            client.innerApiCalls.repeatDataBodyInfo = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.repeatDataBodyInfo(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IRepeatResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes repeatDataBodyInfo with error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.repeatDataBodyInfo = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.repeatDataBodyInfo(request), expectedError);
        });

        it('invokes repeatDataBodyInfo with closed client', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.repeatDataBodyInfo(request), expectedError);
        });
    });

    describe('repeatDataQuery', () => {
        it('invokes repeatDataQuery without error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatResponse()
            );
            client.innerApiCalls.repeatDataQuery = stubSimpleCall(expectedResponse);
            const [response] = await client.repeatDataQuery(request);
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes repeatDataQuery without error using callback', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatResponse()
            );
            client.innerApiCalls.repeatDataQuery = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.repeatDataQuery(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IRepeatResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes repeatDataQuery with error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.repeatDataQuery = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.repeatDataQuery(request), expectedError);
        });

        it('invokes repeatDataQuery with closed client', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.repeatDataQuery(request), expectedError);
        });
    });

    describe('repeatDataSimplePath', () => {
        it('invokes repeatDataSimplePath without error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            request.info ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fString']);
            request.info.fString = defaultValue1;
            request.info ??= {};
            const defaultValue2 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fInt32']);
            request.info.fInt32 = defaultValue2;
            request.info ??= {};
            const defaultValue3 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fDouble']);
            request.info.fDouble = defaultValue3;
            request.info ??= {};
            const defaultValue4 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fBool']);
            request.info.fBool = defaultValue4;
            request.info ??= {};
            const defaultValue5 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fKingdom']);
            request.info.fKingdom = defaultValue5;
            const expectedHeaderRequestParams = `info.f_string=${defaultValue1 ?? '' }&info.f_int32=${defaultValue2 ?? '' }&info.f_double=${defaultValue3 ?? '' }&info.f_bool=${defaultValue4 ?? '' }&info.f_kingdom=${defaultValue5 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatResponse()
            );
            client.innerApiCalls.repeatDataSimplePath = stubSimpleCall(expectedResponse);
            const [response] = await client.repeatDataSimplePath(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.repeatDataSimplePath as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.repeatDataSimplePath as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes repeatDataSimplePath without error using callback', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            request.info ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fString']);
            request.info.fString = defaultValue1;
            request.info ??= {};
            const defaultValue2 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fInt32']);
            request.info.fInt32 = defaultValue2;
            request.info ??= {};
            const defaultValue3 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fDouble']);
            request.info.fDouble = defaultValue3;
            request.info ??= {};
            const defaultValue4 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fBool']);
            request.info.fBool = defaultValue4;
            request.info ??= {};
            const defaultValue5 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fKingdom']);
            request.info.fKingdom = defaultValue5;
            const expectedHeaderRequestParams = `info.f_string=${defaultValue1 ?? '' }&info.f_int32=${defaultValue2 ?? '' }&info.f_double=${defaultValue3 ?? '' }&info.f_bool=${defaultValue4 ?? '' }&info.f_kingdom=${defaultValue5 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatResponse()
            );
            client.innerApiCalls.repeatDataSimplePath = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.repeatDataSimplePath(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IRepeatResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.repeatDataSimplePath as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.repeatDataSimplePath as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes repeatDataSimplePath with error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            request.info ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fString']);
            request.info.fString = defaultValue1;
            request.info ??= {};
            const defaultValue2 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fInt32']);
            request.info.fInt32 = defaultValue2;
            request.info ??= {};
            const defaultValue3 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fDouble']);
            request.info.fDouble = defaultValue3;
            request.info ??= {};
            const defaultValue4 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fBool']);
            request.info.fBool = defaultValue4;
            request.info ??= {};
            const defaultValue5 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fKingdom']);
            request.info.fKingdom = defaultValue5;
            const expectedHeaderRequestParams = `info.f_string=${defaultValue1 ?? '' }&info.f_int32=${defaultValue2 ?? '' }&info.f_double=${defaultValue3 ?? '' }&info.f_bool=${defaultValue4 ?? '' }&info.f_kingdom=${defaultValue5 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.repeatDataSimplePath = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.repeatDataSimplePath(request), expectedError);
            const actualRequest = (client.innerApiCalls.repeatDataSimplePath as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.repeatDataSimplePath as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes repeatDataSimplePath with closed client', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            request.info ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fString']);
            request.info.fString = defaultValue1;
            request.info ??= {};
            const defaultValue2 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fInt32']);
            request.info.fInt32 = defaultValue2;
            request.info ??= {};
            const defaultValue3 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fDouble']);
            request.info.fDouble = defaultValue3;
            request.info ??= {};
            const defaultValue4 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fBool']);
            request.info.fBool = defaultValue4;
            request.info ??= {};
            const defaultValue5 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fKingdom']);
            request.info.fKingdom = defaultValue5;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.repeatDataSimplePath(request), expectedError);
        });
    });

    describe('repeatDataPathResource', () => {
        it('invokes repeatDataPathResource without error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            request.info ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fString']);
            request.info.fString = defaultValue1;
            request.info ??= {};
            request.info.fChild ??= {};
            const defaultValue2 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fChild', 'fString']);
            request.info.fChild.fString = defaultValue2;
            request.info ??= {};
            const defaultValue3 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fBool']);
            request.info.fBool = defaultValue3;
            const expectedHeaderRequestParams = `info.f_string=${defaultValue1 ?? '' }&info.f_child.f_string=${defaultValue2 ?? '' }&info.f_bool=${defaultValue3 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatResponse()
            );
            client.innerApiCalls.repeatDataPathResource = stubSimpleCall(expectedResponse);
            const [response] = await client.repeatDataPathResource(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.repeatDataPathResource as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.repeatDataPathResource as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes repeatDataPathResource without error using callback', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            request.info ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fString']);
            request.info.fString = defaultValue1;
            request.info ??= {};
            request.info.fChild ??= {};
            const defaultValue2 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fChild', 'fString']);
            request.info.fChild.fString = defaultValue2;
            request.info ??= {};
            const defaultValue3 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fBool']);
            request.info.fBool = defaultValue3;
            const expectedHeaderRequestParams = `info.f_string=${defaultValue1 ?? '' }&info.f_child.f_string=${defaultValue2 ?? '' }&info.f_bool=${defaultValue3 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatResponse()
            );
            client.innerApiCalls.repeatDataPathResource = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.repeatDataPathResource(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IRepeatResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.repeatDataPathResource as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.repeatDataPathResource as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes repeatDataPathResource with error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            request.info ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fString']);
            request.info.fString = defaultValue1;
            request.info ??= {};
            request.info.fChild ??= {};
            const defaultValue2 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fChild', 'fString']);
            request.info.fChild.fString = defaultValue2;
            request.info ??= {};
            const defaultValue3 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fBool']);
            request.info.fBool = defaultValue3;
            const expectedHeaderRequestParams = `info.f_string=${defaultValue1 ?? '' }&info.f_child.f_string=${defaultValue2 ?? '' }&info.f_bool=${defaultValue3 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.repeatDataPathResource = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.repeatDataPathResource(request), expectedError);
            const actualRequest = (client.innerApiCalls.repeatDataPathResource as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.repeatDataPathResource as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes repeatDataPathResource with closed client', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            request.info ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fString']);
            request.info.fString = defaultValue1;
            request.info ??= {};
            request.info.fChild ??= {};
            const defaultValue2 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fChild', 'fString']);
            request.info.fChild.fString = defaultValue2;
            request.info ??= {};
            const defaultValue3 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fBool']);
            request.info.fBool = defaultValue3;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.repeatDataPathResource(request), expectedError);
        });
    });

    describe('repeatDataPathTrailingResource', () => {
        it('invokes repeatDataPathTrailingResource without error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            request.info ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fString']);
            request.info.fString = defaultValue1;
            request.info ??= {};
            request.info.fChild ??= {};
            const defaultValue2 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fChild', 'fString']);
            request.info.fChild.fString = defaultValue2;
            const expectedHeaderRequestParams = `info.f_string=${defaultValue1 ?? '' }&info.f_child.f_string=${defaultValue2 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatResponse()
            );
            client.innerApiCalls.repeatDataPathTrailingResource = stubSimpleCall(expectedResponse);
            const [response] = await client.repeatDataPathTrailingResource(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.repeatDataPathTrailingResource as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.repeatDataPathTrailingResource as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes repeatDataPathTrailingResource without error using callback', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            request.info ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fString']);
            request.info.fString = defaultValue1;
            request.info ??= {};
            request.info.fChild ??= {};
            const defaultValue2 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fChild', 'fString']);
            request.info.fChild.fString = defaultValue2;
            const expectedHeaderRequestParams = `info.f_string=${defaultValue1 ?? '' }&info.f_child.f_string=${defaultValue2 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatResponse()
            );
            client.innerApiCalls.repeatDataPathTrailingResource = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.repeatDataPathTrailingResource(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IRepeatResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.repeatDataPathTrailingResource as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.repeatDataPathTrailingResource as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes repeatDataPathTrailingResource with error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            request.info ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fString']);
            request.info.fString = defaultValue1;
            request.info ??= {};
            request.info.fChild ??= {};
            const defaultValue2 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fChild', 'fString']);
            request.info.fChild.fString = defaultValue2;
            const expectedHeaderRequestParams = `info.f_string=${defaultValue1 ?? '' }&info.f_child.f_string=${defaultValue2 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.repeatDataPathTrailingResource = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.repeatDataPathTrailingResource(request), expectedError);
            const actualRequest = (client.innerApiCalls.repeatDataPathTrailingResource as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.repeatDataPathTrailingResource as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes repeatDataPathTrailingResource with closed client', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            request.info ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fString']);
            request.info.fString = defaultValue1;
            request.info ??= {};
            request.info.fChild ??= {};
            const defaultValue2 =
              getTypeDefaultValue('.google.showcase.v1beta1.RepeatRequest', ['info', 'fChild', 'fString']);
            request.info.fChild.fString = defaultValue2;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.repeatDataPathTrailingResource(request), expectedError);
        });
    });

    describe('repeatDataBodyPut', () => {
        it('invokes repeatDataBodyPut without error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatResponse()
            );
            client.innerApiCalls.repeatDataBodyPut = stubSimpleCall(expectedResponse);
            const [response] = await client.repeatDataBodyPut(request);
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes repeatDataBodyPut without error using callback', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatResponse()
            );
            client.innerApiCalls.repeatDataBodyPut = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.repeatDataBodyPut(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IRepeatResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes repeatDataBodyPut with error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.repeatDataBodyPut = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.repeatDataBodyPut(request), expectedError);
        });

        it('invokes repeatDataBodyPut with closed client', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.repeatDataBodyPut(request), expectedError);
        });
    });

    describe('repeatDataBodyPatch', () => {
        it('invokes repeatDataBodyPatch without error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatResponse()
            );
            client.innerApiCalls.repeatDataBodyPatch = stubSimpleCall(expectedResponse);
            const [response] = await client.repeatDataBodyPatch(request);
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes repeatDataBodyPatch without error using callback', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatResponse()
            );
            client.innerApiCalls.repeatDataBodyPatch = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.repeatDataBodyPatch(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IRepeatResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes repeatDataBodyPatch with error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.repeatDataBodyPatch = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.repeatDataBodyPatch(request), expectedError);
        });

        it('invokes repeatDataBodyPatch with closed client', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.RepeatRequest()
            );
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.repeatDataBodyPatch(request), expectedError);
        });
    });

    describe('getEnum', () => {
        it('invokes getEnum without error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.EnumRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.EnumResponse()
            );
            client.innerApiCalls.getEnum = stubSimpleCall(expectedResponse);
            const [response] = await client.getEnum(request);
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes getEnum without error using callback', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.EnumRequest()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.EnumResponse()
            );
            client.innerApiCalls.getEnum = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getEnum(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IEnumResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes getEnum with error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.EnumRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.getEnum = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getEnum(request), expectedError);
        });

        it('invokes getEnum with closed client', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.EnumRequest()
            );
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getEnum(request), expectedError);
        });
    });

    describe('verifyEnum', () => {
        it('invokes verifyEnum without error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.EnumResponse()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.EnumResponse()
            );
            client.innerApiCalls.verifyEnum = stubSimpleCall(expectedResponse);
            const [response] = await client.verifyEnum(request);
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes verifyEnum without error using callback', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.EnumResponse()
            );
            const expectedResponse = generateSampleMessage(
              new protos.google.showcase.v1beta1.EnumResponse()
            );
            client.innerApiCalls.verifyEnum = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.verifyEnum(
                    request,
                    (err?: Error|null, result?: protos.google.showcase.v1beta1.IEnumResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
        });

        it('invokes verifyEnum with error', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.EnumResponse()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.verifyEnum = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.verifyEnum(request), expectedError);
        });

        it('invokes verifyEnum with closed client', async () => {
            const client = new complianceModule.v1beta1.ComplianceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.showcase.v1beta1.EnumResponse()
            );
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.verifyEnum(request), expectedError);
        });
    });

    describe('Path templates', () => {

        describe('blueprint', () => {
            const fakePath = "/rendered/path/blueprint";
            const expectedParameters = {
                session: "sessionValue",
                test: "testValue",
                blueprint: "blueprintValue",
            };
            const client = new complianceModule.v1beta1.ComplianceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.blueprintPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.blueprintPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('blueprintPath', () => {
                const result = client.blueprintPath("sessionValue", "testValue", "blueprintValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.blueprintPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchSessionFromBlueprintName', () => {
                const result = client.matchSessionFromBlueprintName(fakePath);
                assert.strictEqual(result, "sessionValue");
                assert((client.pathTemplates.blueprintPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTestFromBlueprintName', () => {
                const result = client.matchTestFromBlueprintName(fakePath);
                assert.strictEqual(result, "testValue");
                assert((client.pathTemplates.blueprintPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBlueprintFromBlueprintName', () => {
                const result = client.matchBlueprintFromBlueprintName(fakePath);
                assert.strictEqual(result, "blueprintValue");
                assert((client.pathTemplates.blueprintPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('room', () => {
            const fakePath = "/rendered/path/room";
            const expectedParameters = {
                room: "roomValue",
            };
            const client = new complianceModule.v1beta1.ComplianceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.roomPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.roomPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('roomPath', () => {
                const result = client.roomPath("roomValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.roomPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchRoomFromRoomName', () => {
                const result = client.matchRoomFromRoomName(fakePath);
                assert.strictEqual(result, "roomValue");
                assert((client.pathTemplates.roomPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('roomBlurb', () => {
            const fakePath = "/rendered/path/roomBlurb";
            const expectedParameters = {
                room: "roomValue",
                blurb: "blurbValue",
            };
            const client = new complianceModule.v1beta1.ComplianceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.roomBlurbPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.roomBlurbPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('roomBlurbPath', () => {
                const result = client.roomBlurbPath("roomValue", "blurbValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.roomBlurbPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchRoomFromRoomBlurbName', () => {
                const result = client.matchRoomFromRoomBlurbName(fakePath);
                assert.strictEqual(result, "roomValue");
                assert((client.pathTemplates.roomBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBlurbFromRoomBlurbName', () => {
                const result = client.matchBlurbFromRoomBlurbName(fakePath);
                assert.strictEqual(result, "blurbValue");
                assert((client.pathTemplates.roomBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('roomBlurbsLegacyRoomBlurb', () => {
            const fakePath = "/rendered/path/roomBlurbsLegacyRoomBlurb";
            const expectedParameters = {
                room: "roomValue",
                legacy_room: "legacyRoomValue",
                blurb: "blurbValue",
            };
            const client = new complianceModule.v1beta1.ComplianceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.roomBlurbsLegacyRoomBlurbPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.roomBlurbsLegacyRoomBlurbPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('roomBlurbsLegacyRoomBlurbPath', () => {
                const result = client.roomBlurbsLegacyRoomBlurbPath("roomValue", "legacyRoomValue", "blurbValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.roomBlurbsLegacyRoomBlurbPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchRoomFromRoomBlurbsLegacyRoomBlurbName', () => {
                const result = client.matchRoomFromRoomBlurbsLegacyRoomBlurbName(fakePath);
                assert.strictEqual(result, "roomValue");
                assert((client.pathTemplates.roomBlurbsLegacyRoomBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLegacyRoomFromRoomBlurbsLegacyRoomBlurbName', () => {
                const result = client.matchLegacyRoomFromRoomBlurbsLegacyRoomBlurbName(fakePath);
                assert.strictEqual(result, "legacyRoomValue");
                assert((client.pathTemplates.roomBlurbsLegacyRoomBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBlurbFromRoomBlurbsLegacyRoomBlurbName', () => {
                const result = client.matchBlurbFromRoomBlurbsLegacyRoomBlurbName(fakePath);
                assert.strictEqual(result, "blurbValue");
                assert((client.pathTemplates.roomBlurbsLegacyRoomBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('sequence', () => {
            const fakePath = "/rendered/path/sequence";
            const expectedParameters = {
                sequence: "sequenceValue",
            };
            const client = new complianceModule.v1beta1.ComplianceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.sequencePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.sequencePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('sequencePath', () => {
                const result = client.sequencePath("sequenceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.sequencePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchSequenceFromSequenceName', () => {
                const result = client.matchSequenceFromSequenceName(fakePath);
                assert.strictEqual(result, "sequenceValue");
                assert((client.pathTemplates.sequencePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('sequenceReport', () => {
            const fakePath = "/rendered/path/sequenceReport";
            const expectedParameters = {
                sequence: "sequenceValue",
            };
            const client = new complianceModule.v1beta1.ComplianceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.sequenceReportPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.sequenceReportPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('sequenceReportPath', () => {
                const result = client.sequenceReportPath("sequenceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.sequenceReportPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchSequenceFromSequenceReportName', () => {
                const result = client.matchSequenceFromSequenceReportName(fakePath);
                assert.strictEqual(result, "sequenceValue");
                assert((client.pathTemplates.sequenceReportPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('session', () => {
            const fakePath = "/rendered/path/session";
            const expectedParameters = {
                session: "sessionValue",
            };
            const client = new complianceModule.v1beta1.ComplianceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.sessionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.sessionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('sessionPath', () => {
                const result = client.sessionPath("sessionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.sessionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchSessionFromSessionName', () => {
                const result = client.matchSessionFromSessionName(fakePath);
                assert.strictEqual(result, "sessionValue");
                assert((client.pathTemplates.sessionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('test', () => {
            const fakePath = "/rendered/path/test";
            const expectedParameters = {
                session: "sessionValue",
                test: "testValue",
            };
            const client = new complianceModule.v1beta1.ComplianceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.testPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.testPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('testPath', () => {
                const result = client.testPath("sessionValue", "testValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.testPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchSessionFromTestName', () => {
                const result = client.matchSessionFromTestName(fakePath);
                assert.strictEqual(result, "sessionValue");
                assert((client.pathTemplates.testPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTestFromTestName', () => {
                const result = client.matchTestFromTestName(fakePath);
                assert.strictEqual(result, "testValue");
                assert((client.pathTemplates.testPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('user', () => {
            const fakePath = "/rendered/path/user";
            const expectedParameters = {
                user: "userValue",
            };
            const client = new complianceModule.v1beta1.ComplianceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.userPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.userPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('userPath', () => {
                const result = client.userPath("userValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.userPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchUserFromUserName', () => {
                const result = client.matchUserFromUserName(fakePath);
                assert.strictEqual(result, "userValue");
                assert((client.pathTemplates.userPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('userProfileBlurb', () => {
            const fakePath = "/rendered/path/userProfileBlurb";
            const expectedParameters = {
                user: "userValue",
                blurb: "blurbValue",
            };
            const client = new complianceModule.v1beta1.ComplianceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.userProfileBlurbPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.userProfileBlurbPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('userProfileBlurbPath', () => {
                const result = client.userProfileBlurbPath("userValue", "blurbValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.userProfileBlurbPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchUserFromUserProfileBlurbName', () => {
                const result = client.matchUserFromUserProfileBlurbName(fakePath);
                assert.strictEqual(result, "userValue");
                assert((client.pathTemplates.userProfileBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBlurbFromUserProfileBlurbName', () => {
                const result = client.matchBlurbFromUserProfileBlurbName(fakePath);
                assert.strictEqual(result, "blurbValue");
                assert((client.pathTemplates.userProfileBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('userProfileBlurbsLegacyUserBlurb', () => {
            const fakePath = "/rendered/path/userProfileBlurbsLegacyUserBlurb";
            const expectedParameters = {
                user: "userValue",
                legacy_user: "legacyUserValue",
                blurb: "blurbValue",
            };
            const client = new complianceModule.v1beta1.ComplianceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.userProfileBlurbsLegacyUserBlurbPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.userProfileBlurbsLegacyUserBlurbPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('userProfileBlurbsLegacyUserBlurbPath', () => {
                const result = client.userProfileBlurbsLegacyUserBlurbPath("userValue", "legacyUserValue", "blurbValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.userProfileBlurbsLegacyUserBlurbPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchUserFromUserProfileBlurbsLegacyUserBlurbName', () => {
                const result = client.matchUserFromUserProfileBlurbsLegacyUserBlurbName(fakePath);
                assert.strictEqual(result, "userValue");
                assert((client.pathTemplates.userProfileBlurbsLegacyUserBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLegacyUserFromUserProfileBlurbsLegacyUserBlurbName', () => {
                const result = client.matchLegacyUserFromUserProfileBlurbsLegacyUserBlurbName(fakePath);
                assert.strictEqual(result, "legacyUserValue");
                assert((client.pathTemplates.userProfileBlurbsLegacyUserBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBlurbFromUserProfileBlurbsLegacyUserBlurbName', () => {
                const result = client.matchBlurbFromUserProfileBlurbsLegacyUserBlurbName(fakePath);
                assert.strictEqual(result, "blurbValue");
                assert((client.pathTemplates.userProfileBlurbsLegacyUserBlurbPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
