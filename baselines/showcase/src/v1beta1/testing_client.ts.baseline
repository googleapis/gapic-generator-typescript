// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {APICallback, Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, PaginationResponse} from 'google-gax';
import * as path from 'path';

import { Transform } from 'stream';
import * as protosTypes from '../../protos/protos';
import * as gapicConfig from './testing_client_config.json';

const version = require('../../../package.json').version;

/**
 *  A service to facilitate running discrete sets of tests
 *  against Showcase.
 * @class
 * @memberof v1beta1
 */
export class TestingClient {
  private _descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}};
  private _innerApiCalls: {[name: string]: Function};
  private _pathTemplates: {[name: string]: gax.PathTemplate};
  private _terminated = false;
  auth: gax.GoogleAuth;
  testingStub: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of TestingClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof TestingClient;
    const servicePath = opts && opts.servicePath ?
        opts.servicePath :
        ((opts && opts.apiEndpoint) ? opts.apiEndpoint :
                                      staticMembers.servicePath);
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = (typeof window !== 'undefined');
    if (isBrowser){
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    const gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof TestingClient).scopes;
    const gaxGrpc = new gaxModule.GrpcClient(opts);

    // Save the auth object to the client, for use by other methods.
    this.auth = (gaxGrpc.auth as gax.GoogleAuth);

    // Determine the client header string.
    const clientHeader = [
      `gax/${gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
    const protos = gaxGrpc.loadProto(
      opts.fallback ?
        require("../../protos/protos.json") :
        nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this._pathTemplates = {
      blueprintPathTemplate: new gaxModule.PathTemplate(
        'sessions/{session}/tests/{test}/blueprints/{blueprint}'
      ),
      roomPathTemplate: new gaxModule.PathTemplate(
        'rooms/{room_id}'
      ),
      roomIdBlurbIdPathTemplate: new gaxModule.PathTemplate(
        'rooms/{room_id}/blurbs/{blurb_id}'
      ),
      sessionPathTemplate: new gaxModule.PathTemplate(
        'sessions/{session}'
      ),
      testPathTemplate: new gaxModule.PathTemplate(
        'sessions/{session}/tests/{test}'
      ),
      userPathTemplate: new gaxModule.PathTemplate(
        'users/{user_id}'
      ),
      userIdBlurbIdPathTemplate: new gaxModule.PathTemplate(
        'user/{user_id}/profile/blurbs/{blurb_id}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this._descriptors.page = {
      listSessions:
          new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'sessions'),
      listTests:
          new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'tests')
    };

    // Put together the default options sent with requests.
    const defaults = gaxGrpc.constructSettings(
        'google.showcase.v1beta1.Testing', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};

    // Put together the "service stub" for
    // google.showcase.v1beta1.Testing.
    this.testingStub = gaxGrpc.createStub(
        opts.fallback ?
          (protos as protobuf.Root).lookupService('google.showcase.v1beta1.Testing') :
          // tslint:disable-next-line no-any
          (protos as any).google.showcase.v1beta1.Testing,
        opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const testingStubMethods =
        ['createSession', 'getSession', 'listSessions', 'deleteSession', 'reportSession', 'listTests', 'deleteTest', 'verifyTest'];

    for (const methodName of testingStubMethods) {
      const innerCallPromise = this.testingStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          return stub[methodName].apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const apiCall = gaxModule.createApiCall(
        innerCallPromise,
        defaults[methodName],
        this._descriptors.page[methodName] ||
            this._descriptors.stream[methodName] ||
            this._descriptors.longrunning[methodName]
      );

      this._innerApiCalls[methodName] = (
        argument: {},
        callOptions?: CallOptions,
        callback?: APICallback
      ) => {
        return apiCall(argument, callOptions, callback);
      };
    }
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'localhost';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'localhost';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 7469;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  createSession(
      request: protosTypes.google.showcase.v1beta1.ICreateSessionRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.showcase.v1beta1.ISession,
        protosTypes.google.showcase.v1beta1.ICreateSessionRequest|undefined, {}|undefined
      ]>;
  createSession(
      request: protosTypes.google.showcase.v1beta1.ICreateSessionRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.showcase.v1beta1.ISession,
          protosTypes.google.showcase.v1beta1.ICreateSessionRequest|undefined,
          {}|undefined>): void;
/**
 * Creates a new testing session.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.showcase.v1beta1.Session} request.session
 *   The session to be created.
 *   Sessions are immutable once they are created (although they can
 *   be deleted).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Session]{@link google.showcase.v1beta1.Session}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  createSession(
      request: protosTypes.google.showcase.v1beta1.ICreateSessionRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.showcase.v1beta1.ISession,
          protosTypes.google.showcase.v1beta1.ICreateSessionRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.showcase.v1beta1.ISession,
          protosTypes.google.showcase.v1beta1.ICreateSessionRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.showcase.v1beta1.ISession,
        protosTypes.google.showcase.v1beta1.ICreateSessionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    return this._innerApiCalls.createSession(request, options, callback);
  }
  getSession(
      request: protosTypes.google.showcase.v1beta1.IGetSessionRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.showcase.v1beta1.ISession,
        protosTypes.google.showcase.v1beta1.IGetSessionRequest|undefined, {}|undefined
      ]>;
  getSession(
      request: protosTypes.google.showcase.v1beta1.IGetSessionRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.showcase.v1beta1.ISession,
          protosTypes.google.showcase.v1beta1.IGetSessionRequest|undefined,
          {}|undefined>): void;
/**
 * Gets a testing session.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The session to be retrieved.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Session]{@link google.showcase.v1beta1.Session}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getSession(
      request: protosTypes.google.showcase.v1beta1.IGetSessionRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.showcase.v1beta1.ISession,
          protosTypes.google.showcase.v1beta1.IGetSessionRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.showcase.v1beta1.ISession,
          protosTypes.google.showcase.v1beta1.IGetSessionRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.showcase.v1beta1.ISession,
        protosTypes.google.showcase.v1beta1.IGetSessionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    return this._innerApiCalls.getSession(request, options, callback);
  }
  deleteSession(
      request: protosTypes.google.showcase.v1beta1.IDeleteSessionRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.showcase.v1beta1.IDeleteSessionRequest|undefined, {}|undefined
      ]>;
  deleteSession(
      request: protosTypes.google.showcase.v1beta1.IDeleteSessionRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.google.showcase.v1beta1.IDeleteSessionRequest|undefined,
          {}|undefined>): void;
/**
 * Delete a test session.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The session to be deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  deleteSession(
      request: protosTypes.google.showcase.v1beta1.IDeleteSessionRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.google.showcase.v1beta1.IDeleteSessionRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.google.showcase.v1beta1.IDeleteSessionRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.showcase.v1beta1.IDeleteSessionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    return this._innerApiCalls.deleteSession(request, options, callback);
  }
  reportSession(
      request: protosTypes.google.showcase.v1beta1.IReportSessionRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.showcase.v1beta1.IReportSessionResponse,
        protosTypes.google.showcase.v1beta1.IReportSessionRequest|undefined, {}|undefined
      ]>;
  reportSession(
      request: protosTypes.google.showcase.v1beta1.IReportSessionRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.showcase.v1beta1.IReportSessionResponse,
          protosTypes.google.showcase.v1beta1.IReportSessionRequest|undefined,
          {}|undefined>): void;
/**
 * Report on the status of a session.
 * This generates a report detailing which tests have been completed,
 * and an overall rollup.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The session to be reported on.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ReportSessionResponse]{@link google.showcase.v1beta1.ReportSessionResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  reportSession(
      request: protosTypes.google.showcase.v1beta1.IReportSessionRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.showcase.v1beta1.IReportSessionResponse,
          protosTypes.google.showcase.v1beta1.IReportSessionRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.showcase.v1beta1.IReportSessionResponse,
          protosTypes.google.showcase.v1beta1.IReportSessionRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.showcase.v1beta1.IReportSessionResponse,
        protosTypes.google.showcase.v1beta1.IReportSessionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    return this._innerApiCalls.reportSession(request, options, callback);
  }
  deleteTest(
      request: protosTypes.google.showcase.v1beta1.IDeleteTestRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.showcase.v1beta1.IDeleteTestRequest|undefined, {}|undefined
      ]>;
  deleteTest(
      request: protosTypes.google.showcase.v1beta1.IDeleteTestRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.google.showcase.v1beta1.IDeleteTestRequest|undefined,
          {}|undefined>): void;
/**
 * Explicitly decline to implement a test.
 *
 * This removes the test from subsequent `ListTests` calls, and
 * attempting to do the test will error.
 *
 * This method will error if attempting to delete a required test.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The test to be deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  deleteTest(
      request: protosTypes.google.showcase.v1beta1.IDeleteTestRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.google.showcase.v1beta1.IDeleteTestRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.google.showcase.v1beta1.IDeleteTestRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.showcase.v1beta1.IDeleteTestRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    return this._innerApiCalls.deleteTest(request, options, callback);
  }
  verifyTest(
      request: protosTypes.google.showcase.v1beta1.IVerifyTestRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.showcase.v1beta1.IVerifyTestResponse,
        protosTypes.google.showcase.v1beta1.IVerifyTestRequest|undefined, {}|undefined
      ]>;
  verifyTest(
      request: protosTypes.google.showcase.v1beta1.IVerifyTestRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.showcase.v1beta1.IVerifyTestResponse,
          protosTypes.google.showcase.v1beta1.IVerifyTestRequest|undefined,
          {}|undefined>): void;
/**
 * Register a response to a test.
 *
 * In cases where a test involves registering a final answer at the
 * end of the test, this method provides the means to do so.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The test to have an answer registered to it.
 * @param {Buffer} request.answer
 *   The answer from the test.
 * @param {Buffer[]} request.answers
 *   The answers from the test if multiple are to be checked
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [VerifyTestResponse]{@link google.showcase.v1beta1.VerifyTestResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  verifyTest(
      request: protosTypes.google.showcase.v1beta1.IVerifyTestRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.showcase.v1beta1.IVerifyTestResponse,
          protosTypes.google.showcase.v1beta1.IVerifyTestRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.showcase.v1beta1.IVerifyTestResponse,
          protosTypes.google.showcase.v1beta1.IVerifyTestRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.showcase.v1beta1.IVerifyTestResponse,
        protosTypes.google.showcase.v1beta1.IVerifyTestRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    return this._innerApiCalls.verifyTest(request, options, callback);
  }

  listSessions(
      request: protosTypes.google.showcase.v1beta1.IListSessionsRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.showcase.v1beta1.ISession[],
        protosTypes.google.showcase.v1beta1.IListSessionsRequest|null,
        protosTypes.google.showcase.v1beta1.IListSessionsResponse
      ]>;
  listSessions(
      request: protosTypes.google.showcase.v1beta1.IListSessionsRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.showcase.v1beta1.ISession[],
          protosTypes.google.showcase.v1beta1.IListSessionsRequest|null,
          protosTypes.google.showcase.v1beta1.IListSessionsResponse>): void;
/**
 * Lists the current test sessions.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of sessions to return per page.
 * @param {string} request.pageToken
 *   The page token, for retrieving subsequent pages.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Session]{@link google.showcase.v1beta1.Session}.
 *   The client library support auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [Session]{@link google.showcase.v1beta1.Session} that corresponds to
 *   the one page received from the API server.
 *   If the second element is not null it contains the request object of type [ListSessionsRequest]{@link google.showcase.v1beta1.ListSessionsRequest}
 *   that can be used to obtain the next page of the results.
 *   If it is null, the next page does not exist.
 *   The third element contains the raw response received from the API server. Its type is
 *   [ListSessionsResponse]{@link google.showcase.v1beta1.ListSessionsResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  listSessions(
      request: protosTypes.google.showcase.v1beta1.IListSessionsRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.showcase.v1beta1.ISession[],
          protosTypes.google.showcase.v1beta1.IListSessionsRequest|null,
          protosTypes.google.showcase.v1beta1.IListSessionsResponse>,
      callback?: Callback<
          protosTypes.google.showcase.v1beta1.ISession[],
          protosTypes.google.showcase.v1beta1.IListSessionsRequest|null,
          protosTypes.google.showcase.v1beta1.IListSessionsResponse>):
      Promise<[
        protosTypes.google.showcase.v1beta1.ISession[],
        protosTypes.google.showcase.v1beta1.IListSessionsRequest|null,
        protosTypes.google.showcase.v1beta1.IListSessionsResponse
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    return this._innerApiCalls.listSessions(request, options, callback);
  }

/**
 * Equivalent to {@link listSessions}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link listSessions} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of sessions to return per page.
 * @param {string} request.pageToken
 *   The page token, for retrieving subsequent pages.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Session]{@link google.showcase.v1beta1.Session} on 'data' event.
 */
  listSessionsStream(
      request?: protosTypes.google.showcase.v1beta1.IListSessionsRequest,
      options?: gax.CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.listSessions.createStream(
      this._innerApiCalls.listSessions as gax.GaxCall,
      request,
      callSettings
    );
  }
  listTests(
      request: protosTypes.google.showcase.v1beta1.IListTestsRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.showcase.v1beta1.ITest[],
        protosTypes.google.showcase.v1beta1.IListTestsRequest|null,
        protosTypes.google.showcase.v1beta1.IListTestsResponse
      ]>;
  listTests(
      request: protosTypes.google.showcase.v1beta1.IListTestsRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.showcase.v1beta1.ITest[],
          protosTypes.google.showcase.v1beta1.IListTestsRequest|null,
          protosTypes.google.showcase.v1beta1.IListTestsResponse>): void;
/**
 * List the tests of a sessesion.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The session.
 * @param {number} request.pageSize
 *   The maximum number of tests to return per page.
 * @param {string} request.pageToken
 *   The page token, for retrieving subsequent pages.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Test]{@link google.showcase.v1beta1.Test}.
 *   The client library support auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [Test]{@link google.showcase.v1beta1.Test} that corresponds to
 *   the one page received from the API server.
 *   If the second element is not null it contains the request object of type [ListTestsRequest]{@link google.showcase.v1beta1.ListTestsRequest}
 *   that can be used to obtain the next page of the results.
 *   If it is null, the next page does not exist.
 *   The third element contains the raw response received from the API server. Its type is
 *   [ListTestsResponse]{@link google.showcase.v1beta1.ListTestsResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  listTests(
      request: protosTypes.google.showcase.v1beta1.IListTestsRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.showcase.v1beta1.ITest[],
          protosTypes.google.showcase.v1beta1.IListTestsRequest|null,
          protosTypes.google.showcase.v1beta1.IListTestsResponse>,
      callback?: Callback<
          protosTypes.google.showcase.v1beta1.ITest[],
          protosTypes.google.showcase.v1beta1.IListTestsRequest|null,
          protosTypes.google.showcase.v1beta1.IListTestsResponse>):
      Promise<[
        protosTypes.google.showcase.v1beta1.ITest[],
        protosTypes.google.showcase.v1beta1.IListTestsRequest|null,
        protosTypes.google.showcase.v1beta1.IListTestsResponse
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    return this._innerApiCalls.listTests(request, options, callback);
  }

/**
 * Equivalent to {@link listTests}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link listTests} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The session.
 * @param {number} request.pageSize
 *   The maximum number of tests to return per page.
 * @param {string} request.pageToken
 *   The page token, for retrieving subsequent pages.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Test]{@link google.showcase.v1beta1.Test} on 'data' event.
 */
  listTestsStream(
      request?: protosTypes.google.showcase.v1beta1.IListTestsRequest,
      options?: gax.CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.listTests.createStream(
      this._innerApiCalls.listTests as gax.GaxCall,
      request,
      callSettings
    );
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified blueprint resource name string.
   *
   * @param {string} session
   * @param {string} test
   * @param {string} blueprint
   * @returns {string} Resource name string.
   */
  blueprintPath(session:string,test:string,blueprint:string) {
    return this._pathTemplates.blueprintPathTemplate.render({
      session: session,
      test: test,
      blueprint: blueprint,
    });
  }

  /**
   * Parse the session from Blueprint resource.
   *
   * @param {string} blueprintName
   *   A fully-qualified path representing Blueprint resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromBlueprintName(blueprintName: string) {
    return this._pathTemplates.blueprintPathTemplate.match(blueprintName).session;
  }

  /**
   * Parse the test from Blueprint resource.
   *
   * @param {string} blueprintName
   *   A fully-qualified path representing Blueprint resource.
   * @returns {string} A string representing the test.
   */
  matchTestFromBlueprintName(blueprintName: string) {
    return this._pathTemplates.blueprintPathTemplate.match(blueprintName).test;
  }

  /**
   * Parse the blueprint from Blueprint resource.
   *
   * @param {string} blueprintName
   *   A fully-qualified path representing Blueprint resource.
   * @returns {string} A string representing the blueprint.
   */
  matchBlueprintFromBlueprintName(blueprintName: string) {
    return this._pathTemplates.blueprintPathTemplate.match(blueprintName).blueprint;
  }

  /**
   * Return a fully-qualified room resource name string.
   *
   * @param {string} room_id
   * @returns {string} Resource name string.
   */
  roomPath(roomId:string) {
    return this._pathTemplates.roomPathTemplate.render({
      room_id: roomId,
    });
  }

  /**
   * Parse the room_id from Room resource.
   *
   * @param {string} roomName
   *   A fully-qualified path representing Room resource.
   * @returns {string} A string representing the room_id.
   */
  matchRoomIdFromRoomName(roomName: string) {
    return this._pathTemplates.roomPathTemplate.match(roomName).room_id;
  }

  /**
   * Return a fully-qualified roomIdBlurbId resource name string.
   *
   * @param {string} room_id
   * @param {string} blurb_id
   * @returns {string} Resource name string.
   */
  roomIdBlurbIdPath(roomId:string,blurbId:string) {
    return this._pathTemplates.roomIdBlurbIdPathTemplate.render({
      room_id: roomId,
      blurb_id: blurbId,
    });
  }

  /**
   * Parse the room_id from RoomIdBlurbId resource.
   *
   * @param {string} roomIdBlurbIdName
   *   A fully-qualified path representing room_id_blurb_id resource.
   * @returns {string} A string representing the room_id.
   */
  matchRoomIdFromRoomIdBlurbIdName(roomIdBlurbIdName: string) {
    return this._pathTemplates.roomIdBlurbIdPathTemplate.match(roomIdBlurbIdName).room_id;
  }

  /**
   * Parse the blurb_id from RoomIdBlurbId resource.
   *
   * @param {string} roomIdBlurbIdName
   *   A fully-qualified path representing room_id_blurb_id resource.
   * @returns {string} A string representing the blurb_id.
   */
  matchBlurbIdFromRoomIdBlurbIdName(roomIdBlurbIdName: string) {
    return this._pathTemplates.roomIdBlurbIdPathTemplate.match(roomIdBlurbIdName).blurb_id;
  }

  /**
   * Return a fully-qualified session resource name string.
   *
   * @param {string} session
   * @returns {string} Resource name string.
   */
  sessionPath(session:string) {
    return this._pathTemplates.sessionPathTemplate.render({
      session: session,
    });
  }

  /**
   * Parse the session from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromSessionName(sessionName: string) {
    return this._pathTemplates.sessionPathTemplate.match(sessionName).session;
  }

  /**
   * Return a fully-qualified test resource name string.
   *
   * @param {string} session
   * @param {string} test
   * @returns {string} Resource name string.
   */
  testPath(session:string,test:string) {
    return this._pathTemplates.testPathTemplate.render({
      session: session,
      test: test,
    });
  }

  /**
   * Parse the session from Test resource.
   *
   * @param {string} testName
   *   A fully-qualified path representing Test resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromTestName(testName: string) {
    return this._pathTemplates.testPathTemplate.match(testName).session;
  }

  /**
   * Parse the test from Test resource.
   *
   * @param {string} testName
   *   A fully-qualified path representing Test resource.
   * @returns {string} A string representing the test.
   */
  matchTestFromTestName(testName: string) {
    return this._pathTemplates.testPathTemplate.match(testName).test;
  }

  /**
   * Return a fully-qualified user resource name string.
   *
   * @param {string} user_id
   * @returns {string} Resource name string.
   */
  userPath(userId:string) {
    return this._pathTemplates.userPathTemplate.render({
      user_id: userId,
    });
  }

  /**
   * Parse the user_id from User resource.
   *
   * @param {string} userName
   *   A fully-qualified path representing User resource.
   * @returns {string} A string representing the user_id.
   */
  matchUserIdFromUserName(userName: string) {
    return this._pathTemplates.userPathTemplate.match(userName).user_id;
  }

  /**
   * Return a fully-qualified userIdBlurbId resource name string.
   *
   * @param {string} user_id
   * @param {string} blurb_id
   * @returns {string} Resource name string.
   */
  userIdBlurbIdPath(userId:string,blurbId:string) {
    return this._pathTemplates.userIdBlurbIdPathTemplate.render({
      user_id: userId,
      blurb_id: blurbId,
    });
  }

  /**
   * Parse the user_id from UserIdBlurbId resource.
   *
   * @param {string} userIdBlurbIdName
   *   A fully-qualified path representing user_id_blurb_id resource.
   * @returns {string} A string representing the user_id.
   */
  matchUserIdFromUserIdBlurbIdName(userIdBlurbIdName: string) {
    return this._pathTemplates.userIdBlurbIdPathTemplate.match(userIdBlurbIdName).user_id;
  }

  /**
   * Parse the blurb_id from UserIdBlurbId resource.
   *
   * @param {string} userIdBlurbIdName
   *   A fully-qualified path representing user_id_blurb_id resource.
   * @returns {string} A string representing the blurb_id.
   */
  matchBlurbIdFromUserIdBlurbIdName(userIdBlurbIdName: string) {
    return this._pathTemplates.userIdBlurbIdPathTemplate.match(userIdBlurbIdName).blurb_id;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    if (!this._terminated) {
      return this.testingStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
