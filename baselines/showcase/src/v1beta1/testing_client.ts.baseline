// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall, IamClient, IamProtos, LocationsClient, LocationProtos} from 'google-gax';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/testing_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './testing_client_config.json';
import { operationsProtos } from 'google-gax';
const version = require('../../../package.json').version;

/**
 *  A service to facilitate running discrete sets of tests
 *  against Showcase.
 * @class
 * @memberof v1beta1
 */
export class TestingClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  testingStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of TestingClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof TestingClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new IamClient(this._gaxGrpc, opts);
  
    this.locationsClient = new LocationsClient(this._gaxGrpc, opts);
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      blueprintPathTemplate: new this._gaxModule.PathTemplate(
        'sessions/{session}/tests/{test}/blueprints/{blueprint}'
      ),
      roomPathTemplate: new this._gaxModule.PathTemplate(
        'rooms/{room_id}'
      ),
      roomIdBlurbIdPathTemplate: new this._gaxModule.PathTemplate(
        'rooms/{room_id}/blurbs/{blurb_id}'
      ),
      roomIdBlurbsLegacyRoomIdBlurbIdPathTemplate: new this._gaxModule.PathTemplate(
        'rooms/{room_id}/blurbs/legacy/{legacy_room_id}.{blurb_id}'
      ),
      sessionPathTemplate: new this._gaxModule.PathTemplate(
        'sessions/{session}'
      ),
      testPathTemplate: new this._gaxModule.PathTemplate(
        'sessions/{session}/tests/{test}'
      ),
      userPathTemplate: new this._gaxModule.PathTemplate(
        'users/{user_id}'
      ),
      userIdProfileBlurbIdPathTemplate: new this._gaxModule.PathTemplate(
        'user/{user_id}/profile/blurbs/{blurb_id}'
      ),
      userIdProfileBlurbsLegacyUserIdBlurbIdPathTemplate: new this._gaxModule.PathTemplate(
        'user/{user_id}/profile/blurbs/legacy/{legacy_user_id}~{blurb_id}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listSessions:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'sessions'),
      listTests:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'tests')
    };
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.

    this.operationsClient = this._gaxModule.lro({
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    }).operationsClient(opts);

    this.descriptors.longrunning = {
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.showcase.v1beta1.Testing', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = gax.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.testingStub) {
      return this.testingStub;
    }

    // Put together the "service stub" for
    // google.showcase.v1beta1.Testing.
    this.testingStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.showcase.v1beta1.Testing') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.showcase.v1beta1.Testing,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const testingStubMethods =
        ['createSession', 'getSession', 'listSessions', 'deleteSession', 'reportSession', 'listTests', 'deleteTest', 'verifyTest'];
    for (const methodName of testingStubMethods) {
      const callPromise = this.testingStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.testingStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'localhost';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'localhost';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 7469;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Creates a new testing session.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.showcase.v1beta1.Session} request.session
 *   The session to be created.
 *   Sessions are immutable once they are created (although they can
 *   be deleted).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Session]{@link google.showcase.v1beta1.Session}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/testing.create_session.js</caption>
 * region_tag:localhost_v1beta1_generated_Testing_CreateSession_async
 */
  createSession(
      request?: protos.google.showcase.v1beta1.ICreateSessionRequest,
      options?: CallOptions):
      Promise<[
        protos.google.showcase.v1beta1.ISession,
        protos.google.showcase.v1beta1.ICreateSessionRequest|undefined, {}|undefined
      ]>;
  createSession(
      request: protos.google.showcase.v1beta1.ICreateSessionRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.showcase.v1beta1.ISession,
          protos.google.showcase.v1beta1.ICreateSessionRequest|null|undefined,
          {}|null|undefined>): void;
  createSession(
      request: protos.google.showcase.v1beta1.ICreateSessionRequest,
      callback: Callback<
          protos.google.showcase.v1beta1.ISession,
          protos.google.showcase.v1beta1.ICreateSessionRequest|null|undefined,
          {}|null|undefined>): void;
  createSession(
      request?: protos.google.showcase.v1beta1.ICreateSessionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.showcase.v1beta1.ISession,
          protos.google.showcase.v1beta1.ICreateSessionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.showcase.v1beta1.ISession,
          protos.google.showcase.v1beta1.ICreateSessionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.showcase.v1beta1.ISession,
        protos.google.showcase.v1beta1.ICreateSessionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.createSession(request, options, callback);
  }
/**
 * Gets a testing session.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The session to be retrieved.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Session]{@link google.showcase.v1beta1.Session}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/testing.get_session.js</caption>
 * region_tag:localhost_v1beta1_generated_Testing_GetSession_async
 */
  getSession(
      request?: protos.google.showcase.v1beta1.IGetSessionRequest,
      options?: CallOptions):
      Promise<[
        protos.google.showcase.v1beta1.ISession,
        protos.google.showcase.v1beta1.IGetSessionRequest|undefined, {}|undefined
      ]>;
  getSession(
      request: protos.google.showcase.v1beta1.IGetSessionRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.showcase.v1beta1.ISession,
          protos.google.showcase.v1beta1.IGetSessionRequest|null|undefined,
          {}|null|undefined>): void;
  getSession(
      request: protos.google.showcase.v1beta1.IGetSessionRequest,
      callback: Callback<
          protos.google.showcase.v1beta1.ISession,
          protos.google.showcase.v1beta1.IGetSessionRequest|null|undefined,
          {}|null|undefined>): void;
  getSession(
      request?: protos.google.showcase.v1beta1.IGetSessionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.showcase.v1beta1.ISession,
          protos.google.showcase.v1beta1.IGetSessionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.showcase.v1beta1.ISession,
          protos.google.showcase.v1beta1.IGetSessionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.showcase.v1beta1.ISession,
        protos.google.showcase.v1beta1.IGetSessionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getSession(request, options, callback);
  }
/**
 * Delete a test session.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The session to be deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/testing.delete_session.js</caption>
 * region_tag:localhost_v1beta1_generated_Testing_DeleteSession_async
 */
  deleteSession(
      request?: protos.google.showcase.v1beta1.IDeleteSessionRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.showcase.v1beta1.IDeleteSessionRequest|undefined, {}|undefined
      ]>;
  deleteSession(
      request: protos.google.showcase.v1beta1.IDeleteSessionRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteSessionRequest|null|undefined,
          {}|null|undefined>): void;
  deleteSession(
      request: protos.google.showcase.v1beta1.IDeleteSessionRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteSessionRequest|null|undefined,
          {}|null|undefined>): void;
  deleteSession(
      request?: protos.google.showcase.v1beta1.IDeleteSessionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteSessionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteSessionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.showcase.v1beta1.IDeleteSessionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteSession(request, options, callback);
  }
/**
 * Report on the status of a session.
 * This generates a report detailing which tests have been completed,
 * and an overall rollup.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The session to be reported on.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ReportSessionResponse]{@link google.showcase.v1beta1.ReportSessionResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/testing.report_session.js</caption>
 * region_tag:localhost_v1beta1_generated_Testing_ReportSession_async
 */
  reportSession(
      request?: protos.google.showcase.v1beta1.IReportSessionRequest,
      options?: CallOptions):
      Promise<[
        protos.google.showcase.v1beta1.IReportSessionResponse,
        protos.google.showcase.v1beta1.IReportSessionRequest|undefined, {}|undefined
      ]>;
  reportSession(
      request: protos.google.showcase.v1beta1.IReportSessionRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.showcase.v1beta1.IReportSessionResponse,
          protos.google.showcase.v1beta1.IReportSessionRequest|null|undefined,
          {}|null|undefined>): void;
  reportSession(
      request: protos.google.showcase.v1beta1.IReportSessionRequest,
      callback: Callback<
          protos.google.showcase.v1beta1.IReportSessionResponse,
          protos.google.showcase.v1beta1.IReportSessionRequest|null|undefined,
          {}|null|undefined>): void;
  reportSession(
      request?: protos.google.showcase.v1beta1.IReportSessionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.showcase.v1beta1.IReportSessionResponse,
          protos.google.showcase.v1beta1.IReportSessionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.showcase.v1beta1.IReportSessionResponse,
          protos.google.showcase.v1beta1.IReportSessionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.showcase.v1beta1.IReportSessionResponse,
        protos.google.showcase.v1beta1.IReportSessionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.reportSession(request, options, callback);
  }
/**
 * Explicitly decline to implement a test.
 *
 * This removes the test from subsequent `ListTests` calls, and
 * attempting to do the test will error.
 *
 * This method will error if attempting to delete a required test.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The test to be deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/testing.delete_test.js</caption>
 * region_tag:localhost_v1beta1_generated_Testing_DeleteTest_async
 */
  deleteTest(
      request?: protos.google.showcase.v1beta1.IDeleteTestRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.showcase.v1beta1.IDeleteTestRequest|undefined, {}|undefined
      ]>;
  deleteTest(
      request: protos.google.showcase.v1beta1.IDeleteTestRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteTestRequest|null|undefined,
          {}|null|undefined>): void;
  deleteTest(
      request: protos.google.showcase.v1beta1.IDeleteTestRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteTestRequest|null|undefined,
          {}|null|undefined>): void;
  deleteTest(
      request?: protos.google.showcase.v1beta1.IDeleteTestRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteTestRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.showcase.v1beta1.IDeleteTestRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.showcase.v1beta1.IDeleteTestRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteTest(request, options, callback);
  }
/**
 * Register a response to a test.
 *
 * In cases where a test involves registering a final answer at the
 * end of the test, this method provides the means to do so.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The test to have an answer registered to it.
 * @param {Buffer} request.answer
 *   The answer from the test.
 * @param {Buffer[]} request.answers
 *   The answers from the test if multiple are to be checked
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [VerifyTestResponse]{@link google.showcase.v1beta1.VerifyTestResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/testing.verify_test.js</caption>
 * region_tag:localhost_v1beta1_generated_Testing_VerifyTest_async
 */
  verifyTest(
      request?: protos.google.showcase.v1beta1.IVerifyTestRequest,
      options?: CallOptions):
      Promise<[
        protos.google.showcase.v1beta1.IVerifyTestResponse,
        protos.google.showcase.v1beta1.IVerifyTestRequest|undefined, {}|undefined
      ]>;
  verifyTest(
      request: protos.google.showcase.v1beta1.IVerifyTestRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.showcase.v1beta1.IVerifyTestResponse,
          protos.google.showcase.v1beta1.IVerifyTestRequest|null|undefined,
          {}|null|undefined>): void;
  verifyTest(
      request: protos.google.showcase.v1beta1.IVerifyTestRequest,
      callback: Callback<
          protos.google.showcase.v1beta1.IVerifyTestResponse,
          protos.google.showcase.v1beta1.IVerifyTestRequest|null|undefined,
          {}|null|undefined>): void;
  verifyTest(
      request?: protos.google.showcase.v1beta1.IVerifyTestRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.showcase.v1beta1.IVerifyTestResponse,
          protos.google.showcase.v1beta1.IVerifyTestRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.showcase.v1beta1.IVerifyTestResponse,
          protos.google.showcase.v1beta1.IVerifyTestRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.showcase.v1beta1.IVerifyTestResponse,
        protos.google.showcase.v1beta1.IVerifyTestRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.verifyTest(request, options, callback);
  }

 /**
 * Lists the current test sessions.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of sessions to return per page.
 * @param {string} request.pageToken
 *   The page token, for retrieving subsequent pages.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Session]{@link google.showcase.v1beta1.Session}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listSessionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listSessions(
      request?: protos.google.showcase.v1beta1.IListSessionsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.showcase.v1beta1.ISession[],
        protos.google.showcase.v1beta1.IListSessionsRequest|null,
        protos.google.showcase.v1beta1.IListSessionsResponse
      ]>;
  listSessions(
      request: protos.google.showcase.v1beta1.IListSessionsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.showcase.v1beta1.IListSessionsRequest,
          protos.google.showcase.v1beta1.IListSessionsResponse|null|undefined,
          protos.google.showcase.v1beta1.ISession>): void;
  listSessions(
      request: protos.google.showcase.v1beta1.IListSessionsRequest,
      callback: PaginationCallback<
          protos.google.showcase.v1beta1.IListSessionsRequest,
          protos.google.showcase.v1beta1.IListSessionsResponse|null|undefined,
          protos.google.showcase.v1beta1.ISession>): void;
  listSessions(
      request?: protos.google.showcase.v1beta1.IListSessionsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.showcase.v1beta1.IListSessionsRequest,
          protos.google.showcase.v1beta1.IListSessionsResponse|null|undefined,
          protos.google.showcase.v1beta1.ISession>,
      callback?: PaginationCallback<
          protos.google.showcase.v1beta1.IListSessionsRequest,
          protos.google.showcase.v1beta1.IListSessionsResponse|null|undefined,
          protos.google.showcase.v1beta1.ISession>):
      Promise<[
        protos.google.showcase.v1beta1.ISession[],
        protos.google.showcase.v1beta1.IListSessionsRequest|null,
        protos.google.showcase.v1beta1.IListSessionsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.listSessions(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of sessions to return per page.
 * @param {string} request.pageToken
 *   The page token, for retrieving subsequent pages.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Session]{@link google.showcase.v1beta1.Session} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listSessionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listSessionsStream(
      request?: protos.google.showcase.v1beta1.IListSessionsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listSessions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSessions.createStream(
      this.innerApiCalls.listSessions as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listSessions`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of sessions to return per page.
 * @param {string} request.pageToken
 *   The page token, for retrieving subsequent pages.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Session]{@link google.showcase.v1beta1.Session}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/testing.list_sessions.js</caption>
 * region_tag:localhost_v1beta1_generated_Testing_ListSessions_async
 */
  listSessionsAsync(
      request?: protos.google.showcase.v1beta1.IListSessionsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.showcase.v1beta1.ISession>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listSessions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSessions.asyncIterate(
      this.innerApiCalls['listSessions'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.showcase.v1beta1.ISession>;
  }
 /**
 * List the tests of a sessesion.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The session.
 * @param {number} request.pageSize
 *   The maximum number of tests to return per page.
 * @param {string} request.pageToken
 *   The page token, for retrieving subsequent pages.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Test]{@link google.showcase.v1beta1.Test}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listTestsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listTests(
      request?: protos.google.showcase.v1beta1.IListTestsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.showcase.v1beta1.ITest[],
        protos.google.showcase.v1beta1.IListTestsRequest|null,
        protos.google.showcase.v1beta1.IListTestsResponse
      ]>;
  listTests(
      request: protos.google.showcase.v1beta1.IListTestsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.showcase.v1beta1.IListTestsRequest,
          protos.google.showcase.v1beta1.IListTestsResponse|null|undefined,
          protos.google.showcase.v1beta1.ITest>): void;
  listTests(
      request: protos.google.showcase.v1beta1.IListTestsRequest,
      callback: PaginationCallback<
          protos.google.showcase.v1beta1.IListTestsRequest,
          protos.google.showcase.v1beta1.IListTestsResponse|null|undefined,
          protos.google.showcase.v1beta1.ITest>): void;
  listTests(
      request?: protos.google.showcase.v1beta1.IListTestsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.showcase.v1beta1.IListTestsRequest,
          protos.google.showcase.v1beta1.IListTestsResponse|null|undefined,
          protos.google.showcase.v1beta1.ITest>,
      callback?: PaginationCallback<
          protos.google.showcase.v1beta1.IListTestsRequest,
          protos.google.showcase.v1beta1.IListTestsResponse|null|undefined,
          protos.google.showcase.v1beta1.ITest>):
      Promise<[
        protos.google.showcase.v1beta1.ITest[],
        protos.google.showcase.v1beta1.IListTestsRequest|null,
        protos.google.showcase.v1beta1.IListTestsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listTests(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The session.
 * @param {number} request.pageSize
 *   The maximum number of tests to return per page.
 * @param {string} request.pageToken
 *   The page token, for retrieving subsequent pages.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Test]{@link google.showcase.v1beta1.Test} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listTestsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listTestsStream(
      request?: protos.google.showcase.v1beta1.IListTestsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const defaultCallSettings = this._defaults['listTests'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTests.createStream(
      this.innerApiCalls.listTests as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listTests`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The session.
 * @param {number} request.pageSize
 *   The maximum number of tests to return per page.
 * @param {string} request.pageToken
 *   The page token, for retrieving subsequent pages.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Test]{@link google.showcase.v1beta1.Test}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/testing.list_tests.js</caption>
 * region_tag:localhost_v1beta1_generated_Testing_ListTests_async
 */
  listTestsAsync(
      request?: protos.google.showcase.v1beta1.IListTestsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.showcase.v1beta1.ITest>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const defaultCallSettings = this._defaults['listTests'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTests.asyncIterate(
      this.innerApiCalls['listTests'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.showcase.v1beta1.ITest>;
  }
/**
 * Gets the access control policy for a resource. Returns an empty policy
 * if the resource exists and does not have a policy set.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {Object} [request.options]
 *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *   `GetIamPolicy`. This field is only used by Cloud IAM.
 *
 *   This object should have the same structure as [GetPolicyOptions]{@link google.iam.v1.GetPolicyOptions}
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see
 *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see
 *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<IamProtos.google.iam.v1.TestIamPermissionsResponse> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

/**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

/**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

/**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}. The promise has a method named
   * "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
   cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified blueprint resource name string.
   *
   * @param {string} session
   * @param {string} test
   * @param {string} blueprint
   * @returns {string} Resource name string.
   */
  blueprintPath(session:string,test:string,blueprint:string) {
    return this.pathTemplates.blueprintPathTemplate.render({
      session: session,
      test: test,
      blueprint: blueprint,
    });
  }

  /**
   * Parse the session from Blueprint resource.
   *
   * @param {string} blueprintName
   *   A fully-qualified path representing Blueprint resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromBlueprintName(blueprintName: string) {
    return this.pathTemplates.blueprintPathTemplate.match(blueprintName).session;
  }

  /**
   * Parse the test from Blueprint resource.
   *
   * @param {string} blueprintName
   *   A fully-qualified path representing Blueprint resource.
   * @returns {string} A string representing the test.
   */
  matchTestFromBlueprintName(blueprintName: string) {
    return this.pathTemplates.blueprintPathTemplate.match(blueprintName).test;
  }

  /**
   * Parse the blueprint from Blueprint resource.
   *
   * @param {string} blueprintName
   *   A fully-qualified path representing Blueprint resource.
   * @returns {string} A string representing the blueprint.
   */
  matchBlueprintFromBlueprintName(blueprintName: string) {
    return this.pathTemplates.blueprintPathTemplate.match(blueprintName).blueprint;
  }

  /**
   * Return a fully-qualified room resource name string.
   *
   * @param {string} room_id
   * @returns {string} Resource name string.
   */
  roomPath(roomId:string) {
    return this.pathTemplates.roomPathTemplate.render({
      room_id: roomId,
    });
  }

  /**
   * Parse the room_id from Room resource.
   *
   * @param {string} roomName
   *   A fully-qualified path representing Room resource.
   * @returns {string} A string representing the room_id.
   */
  matchRoomIdFromRoomName(roomName: string) {
    return this.pathTemplates.roomPathTemplate.match(roomName).room_id;
  }

  /**
   * Return a fully-qualified roomIdBlurbId resource name string.
   *
   * @param {string} room_id
   * @param {string} blurb_id
   * @returns {string} Resource name string.
   */
  roomIdBlurbIdPath(roomId:string,blurbId:string) {
    return this.pathTemplates.roomIdBlurbIdPathTemplate.render({
      room_id: roomId,
      blurb_id: blurbId,
    });
  }

  /**
   * Parse the room_id from RoomIdBlurbId resource.
   *
   * @param {string} roomIdBlurbIdName
   *   A fully-qualified path representing room_id_blurb_id resource.
   * @returns {string} A string representing the room_id.
   */
  matchRoomIdFromRoomIdBlurbIdName(roomIdBlurbIdName: string) {
    return this.pathTemplates.roomIdBlurbIdPathTemplate.match(roomIdBlurbIdName).room_id;
  }

  /**
   * Parse the blurb_id from RoomIdBlurbId resource.
   *
   * @param {string} roomIdBlurbIdName
   *   A fully-qualified path representing room_id_blurb_id resource.
   * @returns {string} A string representing the blurb_id.
   */
  matchBlurbIdFromRoomIdBlurbIdName(roomIdBlurbIdName: string) {
    return this.pathTemplates.roomIdBlurbIdPathTemplate.match(roomIdBlurbIdName).blurb_id;
  }

  /**
   * Return a fully-qualified roomIdBlurbsLegacyRoomIdBlurbId resource name string.
   *
   * @param {string} room_id
   * @param {string} legacy_room_id
   * @param {string} blurb_id
   * @returns {string} Resource name string.
   */
  roomIdBlurbsLegacyRoomIdBlurbIdPath(roomId:string,legacyRoomId:string,blurbId:string) {
    return this.pathTemplates.roomIdBlurbsLegacyRoomIdBlurbIdPathTemplate.render({
      room_id: roomId,
      legacy_room_id: legacyRoomId,
      blurb_id: blurbId,
    });
  }

  /**
   * Parse the room_id from RoomIdBlurbsLegacyRoomIdBlurbId resource.
   *
   * @param {string} roomIdBlurbsLegacyRoomIdBlurbIdName
   *   A fully-qualified path representing room_id_blurbs_legacy_room_id_blurb_id resource.
   * @returns {string} A string representing the room_id.
   */
  matchRoomIdFromRoomIdBlurbsLegacyRoomIdBlurbIdName(roomIdBlurbsLegacyRoomIdBlurbIdName: string) {
    return this.pathTemplates.roomIdBlurbsLegacyRoomIdBlurbIdPathTemplate.match(roomIdBlurbsLegacyRoomIdBlurbIdName).room_id;
  }

  /**
   * Parse the legacy_room_id from RoomIdBlurbsLegacyRoomIdBlurbId resource.
   *
   * @param {string} roomIdBlurbsLegacyRoomIdBlurbIdName
   *   A fully-qualified path representing room_id_blurbs_legacy_room_id_blurb_id resource.
   * @returns {string} A string representing the legacy_room_id.
   */
  matchLegacyRoomIdFromRoomIdBlurbsLegacyRoomIdBlurbIdName(roomIdBlurbsLegacyRoomIdBlurbIdName: string) {
    return this.pathTemplates.roomIdBlurbsLegacyRoomIdBlurbIdPathTemplate.match(roomIdBlurbsLegacyRoomIdBlurbIdName).legacy_room_id;
  }

  /**
   * Parse the blurb_id from RoomIdBlurbsLegacyRoomIdBlurbId resource.
   *
   * @param {string} roomIdBlurbsLegacyRoomIdBlurbIdName
   *   A fully-qualified path representing room_id_blurbs_legacy_room_id_blurb_id resource.
   * @returns {string} A string representing the blurb_id.
   */
  matchBlurbIdFromRoomIdBlurbsLegacyRoomIdBlurbIdName(roomIdBlurbsLegacyRoomIdBlurbIdName: string) {
    return this.pathTemplates.roomIdBlurbsLegacyRoomIdBlurbIdPathTemplate.match(roomIdBlurbsLegacyRoomIdBlurbIdName).blurb_id;
  }

  /**
   * Return a fully-qualified session resource name string.
   *
   * @param {string} session
   * @returns {string} Resource name string.
   */
  sessionPath(session:string) {
    return this.pathTemplates.sessionPathTemplate.render({
      session: session,
    });
  }

  /**
   * Parse the session from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).session;
  }

  /**
   * Return a fully-qualified test resource name string.
   *
   * @param {string} session
   * @param {string} test
   * @returns {string} Resource name string.
   */
  testPath(session:string,test:string) {
    return this.pathTemplates.testPathTemplate.render({
      session: session,
      test: test,
    });
  }

  /**
   * Parse the session from Test resource.
   *
   * @param {string} testName
   *   A fully-qualified path representing Test resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromTestName(testName: string) {
    return this.pathTemplates.testPathTemplate.match(testName).session;
  }

  /**
   * Parse the test from Test resource.
   *
   * @param {string} testName
   *   A fully-qualified path representing Test resource.
   * @returns {string} A string representing the test.
   */
  matchTestFromTestName(testName: string) {
    return this.pathTemplates.testPathTemplate.match(testName).test;
  }

  /**
   * Return a fully-qualified user resource name string.
   *
   * @param {string} user_id
   * @returns {string} Resource name string.
   */
  userPath(userId:string) {
    return this.pathTemplates.userPathTemplate.render({
      user_id: userId,
    });
  }

  /**
   * Parse the user_id from User resource.
   *
   * @param {string} userName
   *   A fully-qualified path representing User resource.
   * @returns {string} A string representing the user_id.
   */
  matchUserIdFromUserName(userName: string) {
    return this.pathTemplates.userPathTemplate.match(userName).user_id;
  }

  /**
   * Return a fully-qualified userIdProfileBlurbId resource name string.
   *
   * @param {string} user_id
   * @param {string} blurb_id
   * @returns {string} Resource name string.
   */
  userIdProfileBlurbIdPath(userId:string,blurbId:string) {
    return this.pathTemplates.userIdProfileBlurbIdPathTemplate.render({
      user_id: userId,
      blurb_id: blurbId,
    });
  }

  /**
   * Parse the user_id from UserIdProfileBlurbId resource.
   *
   * @param {string} userIdProfileBlurbIdName
   *   A fully-qualified path representing user_id_profile_blurb_id resource.
   * @returns {string} A string representing the user_id.
   */
  matchUserIdFromUserIdProfileBlurbIdName(userIdProfileBlurbIdName: string) {
    return this.pathTemplates.userIdProfileBlurbIdPathTemplate.match(userIdProfileBlurbIdName).user_id;
  }

  /**
   * Parse the blurb_id from UserIdProfileBlurbId resource.
   *
   * @param {string} userIdProfileBlurbIdName
   *   A fully-qualified path representing user_id_profile_blurb_id resource.
   * @returns {string} A string representing the blurb_id.
   */
  matchBlurbIdFromUserIdProfileBlurbIdName(userIdProfileBlurbIdName: string) {
    return this.pathTemplates.userIdProfileBlurbIdPathTemplate.match(userIdProfileBlurbIdName).blurb_id;
  }

  /**
   * Return a fully-qualified userIdProfileBlurbsLegacyUserIdBlurbId resource name string.
   *
   * @param {string} user_id
   * @param {string} legacy_user_id
   * @param {string} blurb_id
   * @returns {string} Resource name string.
   */
  userIdProfileBlurbsLegacyUserIdBlurbIdPath(userId:string,legacyUserId:string,blurbId:string) {
    return this.pathTemplates.userIdProfileBlurbsLegacyUserIdBlurbIdPathTemplate.render({
      user_id: userId,
      legacy_user_id: legacyUserId,
      blurb_id: blurbId,
    });
  }

  /**
   * Parse the user_id from UserIdProfileBlurbsLegacyUserIdBlurbId resource.
   *
   * @param {string} userIdProfileBlurbsLegacyUserIdBlurbIdName
   *   A fully-qualified path representing user_id_profile_blurbs_legacy_user_id_blurb_id resource.
   * @returns {string} A string representing the user_id.
   */
  matchUserIdFromUserIdProfileBlurbsLegacyUserIdBlurbIdName(userIdProfileBlurbsLegacyUserIdBlurbIdName: string) {
    return this.pathTemplates.userIdProfileBlurbsLegacyUserIdBlurbIdPathTemplate.match(userIdProfileBlurbsLegacyUserIdBlurbIdName).user_id;
  }

  /**
   * Parse the legacy_user_id from UserIdProfileBlurbsLegacyUserIdBlurbId resource.
   *
   * @param {string} userIdProfileBlurbsLegacyUserIdBlurbIdName
   *   A fully-qualified path representing user_id_profile_blurbs_legacy_user_id_blurb_id resource.
   * @returns {string} A string representing the legacy_user_id.
   */
  matchLegacyUserIdFromUserIdProfileBlurbsLegacyUserIdBlurbIdName(userIdProfileBlurbsLegacyUserIdBlurbIdName: string) {
    return this.pathTemplates.userIdProfileBlurbsLegacyUserIdBlurbIdPathTemplate.match(userIdProfileBlurbsLegacyUserIdBlurbIdName).legacy_user_id;
  }

  /**
   * Parse the blurb_id from UserIdProfileBlurbsLegacyUserIdBlurbId resource.
   *
   * @param {string} userIdProfileBlurbsLegacyUserIdBlurbIdName
   *   A fully-qualified path representing user_id_profile_blurbs_legacy_user_id_blurb_id resource.
   * @returns {string} A string representing the blurb_id.
   */
  matchBlurbIdFromUserIdProfileBlurbsLegacyUserIdBlurbIdName(userIdProfileBlurbsLegacyUserIdBlurbIdName: string) {
    return this.pathTemplates.userIdProfileBlurbsLegacyUserIdBlurbIdPathTemplate.match(userIdProfileBlurbsLegacyUserIdBlurbIdName).blurb_id;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.testingStub && !this._terminated) {
      return this.testingStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
