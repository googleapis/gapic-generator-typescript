


'use strict';

function main() {
  // [START translation_list_glossaries_sample]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The name of the project from which to list all of the glossaries.
   */
  // const parent ='abc123'
  /**
   *  Optional. Requested page size. The server may return fewer glossaries than
   *  requested. If unspecified, the server picks an appropriate default.
   */
  // const [pageSize] =1234
  /**
   *  Optional. A token identifying a page of results the server should return.
   *  Typically, this is the value of [ListGlossariesResponse.next_page_token]
   *  returned from the previous call to `ListGlossaries` method.
   *  The first page is returned if `page_token`is empty or missing.
   */
  // const [pageToken] ='abc123'
  /**
   *  Optional. Filter specifying constraints of a list operation.
   *  Filtering is not supported yet, and the parameter currently has no effect.
   *  If missing, no filtering is performed.
   */
  // const [filter] ='abc123'

  // Imports the Translation library
  const {TranslationServiceClient} = require('translation');

  // Instantiates a client
  const translationClient = new TranslationServiceClient();

  async function listGlossaries() {
    // Construct request
    const request = {
      parent,
    };

    // Run request
    const iterable = await translationClient.listGlossariesAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  listGlossaries();
  // [END translation_list_glossaries_sample]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
