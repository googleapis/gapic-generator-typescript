// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent) {
  // [START storage_v2_generated_Storage_ListBuckets_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The project whose buckets we are listing.
   */
  // const parent = 'abc123'
  /**
   *  Maximum number of buckets to return in a single response. The service will
   *  use this parameter or 1,000 items, whichever is smaller. If "acl" is
   *  present in the read_mask, the service will use this parameter of 200 items,
   *  whichever is smaller.
   */
  // const pageSize = 1234
  /**
   *  A previously-returned page token representing part of the larger set of
   *  results to view.
   */
  // const pageToken = 'abc123'
  /**
   *  Filter results to buckets whose names begin with this prefix.
   */
  // const prefix = 'abc123'
  /**
   *  Mask specifying which fields to read from each result.
   *  If no mask is specified, will default to all fields except items.owner,
   *  items.acl, and items.default_object_acl.
   *  * may be used to mean "all fields".
   */
  // const readMask = {}

  // Imports the Storage library
  const {StorageClient} = require('storage').v2;

  // Instantiates a client
  const storageClient = new StorageClient();

  async function callListBuckets() {
    // Construct request
    const request = {
      parent,
    };

    // Run request
    const iterable = await storageClient.listBucketsAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  callListBuckets();
  // [END storage_v2_generated_Storage_ListBuckets_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
