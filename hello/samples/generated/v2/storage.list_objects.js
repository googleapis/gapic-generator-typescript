// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent) {
  // [START storage_v2_generated_Storage_ListObjects_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. Name of the bucket in which to look for objects.
   */
  // const parent = 'abc123'
  /**
   *  Maximum number of `items` plus `prefixes` to return
   *  in a single page of responses. As duplicate `prefixes` are
   *  omitted, fewer total results may be returned than requested. The service
   *  will use this parameter or 1,000 items, whichever is smaller.
   */
  // const pageSize = 1234
  /**
   *  A previously-returned page token representing part of the larger set of
   *  results to view.
   */
  // const pageToken = 'abc123'
  /**
   *  If set, returns results in a directory-like mode. `items` will contain
   *  only objects whose names, aside from the `prefix`, do not
   *  contain `delimiter`. Objects whose names, aside from the
   *  `prefix`, contain `delimiter` will have their name,
   *  truncated after the `delimiter`, returned in
   *  `prefixes`. Duplicate `prefixes` are omitted.
   */
  // const delimiter = 'abc123'
  /**
   *  If true, objects that end in exactly one instance of `delimiter`
   *  will have their metadata included in `items` in addition to
   *  `prefixes`.
   */
  // const includeTrailingDelimiter = true
  /**
   *  Filter results to objects whose names begin with this prefix.
   */
  // const prefix = 'abc123'
  /**
   *  If `true`, lists all versions of an object as distinct results.
   *  For more information, see
   *  Object
   *  Versioning (https://cloud.google.com/storage/docs/object-versioning).
   */
  // const versions = true
  /**
   *  Mask specifying which fields to read from each result.
   *  If no mask is specified, will default to all fields except items.acl and
   *  items.owner.
   *  * may be used to mean "all fields".
   */
  // const readMask = {}
  /**
   *  Optional. Filter results to objects whose names are lexicographically equal
   *  to or after lexicographic_start. If lexicographic_end is also set, the
   *  objects listed have names between lexicographic_start (inclusive) and
   *  lexicographic_end (exclusive).
   */
  // const lexicographicStart = 'abc123'
  /**
   *  Optional. Filter results to objects whose names are lexicographically
   *  before lexicographic_end. If lexicographic_start is also set, the objects
   *  listed have names between lexicographic_start (inclusive) and
   *  lexicographic_end (exclusive).
   */
  // const lexicographicEnd = 'abc123'
  /**
   *  Optional. If true, only list all soft-deleted versions of the object.
   *  Soft delete policy is required to set this option.
   */
  // const softDeleted = true
  /**
   *  Optional. Filter results to objects and prefixes that match this glob
   *  pattern. See List Objects Using
   *  Glob (https://cloud.google.com/storage/docs/json_api/v1/objects/list#list-objects-and-prefixes-using-glob)
   *  for the full syntax.
   */
  // const matchGlob = 'abc123'

  // Imports the Storage library
  const {StorageClient} = require('storage').v2;

  // Instantiates a client
  const storageClient = new StorageClient();

  async function callListObjects() {
    // Construct request
    const request = {
      parent,
    };

    // Run request
    const iterable = await storageClient.listObjectsAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  callListObjects();
  // [END storage_v2_generated_Storage_ListObjects_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
