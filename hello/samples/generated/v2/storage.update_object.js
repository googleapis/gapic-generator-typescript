// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(object, updateMask) {
  // [START storage_v2_generated_Storage_UpdateObject_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The object to update.
   *  The object's bucket and name fields are used to identify the object to
   *  update. If present, the object's generation field selects a specific
   *  revision of this object whose metadata should be updated. Otherwise,
   *  assumes the live version of the object.
   */
  // const object = {}
  /**
   *  Makes the operation conditional on whether the object's current generation
   *  matches the given value. Setting to 0 makes the operation succeed only if
   *  there are no live versions of the object.
   */
  // const ifGenerationMatch = 1234
  /**
   *  Makes the operation conditional on whether the object's live generation
   *  does not match the given value. If no live object exists, the precondition
   *  fails. Setting to 0 makes the operation succeed only if there is a live
   *  version of the object.
   */
  // const ifGenerationNotMatch = 1234
  /**
   *  Makes the operation conditional on whether the object's current
   *  metageneration matches the given value.
   */
  // const ifMetagenerationMatch = 1234
  /**
   *  Makes the operation conditional on whether the object's current
   *  metageneration does not match the given value.
   */
  // const ifMetagenerationNotMatch = 1234
  /**
   *  Apply a predefined set of access controls to this object.
   *  Valid values are "authenticatedRead", "bucketOwnerFullControl",
   *  "bucketOwnerRead", "private", "projectPrivate", or "publicRead".
   */
  // const predefinedAcl = 'abc123'
  /**
   *  Required. List of fields to be updated.
   *  To specify ALL fields, equivalent to the JSON API's "update" function,
   *  specify a single field with the value `*`. Note: not recommended. If a new
   *  field is introduced at a later time, an older client updating with the `*`
   *  may accidentally reset the new field's value.
   *  Not specifying any fields is an error.
   */
  // const updateMask = {}
  /**
   *  A set of parameters common to Storage API requests concerning an object.
   */
  // const commonObjectRequestParams = {}

  // Imports the Storage library
  const {StorageClient} = require('storage').v2;

  // Instantiates a client
  const storageClient = new StorageClient();

  async function callUpdateObject() {
    // Construct request
    const request = {
      object,
      updateMask,
    };

    // Run request
    const response = await storageClient.updateObject(request);
    console.log(response);
  }

  callUpdateObject();
  // [END storage_v2_generated_Storage_UpdateObject_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
