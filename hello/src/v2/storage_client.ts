// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';
import {Transform, PassThrough} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v2/storage_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './storage_client_config.json';
const version = require('../../../package.json').version;

/**
 *  ## API Overview and Naming Syntax
 *
 *  The Cloud Storage gRPC API allows applications to read and write data through
 *  the abstractions of buckets and objects. For a description of these
 *  abstractions please see https://cloud.google.com/storage/docs.
 *
 *  Resources are named as follows:
 *    - Projects are referred to as they are defined by the Resource Manager API,
 *      using strings like `projects/123456` or `projects/my-string-id`.
 *    - Buckets are named using string names of the form:
 *      `projects/{project}/buckets/{bucket}`
 *      For globally unique buckets, `_` may be substituted for the project.
 *    - Objects are uniquely identified by their name along with the name of the
 *      bucket they belong to, as separate strings in this API. For example:
 *
 *        ReadObjectRequest {
 *          bucket: 'projects/_/buckets/my-bucket'
 *          object: 'my-object'
 *        }
 *      Note that object names can contain `/` characters, which are treated as
 *      any other character (no special directory semantics).
 * @class
 * @memberof v2
 */
export class StorageClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  storageStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of StorageClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new StorageClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof StorageClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      bucketPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/buckets/{bucket}'
      ),
      cryptoKeyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}'
      ),
      notificationConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/buckets/{bucket}/notificationConfigs/{notification_config}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listBuckets:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'buckets'),
      listNotificationConfigs:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'notificationConfigs'),
      listObjects:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'objects'),
      listHmacKeys:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'hmacKeys')
    };

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this.descriptors.stream = {
      readObject: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, !!opts.fallback),
      writeObject: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.CLIENT_STREAMING, !!opts.fallback),
      bidiWriteObject: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, !!opts.fallback)
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.storage.v2.Storage', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.storageStub) {
      return this.storageStub;
    }

    // Put together the "service stub" for
    // google.storage.v2.Storage.
    this.storageStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.storage.v2.Storage') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.storage.v2.Storage,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const storageStubMethods =
        ['deleteBucket', 'getBucket', 'createBucket', 'listBuckets', 'lockBucketRetentionPolicy', 'getIamPolicy', 'setIamPolicy', 'testIamPermissions', 'updateBucket', 'deleteNotificationConfig', 'getNotificationConfig', 'createNotificationConfig', 'listNotificationConfigs', 'composeObject', 'deleteObject', 'restoreObject', 'cancelResumableWrite', 'getObject', 'readObject', 'updateObject', 'writeObject', 'bidiWriteObject', 'listObjects', 'rewriteObject', 'startResumableWrite', 'queryWriteStatus', 'getServiceAccount', 'createHmacKey', 'deleteHmacKey', 'getHmacKey', 'listHmacKeys', 'updateHmacKey'];
    for (const methodName of storageStubMethods) {
      const callPromise = this.storageStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            if (methodName in this.descriptors.stream) {
              const stream = new PassThrough();
              setImmediate(() => {
                stream.emit('error', new this._gaxModule.GoogleError('The client has already been closed.'));
              });
              return stream;
            }
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.stream[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.storageStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'storage.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'storage.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-platform.read-only',
      'https://www.googleapis.com/auth/devstorage.full_control',
      'https://www.googleapis.com/auth/devstorage.read_only',
      'https://www.googleapis.com/auth/devstorage.read_write'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Permanently deletes an empty bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of a bucket to delete.
 * @param {number} request.ifMetagenerationMatch
 *   If set, only deletes the bucket if its metageneration matches this value.
 * @param {number} request.ifMetagenerationNotMatch
 *   If set, only deletes the bucket if its metageneration does not match this
 *   value.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.delete_bucket.js</caption>
 * region_tag:storage_v2_generated_Storage_DeleteBucket_async
 */
  deleteBucket(
      request?: protos.google.storage.v2.IDeleteBucketRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v2.IDeleteBucketRequest|undefined, {}|undefined
      ]>;
  deleteBucket(
      request: protos.google.storage.v2.IDeleteBucketRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v2.IDeleteBucketRequest|null|undefined,
          {}|null|undefined>): void;
  deleteBucket(
      request: protos.google.storage.v2.IDeleteBucketRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v2.IDeleteBucketRequest|null|undefined,
          {}|null|undefined>): void;
  deleteBucket(
      request?: protos.google.storage.v2.IDeleteBucketRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v2.IDeleteBucketRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v2.IDeleteBucketRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v2.IDeleteBucketRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.deleteBucket(request, options, callback);
  }
/**
 * Returns metadata for the specified bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of a bucket.
 * @param {number} request.ifMetagenerationMatch
 *   If set, and if the bucket's current metageneration does not match the
 *   specified value, the request will return an error.
 * @param {number} request.ifMetagenerationNotMatch
 *   If set, and if the bucket's current metageneration matches the specified
 *   value, the request will return an error.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read.
 *   A "*" field may be used to indicate all fields.
 *   If no mask is specified, will default to all fields.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.storage.v2.Bucket|Bucket}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.get_bucket.js</caption>
 * region_tag:storage_v2_generated_Storage_GetBucket_async
 */
  getBucket(
      request?: protos.google.storage.v2.IGetBucketRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.IBucket,
        protos.google.storage.v2.IGetBucketRequest|undefined, {}|undefined
      ]>;
  getBucket(
      request: protos.google.storage.v2.IGetBucketRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.IBucket,
          protos.google.storage.v2.IGetBucketRequest|null|undefined,
          {}|null|undefined>): void;
  getBucket(
      request: protos.google.storage.v2.IGetBucketRequest,
      callback: Callback<
          protos.google.storage.v2.IBucket,
          protos.google.storage.v2.IGetBucketRequest|null|undefined,
          {}|null|undefined>): void;
  getBucket(
      request?: protos.google.storage.v2.IGetBucketRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.IBucket,
          protos.google.storage.v2.IGetBucketRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.IBucket,
          protos.google.storage.v2.IGetBucketRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.IBucket,
        protos.google.storage.v2.IGetBucketRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.getBucket(request, options, callback);
  }
/**
 * Creates a new bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project to which this bucket will belong.
 * @param {google.storage.v2.Bucket} request.bucket
 *   Properties of the new bucket being inserted.
 *   The name of the bucket is specified in the `bucket_id` field. Populating
 *   `bucket.name` field will result in an error.
 *   The project of the bucket must be specified in the `bucket.project` field.
 *   This field must be in `projects/{projectIdentifier}` format,
 *   {projectIdentifier} can be the project ID or project number. The `parent`
 *   field must be either empty or `projects/_`.
 * @param {string} request.bucketId
 *   Required. The ID to use for this bucket, which will become the final
 *   component of the bucket's resource name. For example, the value `foo` might
 *   result in a bucket with the name `projects/123456/buckets/foo`.
 * @param {string} request.predefinedAcl
 *   Apply a predefined set of access controls to this bucket.
 *   Valid values are "authenticatedRead", "private", "projectPrivate",
 *   "publicRead", or "publicReadWrite".
 * @param {string} request.predefinedDefaultObjectAcl
 *   Apply a predefined set of default object access controls to this bucket.
 *   Valid values are "authenticatedRead", "bucketOwnerFullControl",
 *   "bucketOwnerRead", "private", "projectPrivate", or "publicRead".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.storage.v2.Bucket|Bucket}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.create_bucket.js</caption>
 * region_tag:storage_v2_generated_Storage_CreateBucket_async
 */
  createBucket(
      request?: protos.google.storage.v2.ICreateBucketRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.IBucket,
        protos.google.storage.v2.ICreateBucketRequest|undefined, {}|undefined
      ]>;
  createBucket(
      request: protos.google.storage.v2.ICreateBucketRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.IBucket,
          protos.google.storage.v2.ICreateBucketRequest|null|undefined,
          {}|null|undefined>): void;
  createBucket(
      request: protos.google.storage.v2.ICreateBucketRequest,
      callback: Callback<
          protos.google.storage.v2.IBucket,
          protos.google.storage.v2.ICreateBucketRequest|null|undefined,
          {}|null|undefined>): void;
  createBucket(
      request?: protos.google.storage.v2.ICreateBucketRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.IBucket,
          protos.google.storage.v2.ICreateBucketRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.IBucket,
          protos.google.storage.v2.ICreateBucketRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.IBucket,
        protos.google.storage.v2.ICreateBucketRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<project>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['project'] ?? fieldValue;
          Object.assign(routingParameter, { project: parameterValue });
        }
      }
    }
    {
      const fieldValue = request.bucket?.project;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<project>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['project'] ?? fieldValue;
          Object.assign(routingParameter, { project: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.createBucket(request, options, callback);
  }
/**
 * Locks retention policy on a bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of a bucket.
 * @param {number} request.ifMetagenerationMatch
 *   Required. Makes the operation conditional on whether bucket's current
 *   metageneration matches the given value. Must be positive.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.storage.v2.Bucket|Bucket}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.lock_bucket_retention_policy.js</caption>
 * region_tag:storage_v2_generated_Storage_LockBucketRetentionPolicy_async
 */
  lockBucketRetentionPolicy(
      request?: protos.google.storage.v2.ILockBucketRetentionPolicyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.IBucket,
        protos.google.storage.v2.ILockBucketRetentionPolicyRequest|undefined, {}|undefined
      ]>;
  lockBucketRetentionPolicy(
      request: protos.google.storage.v2.ILockBucketRetentionPolicyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.IBucket,
          protos.google.storage.v2.ILockBucketRetentionPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  lockBucketRetentionPolicy(
      request: protos.google.storage.v2.ILockBucketRetentionPolicyRequest,
      callback: Callback<
          protos.google.storage.v2.IBucket,
          protos.google.storage.v2.ILockBucketRetentionPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  lockBucketRetentionPolicy(
      request?: protos.google.storage.v2.ILockBucketRetentionPolicyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.IBucket,
          protos.google.storage.v2.ILockBucketRetentionPolicyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.IBucket,
          protos.google.storage.v2.ILockBucketRetentionPolicyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.IBucket,
        protos.google.storage.v2.ILockBucketRetentionPolicyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.bucket;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.lockBucketRetentionPolicy(request, options, callback);
  }
/**
 * Gets the IAM policy for a specified bucket or object.
 * The `resource` field in the request should be
 * `projects/_/buckets/{bucket}` for a bucket or
 * `projects/_/buckets/{bucket}/objects/{object}` for an object.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {google.iam.v1.GetPolicyOptions} request.options
 *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *   `GetIamPolicy`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.iam.v1.Policy|Policy}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.get_iam_policy.js</caption>
 * region_tag:storage_v2_generated_Storage_GetIamPolicy_async
 */
  getIamPolicy(
      request?: protos.google.iam.v1.IGetIamPolicyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.IGetIamPolicyRequest|undefined, {}|undefined
      ]>;
  getIamPolicy(
      request: protos.google.iam.v1.IGetIamPolicyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  getIamPolicy(
      request: protos.google.iam.v1.IGetIamPolicyRequest,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  getIamPolicy(
      request?: protos.google.iam.v1.IGetIamPolicyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.IGetIamPolicyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.resource;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    {
      const fieldValue = request.resource;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>projects/[^/]+/buckets/[^/]+)/objects(?:/.*)?'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.getIamPolicy(request, options, callback);
  }
/**
 * Updates an IAM policy for the specified bucket or object.
 * The `resource` field in the request should be
 * `projects/_/buckets/{bucket}` for a bucket or
 * `projects/_/buckets/{bucket}/objects/{object}` for an object.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being specified.
 *   See the operation documentation for the appropriate value for this field.
 * @param {google.iam.v1.Policy} request.policy
 *   REQUIRED: The complete policy to be applied to the `resource`. The size of
 *   the policy is limited to a few 10s of KB. An empty policy is a
 *   valid policy but certain Cloud Platform services (such as Projects)
 *   might reject them.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *   the fields in the mask will be modified. If no mask is provided, the
 *   following default mask is used:
 *
 *   `paths: "bindings, etag"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.iam.v1.Policy|Policy}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.set_iam_policy.js</caption>
 * region_tag:storage_v2_generated_Storage_SetIamPolicy_async
 */
  setIamPolicy(
      request?: protos.google.iam.v1.ISetIamPolicyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.ISetIamPolicyRequest|undefined, {}|undefined
      ]>;
  setIamPolicy(
      request: protos.google.iam.v1.ISetIamPolicyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  setIamPolicy(
      request: protos.google.iam.v1.ISetIamPolicyRequest,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  setIamPolicy(
      request?: protos.google.iam.v1.ISetIamPolicyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.ISetIamPolicyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.resource;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    {
      const fieldValue = request.resource;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>projects/[^/]+/buckets/[^/]+)/objects(?:/.*)?'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.setIamPolicy(request, options, callback);
  }
/**
 * Tests a set of permissions on the given bucket or object to see which, if
 * any, are held by the caller.
 * The `resource` field in the request should be
 * `projects/_/buckets/{bucket}` for a bucket or
 * `projects/_/buckets/{bucket}/objects/{object}` for an object.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see
 *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.iam.v1.TestIamPermissionsResponse|TestIamPermissionsResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.test_iam_permissions.js</caption>
 * region_tag:storage_v2_generated_Storage_TestIamPermissions_async
 */
  testIamPermissions(
      request?: protos.google.iam.v1.ITestIamPermissionsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.iam.v1.ITestIamPermissionsRequest|undefined, {}|undefined
      ]>;
  testIamPermissions(
      request: protos.google.iam.v1.ITestIamPermissionsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>): void;
  testIamPermissions(
      request: protos.google.iam.v1.ITestIamPermissionsRequest,
      callback: Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>): void;
  testIamPermissions(
      request?: protos.google.iam.v1.ITestIamPermissionsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.iam.v1.ITestIamPermissionsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.resource;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    {
      const fieldValue = request.resource;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>projects/[^/]+/buckets/[^/]+)/objects(?:/.*)?'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.testIamPermissions(request, options, callback);
  }
/**
 * Updates a bucket. Equivalent to JSON API's storage.buckets.patch method.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.storage.v2.Bucket} request.bucket
 *   Required. The bucket to update.
 *   The bucket's `name` field will be used to identify the bucket.
 * @param {number} request.ifMetagenerationMatch
 *   If set, will only modify the bucket if its metageneration matches this
 *   value.
 * @param {number} request.ifMetagenerationNotMatch
 *   If set, will only modify the bucket if its metageneration does not match
 *   this value.
 * @param {string} request.predefinedAcl
 *   Apply a predefined set of access controls to this bucket.
 *   Valid values are "authenticatedRead", "private", "projectPrivate",
 *   "publicRead", or "publicReadWrite".
 * @param {string} request.predefinedDefaultObjectAcl
 *   Apply a predefined set of default object access controls to this bucket.
 *   Valid values are "authenticatedRead", "bucketOwnerFullControl",
 *   "bucketOwnerRead", "private", "projectPrivate", or "publicRead".
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. List of fields to be updated.
 *
 *   To specify ALL fields, equivalent to the JSON API's "update" function,
 *   specify a single field with the value `*`. Note: not recommended. If a new
 *   field is introduced at a later time, an older client updating with the `*`
 *   may accidentally reset the new field's value.
 *
 *   Not specifying any fields is an error.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.storage.v2.Bucket|Bucket}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.update_bucket.js</caption>
 * region_tag:storage_v2_generated_Storage_UpdateBucket_async
 */
  updateBucket(
      request?: protos.google.storage.v2.IUpdateBucketRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.IBucket,
        protos.google.storage.v2.IUpdateBucketRequest|undefined, {}|undefined
      ]>;
  updateBucket(
      request: protos.google.storage.v2.IUpdateBucketRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.IBucket,
          protos.google.storage.v2.IUpdateBucketRequest|null|undefined,
          {}|null|undefined>): void;
  updateBucket(
      request: protos.google.storage.v2.IUpdateBucketRequest,
      callback: Callback<
          protos.google.storage.v2.IBucket,
          protos.google.storage.v2.IUpdateBucketRequest|null|undefined,
          {}|null|undefined>): void;
  updateBucket(
      request?: protos.google.storage.v2.IUpdateBucketRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.IBucket,
          protos.google.storage.v2.IUpdateBucketRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.IBucket,
          protos.google.storage.v2.IUpdateBucketRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.IBucket,
        protos.google.storage.v2.IUpdateBucketRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.bucket?.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.updateBucket(request, options, callback);
  }
/**
 * Permanently deletes a NotificationConfig.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The parent bucket of the NotificationConfig.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.delete_notification_config.js</caption>
 * region_tag:storage_v2_generated_Storage_DeleteNotificationConfig_async
 */
  deleteNotificationConfig(
      request?: protos.google.storage.v2.IDeleteNotificationConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v2.IDeleteNotificationConfigRequest|undefined, {}|undefined
      ]>;
  deleteNotificationConfig(
      request: protos.google.storage.v2.IDeleteNotificationConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v2.IDeleteNotificationConfigRequest|null|undefined,
          {}|null|undefined>): void;
  deleteNotificationConfig(
      request: protos.google.storage.v2.IDeleteNotificationConfigRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v2.IDeleteNotificationConfigRequest|null|undefined,
          {}|null|undefined>): void;
  deleteNotificationConfig(
      request?: protos.google.storage.v2.IDeleteNotificationConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v2.IDeleteNotificationConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v2.IDeleteNotificationConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v2.IDeleteNotificationConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>projects/[^/]+/buckets/[^/]+)(?:/.*)?'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.deleteNotificationConfig(request, options, callback);
  }
/**
 * View a NotificationConfig.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The parent bucket of the NotificationConfig.
 *   Format:
 *   `projects/{project}/buckets/{bucket}/notificationConfigs/{notificationConfig}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.storage.v2.NotificationConfig|NotificationConfig}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.get_notification_config.js</caption>
 * region_tag:storage_v2_generated_Storage_GetNotificationConfig_async
 */
  getNotificationConfig(
      request?: protos.google.storage.v2.IGetNotificationConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.INotificationConfig,
        protos.google.storage.v2.IGetNotificationConfigRequest|undefined, {}|undefined
      ]>;
  getNotificationConfig(
      request: protos.google.storage.v2.IGetNotificationConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.INotificationConfig,
          protos.google.storage.v2.IGetNotificationConfigRequest|null|undefined,
          {}|null|undefined>): void;
  getNotificationConfig(
      request: protos.google.storage.v2.IGetNotificationConfigRequest,
      callback: Callback<
          protos.google.storage.v2.INotificationConfig,
          protos.google.storage.v2.IGetNotificationConfigRequest|null|undefined,
          {}|null|undefined>): void;
  getNotificationConfig(
      request?: protos.google.storage.v2.IGetNotificationConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.INotificationConfig,
          protos.google.storage.v2.IGetNotificationConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.INotificationConfig,
          protos.google.storage.v2.IGetNotificationConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.INotificationConfig,
        protos.google.storage.v2.IGetNotificationConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>projects/[^/]+/buckets/[^/]+)(?:/.*)?'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.getNotificationConfig(request, options, callback);
  }
/**
 * Creates a NotificationConfig for a given bucket.
 * These NotificationConfigs, when triggered, publish messages to the
 * specified Pub/Sub topics. See
 * https://cloud.google.com/storage/docs/pubsub-notifications.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The bucket to which this NotificationConfig belongs.
 * @param {google.storage.v2.NotificationConfig} request.notificationConfig
 *   Required. Properties of the NotificationConfig to be inserted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.storage.v2.NotificationConfig|NotificationConfig}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.create_notification_config.js</caption>
 * region_tag:storage_v2_generated_Storage_CreateNotificationConfig_async
 */
  createNotificationConfig(
      request?: protos.google.storage.v2.ICreateNotificationConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.INotificationConfig,
        protos.google.storage.v2.ICreateNotificationConfigRequest|undefined, {}|undefined
      ]>;
  createNotificationConfig(
      request: protos.google.storage.v2.ICreateNotificationConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.INotificationConfig,
          protos.google.storage.v2.ICreateNotificationConfigRequest|null|undefined,
          {}|null|undefined>): void;
  createNotificationConfig(
      request: protos.google.storage.v2.ICreateNotificationConfigRequest,
      callback: Callback<
          protos.google.storage.v2.INotificationConfig,
          protos.google.storage.v2.ICreateNotificationConfigRequest|null|undefined,
          {}|null|undefined>): void;
  createNotificationConfig(
      request?: protos.google.storage.v2.ICreateNotificationConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.INotificationConfig,
          protos.google.storage.v2.ICreateNotificationConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.INotificationConfig,
          protos.google.storage.v2.ICreateNotificationConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.INotificationConfig,
        protos.google.storage.v2.ICreateNotificationConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.createNotificationConfig(request, options, callback);
  }
/**
 * Concatenates a list of existing objects into a new object in the same
 * bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.storage.v2.Object} request.destination
 *   Required. Properties of the resulting object.
 * @param {number[]} request.sourceObjects
 *   The list of source objects that will be concatenated into a single object.
 * @param {string} request.destinationPredefinedAcl
 *   Apply a predefined set of access controls to the destination object.
 *   Valid values are "authenticatedRead", "bucketOwnerFullControl",
 *   "bucketOwnerRead", "private", "projectPrivate", or "publicRead".
 * @param {number} request.ifGenerationMatch
 *   Makes the operation conditional on whether the object's current generation
 *   matches the given value. Setting to 0 makes the operation succeed only if
 *   there are no live versions of the object.
 * @param {number} request.ifMetagenerationMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration matches the given value.
 * @param {string} request.kmsKey
 *   Resource name of the Cloud KMS key, of the form
 *   `projects/my-project/locations/my-location/keyRings/my-kr/cryptoKeys/my-key`,
 *   that will be used to encrypt the object. Overrides the object
 *   metadata's `kms_key_name` value, if any.
 * @param {google.storage.v2.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {google.storage.v2.ObjectChecksums} request.objectChecksums
 *   The checksums of the complete object. This will be validated against the
 *   combined checksums of the component objects.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.storage.v2.Object|Object}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.compose_object.js</caption>
 * region_tag:storage_v2_generated_Storage_ComposeObject_async
 */
  composeObject(
      request?: protos.google.storage.v2.IComposeObjectRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.IObject,
        protos.google.storage.v2.IComposeObjectRequest|undefined, {}|undefined
      ]>;
  composeObject(
      request: protos.google.storage.v2.IComposeObjectRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.IObject,
          protos.google.storage.v2.IComposeObjectRequest|null|undefined,
          {}|null|undefined>): void;
  composeObject(
      request: protos.google.storage.v2.IComposeObjectRequest,
      callback: Callback<
          protos.google.storage.v2.IObject,
          protos.google.storage.v2.IComposeObjectRequest|null|undefined,
          {}|null|undefined>): void;
  composeObject(
      request?: protos.google.storage.v2.IComposeObjectRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.IObject,
          protos.google.storage.v2.IComposeObjectRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.IObject,
          protos.google.storage.v2.IComposeObjectRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.IObject,
        protos.google.storage.v2.IComposeObjectRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.destination?.bucket;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.composeObject(request, options, callback);
  }
/**
 * Deletes an object and its metadata.
 *
 * Deletions are normally permanent when versioning is disabled or whenever
 * the generation parameter is used. However, if soft delete is enabled for
 * the bucket, deleted objects can be restored using RestoreObject until the
 * soft delete retention period has passed.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of the bucket in which the object resides.
 * @param {string} request.object
 *   Required. The name of the finalized object to delete.
 *   Note: If you want to delete an unfinalized resumable upload please use
 *   `CancelResumableWrite`.
 * @param {number} request.generation
 *   If present, permanently deletes a specific revision of this object (as
 *   opposed to the latest version, the default).
 * @param {number} request.ifGenerationMatch
 *   Makes the operation conditional on whether the object's current generation
 *   matches the given value. Setting to 0 makes the operation succeed only if
 *   there are no live versions of the object.
 * @param {number} request.ifGenerationNotMatch
 *   Makes the operation conditional on whether the object's live generation
 *   does not match the given value. If no live object exists, the precondition
 *   fails. Setting to 0 makes the operation succeed only if there is a live
 *   version of the object.
 * @param {number} request.ifMetagenerationMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration matches the given value.
 * @param {number} request.ifMetagenerationNotMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration does not match the given value.
 * @param {google.storage.v2.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.delete_object.js</caption>
 * region_tag:storage_v2_generated_Storage_DeleteObject_async
 */
  deleteObject(
      request?: protos.google.storage.v2.IDeleteObjectRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v2.IDeleteObjectRequest|undefined, {}|undefined
      ]>;
  deleteObject(
      request: protos.google.storage.v2.IDeleteObjectRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v2.IDeleteObjectRequest|null|undefined,
          {}|null|undefined>): void;
  deleteObject(
      request: protos.google.storage.v2.IDeleteObjectRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v2.IDeleteObjectRequest|null|undefined,
          {}|null|undefined>): void;
  deleteObject(
      request?: protos.google.storage.v2.IDeleteObjectRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v2.IDeleteObjectRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v2.IDeleteObjectRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v2.IDeleteObjectRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.bucket;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.deleteObject(request, options, callback);
  }
/**
 * Restores a soft-deleted object.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of the bucket in which the object resides.
 * @param {string} request.object
 *   Required. The name of the object to restore.
 * @param {number} request.generation
 *   Required. The specific revision of the object to restore.
 * @param {number} request.ifGenerationMatch
 *   Makes the operation conditional on whether the object's current generation
 *   matches the given value. Setting to 0 makes the operation succeed only if
 *   there are no live versions of the object.
 * @param {number} request.ifGenerationNotMatch
 *   Makes the operation conditional on whether the object's live generation
 *   does not match the given value. If no live object exists, the precondition
 *   fails. Setting to 0 makes the operation succeed only if there is a live
 *   version of the object.
 * @param {number} request.ifMetagenerationMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration matches the given value.
 * @param {number} request.ifMetagenerationNotMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration does not match the given value.
 * @param {boolean} request.copySourceAcl
 *   If false or unset, the bucket's default object ACL will be used.
 *   If true, copy the source object's access controls.
 *   Return an error if bucket has UBLA enabled.
 * @param {google.storage.v2.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.storage.v2.Object|Object}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.restore_object.js</caption>
 * region_tag:storage_v2_generated_Storage_RestoreObject_async
 */
  restoreObject(
      request?: protos.google.storage.v2.IRestoreObjectRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.IObject,
        protos.google.storage.v2.IRestoreObjectRequest|undefined, {}|undefined
      ]>;
  restoreObject(
      request: protos.google.storage.v2.IRestoreObjectRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.IObject,
          protos.google.storage.v2.IRestoreObjectRequest|null|undefined,
          {}|null|undefined>): void;
  restoreObject(
      request: protos.google.storage.v2.IRestoreObjectRequest,
      callback: Callback<
          protos.google.storage.v2.IObject,
          protos.google.storage.v2.IRestoreObjectRequest|null|undefined,
          {}|null|undefined>): void;
  restoreObject(
      request?: protos.google.storage.v2.IRestoreObjectRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.IObject,
          protos.google.storage.v2.IRestoreObjectRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.IObject,
          protos.google.storage.v2.IRestoreObjectRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.IObject,
        protos.google.storage.v2.IRestoreObjectRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.bucket;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.restoreObject(request, options, callback);
  }
/**
 * Cancels an in-progress resumable upload.
 *
 * Any attempts to write to the resumable upload after cancelling the upload
 * will fail.
 *
 * The behavior for currently in progress write operations is not guaranteed -
 * they could either complete before the cancellation or fail if the
 * cancellation completes first.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.uploadId
 *   Required. The upload_id of the resumable upload to cancel. This should be
 *   copied from the `upload_id` field of `StartResumableWriteResponse`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.storage.v2.CancelResumableWriteResponse|CancelResumableWriteResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.cancel_resumable_write.js</caption>
 * region_tag:storage_v2_generated_Storage_CancelResumableWrite_async
 */
  cancelResumableWrite(
      request?: protos.google.storage.v2.ICancelResumableWriteRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.ICancelResumableWriteResponse,
        protos.google.storage.v2.ICancelResumableWriteRequest|undefined, {}|undefined
      ]>;
  cancelResumableWrite(
      request: protos.google.storage.v2.ICancelResumableWriteRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.ICancelResumableWriteResponse,
          protos.google.storage.v2.ICancelResumableWriteRequest|null|undefined,
          {}|null|undefined>): void;
  cancelResumableWrite(
      request: protos.google.storage.v2.ICancelResumableWriteRequest,
      callback: Callback<
          protos.google.storage.v2.ICancelResumableWriteResponse,
          protos.google.storage.v2.ICancelResumableWriteRequest|null|undefined,
          {}|null|undefined>): void;
  cancelResumableWrite(
      request?: protos.google.storage.v2.ICancelResumableWriteRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.ICancelResumableWriteResponse,
          protos.google.storage.v2.ICancelResumableWriteRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.ICancelResumableWriteResponse,
          protos.google.storage.v2.ICancelResumableWriteRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.ICancelResumableWriteResponse,
        protos.google.storage.v2.ICancelResumableWriteRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.uploadId;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>projects/[^/]+/buckets/[^/]+)(?:/.*)?'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.cancelResumableWrite(request, options, callback);
  }
/**
 * Retrieves an object's metadata.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. Name of the bucket in which the object resides.
 * @param {string} request.object
 *   Required. Name of the object.
 * @param {number} request.generation
 *   If present, selects a specific revision of this object (as opposed to the
 *   latest version, the default).
 * @param {boolean} request.softDeleted
 *   If true, return the soft-deleted version of this object.
 * @param {number} request.ifGenerationMatch
 *   Makes the operation conditional on whether the object's current generation
 *   matches the given value. Setting to 0 makes the operation succeed only if
 *   there are no live versions of the object.
 * @param {number} request.ifGenerationNotMatch
 *   Makes the operation conditional on whether the object's live generation
 *   does not match the given value. If no live object exists, the precondition
 *   fails. Setting to 0 makes the operation succeed only if there is a live
 *   version of the object.
 * @param {number} request.ifMetagenerationMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration matches the given value.
 * @param {number} request.ifMetagenerationNotMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration does not match the given value.
 * @param {google.storage.v2.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read.
 *   If no mask is specified, will default to all fields except metadata.acl and
 *   metadata.owner.
 *   * may be used to mean "all fields".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.storage.v2.Object|Object}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.get_object.js</caption>
 * region_tag:storage_v2_generated_Storage_GetObject_async
 */
  getObject(
      request?: protos.google.storage.v2.IGetObjectRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.IObject,
        protos.google.storage.v2.IGetObjectRequest|undefined, {}|undefined
      ]>;
  getObject(
      request: protos.google.storage.v2.IGetObjectRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.IObject,
          protos.google.storage.v2.IGetObjectRequest|null|undefined,
          {}|null|undefined>): void;
  getObject(
      request: protos.google.storage.v2.IGetObjectRequest,
      callback: Callback<
          protos.google.storage.v2.IObject,
          protos.google.storage.v2.IGetObjectRequest|null|undefined,
          {}|null|undefined>): void;
  getObject(
      request?: protos.google.storage.v2.IGetObjectRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.IObject,
          protos.google.storage.v2.IGetObjectRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.IObject,
          protos.google.storage.v2.IGetObjectRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.IObject,
        protos.google.storage.v2.IGetObjectRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.bucket;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.getObject(request, options, callback);
  }
/**
 * Updates an object's metadata.
 * Equivalent to JSON API's storage.objects.patch.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.storage.v2.Object} request.object
 *   Required. The object to update.
 *   The object's bucket and name fields are used to identify the object to
 *   update. If present, the object's generation field selects a specific
 *   revision of this object whose metadata should be updated. Otherwise,
 *   assumes the live version of the object.
 * @param {number} request.ifGenerationMatch
 *   Makes the operation conditional on whether the object's current generation
 *   matches the given value. Setting to 0 makes the operation succeed only if
 *   there are no live versions of the object.
 * @param {number} request.ifGenerationNotMatch
 *   Makes the operation conditional on whether the object's live generation
 *   does not match the given value. If no live object exists, the precondition
 *   fails. Setting to 0 makes the operation succeed only if there is a live
 *   version of the object.
 * @param {number} request.ifMetagenerationMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration matches the given value.
 * @param {number} request.ifMetagenerationNotMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration does not match the given value.
 * @param {string} request.predefinedAcl
 *   Apply a predefined set of access controls to this object.
 *   Valid values are "authenticatedRead", "bucketOwnerFullControl",
 *   "bucketOwnerRead", "private", "projectPrivate", or "publicRead".
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. List of fields to be updated.
 *
 *   To specify ALL fields, equivalent to the JSON API's "update" function,
 *   specify a single field with the value `*`. Note: not recommended. If a new
 *   field is introduced at a later time, an older client updating with the `*`
 *   may accidentally reset the new field's value.
 *
 *   Not specifying any fields is an error.
 * @param {google.storage.v2.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.storage.v2.Object|Object}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.update_object.js</caption>
 * region_tag:storage_v2_generated_Storage_UpdateObject_async
 */
  updateObject(
      request?: protos.google.storage.v2.IUpdateObjectRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.IObject,
        protos.google.storage.v2.IUpdateObjectRequest|undefined, {}|undefined
      ]>;
  updateObject(
      request: protos.google.storage.v2.IUpdateObjectRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.IObject,
          protos.google.storage.v2.IUpdateObjectRequest|null|undefined,
          {}|null|undefined>): void;
  updateObject(
      request: protos.google.storage.v2.IUpdateObjectRequest,
      callback: Callback<
          protos.google.storage.v2.IObject,
          protos.google.storage.v2.IUpdateObjectRequest|null|undefined,
          {}|null|undefined>): void;
  updateObject(
      request?: protos.google.storage.v2.IUpdateObjectRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.IObject,
          protos.google.storage.v2.IUpdateObjectRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.IObject,
          protos.google.storage.v2.IUpdateObjectRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.IObject,
        protos.google.storage.v2.IUpdateObjectRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.object?.bucket;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.updateObject(request, options, callback);
  }
/**
 * Rewrites a source object to a destination object. Optionally overrides
 * metadata.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.destinationName
 *   Required. Immutable. The name of the destination object.
 *   See the
 *   [Naming Guidelines](https://cloud.google.com/storage/docs/objects#naming).
 *   Example: `test.txt`
 *   The `name` field by itself does not uniquely identify a Cloud Storage
 *   object. A Cloud Storage object is uniquely identified by the tuple of
 *   (bucket, object, generation).
 * @param {string} request.destinationBucket
 *   Required. Immutable. The name of the bucket containing the destination
 *   object.
 * @param {string} request.destinationKmsKey
 *   The name of the Cloud KMS key that will be used to encrypt the destination
 *   object. The Cloud KMS key must be located in same location as the object.
 *   If the parameter is not specified, the request uses the destination
 *   bucket's default encryption key, if any, or else the Google-managed
 *   encryption key.
 * @param {google.storage.v2.Object} request.destination
 *   Properties of the destination, post-rewrite object.
 *   The `name`, `bucket` and `kms_key` fields must not be populated (these
 *   values are specified in the `destination_name`, `destination_bucket`, and
 *   `destination_kms_key` fields).
 *   If `destination` is present it will be used to construct the destination
 *   object's metadata; otherwise the destination object's metadata will be
 *   copied from the source object.
 * @param {string} request.sourceBucket
 *   Required. Name of the bucket in which to find the source object.
 * @param {string} request.sourceObject
 *   Required. Name of the source object.
 * @param {number} request.sourceGeneration
 *   If present, selects a specific revision of the source object (as opposed to
 *   the latest version, the default).
 * @param {string} request.rewriteToken
 *   Include this field (from the previous rewrite response) on each rewrite
 *   request after the first one, until the rewrite response 'done' flag is
 *   true. Calls that provide a rewriteToken can omit all other request fields,
 *   but if included those fields must match the values provided in the first
 *   rewrite request.
 * @param {string} request.destinationPredefinedAcl
 *   Apply a predefined set of access controls to the destination object.
 *   Valid values are "authenticatedRead", "bucketOwnerFullControl",
 *   "bucketOwnerRead", "private", "projectPrivate", or "publicRead".
 * @param {number} request.ifGenerationMatch
 *   Makes the operation conditional on whether the object's current generation
 *   matches the given value. Setting to 0 makes the operation succeed only if
 *   there are no live versions of the object.
 * @param {number} request.ifGenerationNotMatch
 *   Makes the operation conditional on whether the object's live generation
 *   does not match the given value. If no live object exists, the precondition
 *   fails. Setting to 0 makes the operation succeed only if there is a live
 *   version of the object.
 * @param {number} request.ifMetagenerationMatch
 *   Makes the operation conditional on whether the destination object's current
 *   metageneration matches the given value.
 * @param {number} request.ifMetagenerationNotMatch
 *   Makes the operation conditional on whether the destination object's current
 *   metageneration does not match the given value.
 * @param {number} request.ifSourceGenerationMatch
 *   Makes the operation conditional on whether the source object's live
 *   generation matches the given value.
 * @param {number} request.ifSourceGenerationNotMatch
 *   Makes the operation conditional on whether the source object's live
 *   generation does not match the given value.
 * @param {number} request.ifSourceMetagenerationMatch
 *   Makes the operation conditional on whether the source object's current
 *   metageneration matches the given value.
 * @param {number} request.ifSourceMetagenerationNotMatch
 *   Makes the operation conditional on whether the source object's current
 *   metageneration does not match the given value.
 * @param {number} request.maxBytesRewrittenPerCall
 *   The maximum number of bytes that will be rewritten per rewrite request.
 *   Most callers
 *   shouldn't need to specify this parameter - it is primarily in place to
 *   support testing. If specified the value must be an integral multiple of
 *   1 MiB (1048576). Also, this only applies to requests where the source and
 *   destination span locations and/or storage classes. Finally, this value must
 *   not change across rewrite calls else you'll get an error that the
 *   `rewriteToken` is invalid.
 * @param {string} request.copySourceEncryptionAlgorithm
 *   The algorithm used to encrypt the source object, if any. Used if the source
 *   object was encrypted with a Customer-Supplied Encryption Key.
 * @param {Buffer} request.copySourceEncryptionKeyBytes
 *   The raw bytes (not base64-encoded) AES-256 encryption key used to encrypt
 *   the source object, if it was encrypted with a Customer-Supplied Encryption
 *   Key.
 * @param {Buffer} request.copySourceEncryptionKeySha256Bytes
 *   The raw bytes (not base64-encoded) SHA256 hash of the encryption key used
 *   to encrypt the source object, if it was encrypted with a Customer-Supplied
 *   Encryption Key.
 * @param {google.storage.v2.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {google.storage.v2.ObjectChecksums} request.objectChecksums
 *   The checksums of the complete object. This will be used to validate the
 *   destination object after rewriting.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.storage.v2.RewriteResponse|RewriteResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.rewrite_object.js</caption>
 * region_tag:storage_v2_generated_Storage_RewriteObject_async
 */
  rewriteObject(
      request?: protos.google.storage.v2.IRewriteObjectRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.IRewriteResponse,
        protos.google.storage.v2.IRewriteObjectRequest|undefined, {}|undefined
      ]>;
  rewriteObject(
      request: protos.google.storage.v2.IRewriteObjectRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.IRewriteResponse,
          protos.google.storage.v2.IRewriteObjectRequest|null|undefined,
          {}|null|undefined>): void;
  rewriteObject(
      request: protos.google.storage.v2.IRewriteObjectRequest,
      callback: Callback<
          protos.google.storage.v2.IRewriteResponse,
          protos.google.storage.v2.IRewriteObjectRequest|null|undefined,
          {}|null|undefined>): void;
  rewriteObject(
      request?: protos.google.storage.v2.IRewriteObjectRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.IRewriteResponse,
          protos.google.storage.v2.IRewriteObjectRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.IRewriteResponse,
          protos.google.storage.v2.IRewriteObjectRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.IRewriteResponse,
        protos.google.storage.v2.IRewriteObjectRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.sourceBucket;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<source_bucket>.*)'));
        if (match) {
          const parameterValue = match.groups?.['source_bucket'] ?? fieldValue;
          Object.assign(routingParameter, { source_bucket: parameterValue });
        }
      }
    }
    {
      const fieldValue = request.destinationBucket;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.rewriteObject(request, options, callback);
  }
/**
 * Starts a resumable write. How long the write operation remains valid, and
 * what happens when the write operation becomes invalid, are
 * service-dependent.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.storage.v2.WriteObjectSpec} request.writeObjectSpec
 *   Required. The destination bucket, object, and metadata, as well as any
 *   preconditions.
 * @param {google.storage.v2.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {google.storage.v2.ObjectChecksums} request.objectChecksums
 *   The checksums of the complete object. This will be used to validate the
 *   uploaded object. For each upload, object_checksums can be provided with
 *   either StartResumableWriteRequest or the WriteObjectRequest with
 *   finish_write set to `true`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.storage.v2.StartResumableWriteResponse|StartResumableWriteResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.start_resumable_write.js</caption>
 * region_tag:storage_v2_generated_Storage_StartResumableWrite_async
 */
  startResumableWrite(
      request?: protos.google.storage.v2.IStartResumableWriteRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.IStartResumableWriteResponse,
        protos.google.storage.v2.IStartResumableWriteRequest|undefined, {}|undefined
      ]>;
  startResumableWrite(
      request: protos.google.storage.v2.IStartResumableWriteRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.IStartResumableWriteResponse,
          protos.google.storage.v2.IStartResumableWriteRequest|null|undefined,
          {}|null|undefined>): void;
  startResumableWrite(
      request: protos.google.storage.v2.IStartResumableWriteRequest,
      callback: Callback<
          protos.google.storage.v2.IStartResumableWriteResponse,
          protos.google.storage.v2.IStartResumableWriteRequest|null|undefined,
          {}|null|undefined>): void;
  startResumableWrite(
      request?: protos.google.storage.v2.IStartResumableWriteRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.IStartResumableWriteResponse,
          protos.google.storage.v2.IStartResumableWriteRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.IStartResumableWriteResponse,
          protos.google.storage.v2.IStartResumableWriteRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.IStartResumableWriteResponse,
        protos.google.storage.v2.IStartResumableWriteRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.writeObjectSpec?.resource?.bucket;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.startResumableWrite(request, options, callback);
  }
/**
 * Determines the `persisted_size` for an object that is being written, which
 * can then be used as the `write_offset` for the next `Write()` call.
 *
 * If the object does not exist (i.e., the object has been deleted, or the
 * first `Write()` has not yet reached the service), this method returns the
 * error `NOT_FOUND`.
 *
 * The client **may** call `QueryWriteStatus()` at any time to determine how
 * much data has been processed for this object. This is useful if the
 * client is buffering data and needs to know which data can be safely
 * evicted. For any sequence of `QueryWriteStatus()` calls for a given
 * object name, the sequence of returned `persisted_size` values will be
 * non-decreasing.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.uploadId
 *   Required. The name of the resume token for the object whose write status is
 *   being requested.
 * @param {google.storage.v2.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.storage.v2.QueryWriteStatusResponse|QueryWriteStatusResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.query_write_status.js</caption>
 * region_tag:storage_v2_generated_Storage_QueryWriteStatus_async
 */
  queryWriteStatus(
      request?: protos.google.storage.v2.IQueryWriteStatusRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.IQueryWriteStatusResponse,
        protos.google.storage.v2.IQueryWriteStatusRequest|undefined, {}|undefined
      ]>;
  queryWriteStatus(
      request: protos.google.storage.v2.IQueryWriteStatusRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.IQueryWriteStatusResponse,
          protos.google.storage.v2.IQueryWriteStatusRequest|null|undefined,
          {}|null|undefined>): void;
  queryWriteStatus(
      request: protos.google.storage.v2.IQueryWriteStatusRequest,
      callback: Callback<
          protos.google.storage.v2.IQueryWriteStatusResponse,
          protos.google.storage.v2.IQueryWriteStatusRequest|null|undefined,
          {}|null|undefined>): void;
  queryWriteStatus(
      request?: protos.google.storage.v2.IQueryWriteStatusRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.IQueryWriteStatusResponse,
          protos.google.storage.v2.IQueryWriteStatusRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.IQueryWriteStatusResponse,
          protos.google.storage.v2.IQueryWriteStatusRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.IQueryWriteStatusResponse,
        protos.google.storage.v2.IQueryWriteStatusRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.uploadId;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>projects/[^/]+/buckets/[^/]+)(?:/.*)?'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.queryWriteStatus(request, options, callback);
  }
/**
 * Retrieves the name of a project's Google Cloud Storage service account.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.project
 *   Required. Project ID, in the format of "projects/{projectIdentifier}".
 *   {projectIdentifier} can be the project ID or project number.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.storage.v2.ServiceAccount|ServiceAccount}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.get_service_account.js</caption>
 * region_tag:storage_v2_generated_Storage_GetServiceAccount_async
 */
  getServiceAccount(
      request?: protos.google.storage.v2.IGetServiceAccountRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.IServiceAccount,
        protos.google.storage.v2.IGetServiceAccountRequest|undefined, {}|undefined
      ]>;
  getServiceAccount(
      request: protos.google.storage.v2.IGetServiceAccountRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.IServiceAccount,
          protos.google.storage.v2.IGetServiceAccountRequest|null|undefined,
          {}|null|undefined>): void;
  getServiceAccount(
      request: protos.google.storage.v2.IGetServiceAccountRequest,
      callback: Callback<
          protos.google.storage.v2.IServiceAccount,
          protos.google.storage.v2.IGetServiceAccountRequest|null|undefined,
          {}|null|undefined>): void;
  getServiceAccount(
      request?: protos.google.storage.v2.IGetServiceAccountRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.IServiceAccount,
          protos.google.storage.v2.IGetServiceAccountRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.IServiceAccount,
          protos.google.storage.v2.IGetServiceAccountRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.IServiceAccount,
        protos.google.storage.v2.IGetServiceAccountRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.project;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<project>.*)'));
        if (match) {
          const parameterValue = match.groups?.['project'] ?? fieldValue;
          Object.assign(routingParameter, { project: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.getServiceAccount(request, options, callback);
  }
/**
 * Creates a new HMAC key for the given service account.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.project
 *   Required. The project that the HMAC-owning service account lives in, in the
 *   format of "projects/{projectIdentifier}". {projectIdentifier} can be the
 *   project ID or project number.
 * @param {string} request.serviceAccountEmail
 *   Required. The service account to create the HMAC for.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.storage.v2.CreateHmacKeyResponse|CreateHmacKeyResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.create_hmac_key.js</caption>
 * region_tag:storage_v2_generated_Storage_CreateHmacKey_async
 */
  createHmacKey(
      request?: protos.google.storage.v2.ICreateHmacKeyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.ICreateHmacKeyResponse,
        protos.google.storage.v2.ICreateHmacKeyRequest|undefined, {}|undefined
      ]>;
  createHmacKey(
      request: protos.google.storage.v2.ICreateHmacKeyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.ICreateHmacKeyResponse,
          protos.google.storage.v2.ICreateHmacKeyRequest|null|undefined,
          {}|null|undefined>): void;
  createHmacKey(
      request: protos.google.storage.v2.ICreateHmacKeyRequest,
      callback: Callback<
          protos.google.storage.v2.ICreateHmacKeyResponse,
          protos.google.storage.v2.ICreateHmacKeyRequest|null|undefined,
          {}|null|undefined>): void;
  createHmacKey(
      request?: protos.google.storage.v2.ICreateHmacKeyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.ICreateHmacKeyResponse,
          protos.google.storage.v2.ICreateHmacKeyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.ICreateHmacKeyResponse,
          protos.google.storage.v2.ICreateHmacKeyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.ICreateHmacKeyResponse,
        protos.google.storage.v2.ICreateHmacKeyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.project;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<project>.*)'));
        if (match) {
          const parameterValue = match.groups?.['project'] ?? fieldValue;
          Object.assign(routingParameter, { project: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.createHmacKey(request, options, callback);
  }
/**
 * Deletes a given HMAC key.  Key must be in an INACTIVE state.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.accessId
 *   Required. The identifying key for the HMAC to delete.
 * @param {string} request.project
 *   Required. The project that owns the HMAC key, in the format of
 *   "projects/{projectIdentifier}".
 *   {projectIdentifier} can be the project ID or project number.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.delete_hmac_key.js</caption>
 * region_tag:storage_v2_generated_Storage_DeleteHmacKey_async
 */
  deleteHmacKey(
      request?: protos.google.storage.v2.IDeleteHmacKeyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v2.IDeleteHmacKeyRequest|undefined, {}|undefined
      ]>;
  deleteHmacKey(
      request: protos.google.storage.v2.IDeleteHmacKeyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v2.IDeleteHmacKeyRequest|null|undefined,
          {}|null|undefined>): void;
  deleteHmacKey(
      request: protos.google.storage.v2.IDeleteHmacKeyRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v2.IDeleteHmacKeyRequest|null|undefined,
          {}|null|undefined>): void;
  deleteHmacKey(
      request?: protos.google.storage.v2.IDeleteHmacKeyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v2.IDeleteHmacKeyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.storage.v2.IDeleteHmacKeyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.storage.v2.IDeleteHmacKeyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.project;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<project>.*)'));
        if (match) {
          const parameterValue = match.groups?.['project'] ?? fieldValue;
          Object.assign(routingParameter, { project: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.deleteHmacKey(request, options, callback);
  }
/**
 * Gets an existing HMAC key metadata for the given id.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.accessId
 *   Required. The identifying key for the HMAC to delete.
 * @param {string} request.project
 *   Required. The project the HMAC key lies in, in the format of
 *   "projects/{projectIdentifier}".
 *   {projectIdentifier} can be the project ID or project number.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.storage.v2.HmacKeyMetadata|HmacKeyMetadata}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.get_hmac_key.js</caption>
 * region_tag:storage_v2_generated_Storage_GetHmacKey_async
 */
  getHmacKey(
      request?: protos.google.storage.v2.IGetHmacKeyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.IHmacKeyMetadata,
        protos.google.storage.v2.IGetHmacKeyRequest|undefined, {}|undefined
      ]>;
  getHmacKey(
      request: protos.google.storage.v2.IGetHmacKeyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.IHmacKeyMetadata,
          protos.google.storage.v2.IGetHmacKeyRequest|null|undefined,
          {}|null|undefined>): void;
  getHmacKey(
      request: protos.google.storage.v2.IGetHmacKeyRequest,
      callback: Callback<
          protos.google.storage.v2.IHmacKeyMetadata,
          protos.google.storage.v2.IGetHmacKeyRequest|null|undefined,
          {}|null|undefined>): void;
  getHmacKey(
      request?: protos.google.storage.v2.IGetHmacKeyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.IHmacKeyMetadata,
          protos.google.storage.v2.IGetHmacKeyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.IHmacKeyMetadata,
          protos.google.storage.v2.IGetHmacKeyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.IHmacKeyMetadata,
        protos.google.storage.v2.IGetHmacKeyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.project;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<project>.*)'));
        if (match) {
          const parameterValue = match.groups?.['project'] ?? fieldValue;
          Object.assign(routingParameter, { project: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.getHmacKey(request, options, callback);
  }
/**
 * Updates a given HMAC key state between ACTIVE and INACTIVE.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.storage.v2.HmacKeyMetadata} request.hmacKey
 *   Required. The HMAC key to update.
 *   If present, the hmac_key's `id` field will be used to identify the key.
 *   Otherwise, the hmac_key's access_id and project fields will be used to
 *   identify the key.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Update mask for hmac_key.
 *   Not specifying any fields will mean only the `state` field is updated to
 *   the value specified in `hmac_key`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.storage.v2.HmacKeyMetadata|HmacKeyMetadata}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.update_hmac_key.js</caption>
 * region_tag:storage_v2_generated_Storage_UpdateHmacKey_async
 */
  updateHmacKey(
      request?: protos.google.storage.v2.IUpdateHmacKeyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.IHmacKeyMetadata,
        protos.google.storage.v2.IUpdateHmacKeyRequest|undefined, {}|undefined
      ]>;
  updateHmacKey(
      request: protos.google.storage.v2.IUpdateHmacKeyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.storage.v2.IHmacKeyMetadata,
          protos.google.storage.v2.IUpdateHmacKeyRequest|null|undefined,
          {}|null|undefined>): void;
  updateHmacKey(
      request: protos.google.storage.v2.IUpdateHmacKeyRequest,
      callback: Callback<
          protos.google.storage.v2.IHmacKeyMetadata,
          protos.google.storage.v2.IUpdateHmacKeyRequest|null|undefined,
          {}|null|undefined>): void;
  updateHmacKey(
      request?: protos.google.storage.v2.IUpdateHmacKeyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.storage.v2.IHmacKeyMetadata,
          protos.google.storage.v2.IUpdateHmacKeyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.storage.v2.IHmacKeyMetadata,
          protos.google.storage.v2.IUpdateHmacKeyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.storage.v2.IHmacKeyMetadata,
        protos.google.storage.v2.IUpdateHmacKeyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.hmacKey?.project;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<project>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['project'] ?? fieldValue;
          Object.assign(routingParameter, { project: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.updateHmacKey(request, options, callback);
  }

/**
 * Reads an object's data.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.bucket
 *   Required. The name of the bucket containing the object to read.
 * @param {string} request.object
 *   Required. The name of the object to read.
 * @param {number} request.generation
 *   If present, selects a specific revision of this object (as opposed
 *   to the latest version, the default).
 * @param {number} request.readOffset
 *   The offset for the first byte to return in the read, relative to the start
 *   of the object.
 *
 *   A negative `read_offset` value will be interpreted as the number of bytes
 *   back from the end of the object to be returned. For example, if an object's
 *   length is 15 bytes, a ReadObjectRequest with `read_offset` = -5 and
 *   `read_limit` = 3 would return bytes 10 through 12 of the object. Requesting
 *   a negative offset with magnitude larger than the size of the object will
 *   return the entire object.
 * @param {number} request.readLimit
 *   The maximum number of `data` bytes the server is allowed to return in the
 *   sum of all `Object` messages. A `read_limit` of zero indicates that there
 *   is no limit, and a negative `read_limit` will cause an error.
 *
 *   If the stream returns fewer bytes than allowed by the `read_limit` and no
 *   error occurred, the stream includes all data from the `read_offset` to the
 *   end of the resource.
 * @param {number} request.ifGenerationMatch
 *   Makes the operation conditional on whether the object's current generation
 *   matches the given value. Setting to 0 makes the operation succeed only if
 *   there are no live versions of the object.
 * @param {number} request.ifGenerationNotMatch
 *   Makes the operation conditional on whether the object's live generation
 *   does not match the given value. If no live object exists, the precondition
 *   fails. Setting to 0 makes the operation succeed only if there is a live
 *   version of the object.
 * @param {number} request.ifMetagenerationMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration matches the given value.
 * @param {number} request.ifMetagenerationNotMatch
 *   Makes the operation conditional on whether the object's current
 *   metageneration does not match the given value.
 * @param {google.storage.v2.CommonObjectRequestParams} request.commonObjectRequestParams
 *   A set of parameters common to Storage API requests concerning an object.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read.
 *   The checksummed_data field and its children will always be present.
 *   If no mask is specified, will default to all fields except metadata.owner
 *   and metadata.acl.
 *   * may be used to mean "all fields".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits {@link protos.google.storage.v2.ReadObjectResponse|ReadObjectResponse} on 'data' event.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.read_object.js</caption>
 * region_tag:storage_v2_generated_Storage_ReadObject_async
 */
  readObject(
      request?: protos.google.storage.v2.IReadObjectRequest,
      options?: CallOptions):
    gax.CancellableStream{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.bucket;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.readObject(request, options);
  }

/**
 * Stores a new object and metadata.
 *
 * An object can be written either in a single message stream or in a
 * resumable sequence of message streams. To write using a single stream,
 * the client should include in the first message of the stream an
 * `WriteObjectSpec` describing the destination bucket, object, and any
 * preconditions. Additionally, the final message must set 'finish_write' to
 * true, or else it is an error.
 *
 * For a resumable write, the client should instead call
 * `StartResumableWrite()`, populating a `WriteObjectSpec` into that request.
 * They should then attach the returned `upload_id` to the first message of
 * each following call to `WriteObject`. If the stream is closed before
 * finishing the upload (either explicitly by the client or due to a network
 * error or an error response from the server), the client should do as
 * follows:
 *   - Check the result Status of the stream, to determine if writing can be
 *     resumed on this stream or must be restarted from scratch (by calling
 *     `StartResumableWrite()`). The resumable errors are DEADLINE_EXCEEDED,
 *     INTERNAL, and UNAVAILABLE. For each case, the client should use binary
 *     exponential backoff before retrying.  Additionally, writes can be
 *     resumed after RESOURCE_EXHAUSTED errors, but only after taking
 *     appropriate measures, which may include reducing aggregate send rate
 *     across clients and/or requesting a quota increase for your project.
 *   - If the call to `WriteObject` returns `ABORTED`, that indicates
 *     concurrent attempts to update the resumable write, caused either by
 *     multiple racing clients or by a single client where the previous
 *     request was timed out on the client side but nonetheless reached the
 *     server. In this case the client should take steps to prevent further
 *     concurrent writes (e.g., increase the timeouts, stop using more than
 *     one process to perform the upload, etc.), and then should follow the
 *     steps below for resuming the upload.
 *   - For resumable errors, the client should call `QueryWriteStatus()` and
 *     then continue writing from the returned `persisted_size`. This may be
 *     less than the amount of data the client previously sent. Note also that
 *     it is acceptable to send data starting at an offset earlier than the
 *     returned `persisted_size`; in this case, the service will skip data at
 *     offsets that were already persisted (without checking that it matches
 *     the previously written data), and write only the data starting from the
 *     persisted offset. Even though the data isn't written, it may still
 *     incur a performance cost over resuming at the correct write offset.
 *     This behavior can make client-side handling simpler in some cases.
 *   - Clients must only send data that is a multiple of 256 KiB per message,
 *     unless the object is being finished with `finish_write` set to `true`.
 *
 * The service will not view the object as complete until the client has
 * sent a `WriteObjectRequest` with `finish_write` set to `true`. Sending any
 * requests on a stream after sending a request with `finish_write` set to
 * `true` will cause an error. The client **should** check the response it
 * receives to determine how much data the service was able to commit and
 * whether the service views the object as complete.
 *
 * Attempting to resume an already finalized object will result in an OK
 * status, with a WriteObjectResponse containing the finalized object's
 * metadata.
 *
 * Alternatively, the BidiWriteObject operation may be used to write an
 * object with controls over flushing and the ability to fetch the ability to
 * determine the current persisted size.
 *
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream} - A writable stream which accepts objects representing
 * {@link protos.google.storage.v2.WriteObjectRequest|WriteObjectRequest}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#client-streaming | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.write_object.js</caption>
 * region_tag:storage_v2_generated_Storage_WriteObject_async
 */
  writeObject(
      options?: CallOptions,
      callback?: Callback<
        protos.google.storage.v2.IWriteObjectResponse,
        protos.google.storage.v2.IWriteObjectRequest|null|undefined,
        {}|null|undefined>):
    gax.CancellableStream;
  writeObject(
      callback?: Callback<
        protos.google.storage.v2.IWriteObjectResponse,
        protos.google.storage.v2.IWriteObjectRequest|null|undefined,
        {}|null|undefined>):
    gax.CancellableStream;
  writeObject(
      optionsOrCallback?: CallOptions|Callback<
        protos.google.storage.v2.IWriteObjectResponse,
        protos.google.storage.v2.IWriteObjectRequest|null|undefined,
        {}|null|undefined>,
      callback?: Callback<
        protos.google.storage.v2.IWriteObjectResponse,
        protos.google.storage.v2.IWriteObjectRequest|null|undefined,
        {}|null|undefined>):
    gax.CancellableStream {
    if (optionsOrCallback instanceof Function && callback === undefined) {
        callback = optionsOrCallback;
        optionsOrCallback = {};
    }
    const options = optionsOrCallback as CallOptions;
    this.initialize();
    return this.innerApiCalls.writeObject(null, options, callback);
  }

/**
 * Stores a new object and metadata.
 *
 * This is similar to the WriteObject call with the added support for
 * manual flushing of persisted state, and the ability to determine current
 * persisted size without closing the stream.
 *
 * The client may specify one or both of the `state_lookup` and `flush` fields
 * in each BidiWriteObjectRequest. If `flush` is specified, the data written
 * so far will be persisted to storage. If `state_lookup` is specified, the
 * service will respond with a BidiWriteObjectResponse that contains the
 * persisted size. If both `flush` and `state_lookup` are specified, the flush
 * will always occur before a `state_lookup`, so that both may be set in the
 * same request and the returned state will be the state of the object
 * post-flush. When the stream is closed, a BidiWriteObjectResponse will
 * always be sent to the client, regardless of the value of `state_lookup`.
 *
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which is both readable and writable. It accepts objects
 *   representing {@link protos.google.storage.v2.BidiWriteObjectRequest|BidiWriteObjectRequest} for write() method, and
 *   will emit objects representing {@link protos.google.storage.v2.BidiWriteObjectResponse|BidiWriteObjectResponse} on 'data' event asynchronously.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.bidi_write_object.js</caption>
 * region_tag:storage_v2_generated_Storage_BidiWriteObject_async
 */
  bidiWriteObject(
      options?: CallOptions):
    gax.CancellableStream {
    this.initialize();
    return this.innerApiCalls.bidiWriteObject(null, options);
  }

 /**
 * Retrieves a list of buckets for a given project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project whose buckets we are listing.
 * @param {number} request.pageSize
 *   Maximum number of buckets to return in a single response. The service will
 *   use this parameter or 1,000 items, whichever is smaller. If "acl" is
 *   present in the read_mask, the service will use this parameter of 200 items,
 *   whichever is smaller.
 * @param {string} request.pageToken
 *   A previously-returned page token representing part of the larger set of
 *   results to view.
 * @param {string} request.prefix
 *   Filter results to buckets whose names begin with this prefix.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read from each result.
 *   If no mask is specified, will default to all fields except items.owner,
 *   items.acl, and items.default_object_acl.
 *   * may be used to mean "all fields".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.storage.v2.Bucket|Bucket}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listBucketsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listBuckets(
      request?: protos.google.storage.v2.IListBucketsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.IBucket[],
        protos.google.storage.v2.IListBucketsRequest|null,
        protos.google.storage.v2.IListBucketsResponse
      ]>;
  listBuckets(
      request: protos.google.storage.v2.IListBucketsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.storage.v2.IListBucketsRequest,
          protos.google.storage.v2.IListBucketsResponse|null|undefined,
          protos.google.storage.v2.IBucket>): void;
  listBuckets(
      request: protos.google.storage.v2.IListBucketsRequest,
      callback: PaginationCallback<
          protos.google.storage.v2.IListBucketsRequest,
          protos.google.storage.v2.IListBucketsResponse|null|undefined,
          protos.google.storage.v2.IBucket>): void;
  listBuckets(
      request?: protos.google.storage.v2.IListBucketsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.storage.v2.IListBucketsRequest,
          protos.google.storage.v2.IListBucketsResponse|null|undefined,
          protos.google.storage.v2.IBucket>,
      callback?: PaginationCallback<
          protos.google.storage.v2.IListBucketsRequest,
          protos.google.storage.v2.IListBucketsResponse|null|undefined,
          protos.google.storage.v2.IBucket>):
      Promise<[
        protos.google.storage.v2.IBucket[],
        protos.google.storage.v2.IListBucketsRequest|null,
        protos.google.storage.v2.IListBucketsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<project>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['project'] ?? fieldValue;
          Object.assign(routingParameter, { project: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.listBuckets(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project whose buckets we are listing.
 * @param {number} request.pageSize
 *   Maximum number of buckets to return in a single response. The service will
 *   use this parameter or 1,000 items, whichever is smaller. If "acl" is
 *   present in the read_mask, the service will use this parameter of 200 items,
 *   whichever is smaller.
 * @param {string} request.pageToken
 *   A previously-returned page token representing part of the larger set of
 *   results to view.
 * @param {string} request.prefix
 *   Filter results to buckets whose names begin with this prefix.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read from each result.
 *   If no mask is specified, will default to all fields except items.owner,
 *   items.acl, and items.default_object_acl.
 *   * may be used to mean "all fields".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.storage.v2.Bucket|Bucket} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listBucketsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listBucketsStream(
      request?: protos.google.storage.v2.IListBucketsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<project>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['project'] ?? fieldValue;
          Object.assign(routingParameter, { project: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    const defaultCallSettings = this._defaults['listBuckets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBuckets.createStream(
      this.innerApiCalls.listBuckets as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listBuckets`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The project whose buckets we are listing.
 * @param {number} request.pageSize
 *   Maximum number of buckets to return in a single response. The service will
 *   use this parameter or 1,000 items, whichever is smaller. If "acl" is
 *   present in the read_mask, the service will use this parameter of 200 items,
 *   whichever is smaller.
 * @param {string} request.pageToken
 *   A previously-returned page token representing part of the larger set of
 *   results to view.
 * @param {string} request.prefix
 *   Filter results to buckets whose names begin with this prefix.
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read from each result.
 *   If no mask is specified, will default to all fields except items.owner,
 *   items.acl, and items.default_object_acl.
 *   * may be used to mean "all fields".
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.storage.v2.Bucket|Bucket}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.list_buckets.js</caption>
 * region_tag:storage_v2_generated_Storage_ListBuckets_async
 */
  listBucketsAsync(
      request?: protos.google.storage.v2.IListBucketsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.storage.v2.IBucket>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<project>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['project'] ?? fieldValue;
          Object.assign(routingParameter, { project: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    const defaultCallSettings = this._defaults['listBuckets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBuckets.asyncIterate(
      this.innerApiCalls['listBuckets'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.storage.v2.IBucket>;
  }
 /**
 * Retrieves a list of NotificationConfigs for a given bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Name of a Google Cloud Storage bucket.
 * @param {number} request.pageSize
 *   The maximum number of NotificationConfigs to return. The service may
 *   return fewer than this value. The default value is 100. Specifying a value
 *   above 100 will result in a page_size of 100.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListNotificationConfigs` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListNotificationConfigs`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.storage.v2.NotificationConfig|NotificationConfig}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listNotificationConfigsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listNotificationConfigs(
      request?: protos.google.storage.v2.IListNotificationConfigsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.INotificationConfig[],
        protos.google.storage.v2.IListNotificationConfigsRequest|null,
        protos.google.storage.v2.IListNotificationConfigsResponse
      ]>;
  listNotificationConfigs(
      request: protos.google.storage.v2.IListNotificationConfigsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.storage.v2.IListNotificationConfigsRequest,
          protos.google.storage.v2.IListNotificationConfigsResponse|null|undefined,
          protos.google.storage.v2.INotificationConfig>): void;
  listNotificationConfigs(
      request: protos.google.storage.v2.IListNotificationConfigsRequest,
      callback: PaginationCallback<
          protos.google.storage.v2.IListNotificationConfigsRequest,
          protos.google.storage.v2.IListNotificationConfigsResponse|null|undefined,
          protos.google.storage.v2.INotificationConfig>): void;
  listNotificationConfigs(
      request?: protos.google.storage.v2.IListNotificationConfigsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.storage.v2.IListNotificationConfigsRequest,
          protos.google.storage.v2.IListNotificationConfigsResponse|null|undefined,
          protos.google.storage.v2.INotificationConfig>,
      callback?: PaginationCallback<
          protos.google.storage.v2.IListNotificationConfigsRequest,
          protos.google.storage.v2.IListNotificationConfigsResponse|null|undefined,
          protos.google.storage.v2.INotificationConfig>):
      Promise<[
        protos.google.storage.v2.INotificationConfig[],
        protos.google.storage.v2.IListNotificationConfigsRequest|null,
        protos.google.storage.v2.IListNotificationConfigsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.listNotificationConfigs(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Name of a Google Cloud Storage bucket.
 * @param {number} request.pageSize
 *   The maximum number of NotificationConfigs to return. The service may
 *   return fewer than this value. The default value is 100. Specifying a value
 *   above 100 will result in a page_size of 100.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListNotificationConfigs` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListNotificationConfigs`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.storage.v2.NotificationConfig|NotificationConfig} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listNotificationConfigsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listNotificationConfigsStream(
      request?: protos.google.storage.v2.IListNotificationConfigsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    const defaultCallSettings = this._defaults['listNotificationConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listNotificationConfigs.createStream(
      this.innerApiCalls.listNotificationConfigs as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listNotificationConfigs`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Name of a Google Cloud Storage bucket.
 * @param {number} request.pageSize
 *   The maximum number of NotificationConfigs to return. The service may
 *   return fewer than this value. The default value is 100. Specifying a value
 *   above 100 will result in a page_size of 100.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListNotificationConfigs` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListNotificationConfigs`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.storage.v2.NotificationConfig|NotificationConfig}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.list_notification_configs.js</caption>
 * region_tag:storage_v2_generated_Storage_ListNotificationConfigs_async
 */
  listNotificationConfigsAsync(
      request?: protos.google.storage.v2.IListNotificationConfigsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.storage.v2.INotificationConfig>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    const defaultCallSettings = this._defaults['listNotificationConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listNotificationConfigs.asyncIterate(
      this.innerApiCalls['listNotificationConfigs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.storage.v2.INotificationConfig>;
  }
 /**
 * Retrieves a list of objects matching the criteria.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Name of the bucket in which to look for objects.
 * @param {number} request.pageSize
 *   Maximum number of `items` plus `prefixes` to return
 *   in a single page of responses. As duplicate `prefixes` are
 *   omitted, fewer total results may be returned than requested. The service
 *   will use this parameter or 1,000 items, whichever is smaller.
 * @param {string} request.pageToken
 *   A previously-returned page token representing part of the larger set of
 *   results to view.
 * @param {string} request.delimiter
 *   If set, returns results in a directory-like mode. `items` will contain
 *   only objects whose names, aside from the `prefix`, do not
 *   contain `delimiter`. Objects whose names, aside from the
 *   `prefix`, contain `delimiter` will have their name,
 *   truncated after the `delimiter`, returned in
 *   `prefixes`. Duplicate `prefixes` are omitted.
 * @param {boolean} request.includeTrailingDelimiter
 *   If true, objects that end in exactly one instance of `delimiter`
 *   will have their metadata included in `items` in addition to
 *   `prefixes`.
 * @param {string} request.prefix
 *   Filter results to objects whose names begin with this prefix.
 * @param {boolean} request.versions
 *   If `true`, lists all versions of an object as distinct results.
 *   For more information, see
 *   [Object
 *   Versioning](https://cloud.google.com/storage/docs/object-versioning).
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read from each result.
 *   If no mask is specified, will default to all fields except items.acl and
 *   items.owner.
 *   * may be used to mean "all fields".
 * @param {string} [request.lexicographicStart]
 *   Optional. Filter results to objects whose names are lexicographically equal
 *   to or after lexicographic_start. If lexicographic_end is also set, the
 *   objects listed have names between lexicographic_start (inclusive) and
 *   lexicographic_end (exclusive).
 * @param {string} [request.lexicographicEnd]
 *   Optional. Filter results to objects whose names are lexicographically
 *   before lexicographic_end. If lexicographic_start is also set, the objects
 *   listed have names between lexicographic_start (inclusive) and
 *   lexicographic_end (exclusive).
 * @param {boolean} [request.softDeleted]
 *   Optional. If true, only list all soft-deleted versions of the object.
 *   Soft delete policy is required to set this option.
 * @param {string} [request.matchGlob]
 *   Optional. Filter results to objects and prefixes that match this glob
 *   pattern. See [List Objects Using
 *   Glob](https://cloud.google.com/storage/docs/json_api/v1/objects/list#list-objects-and-prefixes-using-glob)
 *   for the full syntax.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.storage.v2.Object|Object}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listObjectsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listObjects(
      request?: protos.google.storage.v2.IListObjectsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.IObject[],
        protos.google.storage.v2.IListObjectsRequest|null,
        protos.google.storage.v2.IListObjectsResponse
      ]>;
  listObjects(
      request: protos.google.storage.v2.IListObjectsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.storage.v2.IListObjectsRequest,
          protos.google.storage.v2.IListObjectsResponse|null|undefined,
          protos.google.storage.v2.IObject>): void;
  listObjects(
      request: protos.google.storage.v2.IListObjectsRequest,
      callback: PaginationCallback<
          protos.google.storage.v2.IListObjectsRequest,
          protos.google.storage.v2.IListObjectsResponse|null|undefined,
          protos.google.storage.v2.IObject>): void;
  listObjects(
      request?: protos.google.storage.v2.IListObjectsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.storage.v2.IListObjectsRequest,
          protos.google.storage.v2.IListObjectsResponse|null|undefined,
          protos.google.storage.v2.IObject>,
      callback?: PaginationCallback<
          protos.google.storage.v2.IListObjectsRequest,
          protos.google.storage.v2.IListObjectsResponse|null|undefined,
          protos.google.storage.v2.IObject>):
      Promise<[
        protos.google.storage.v2.IObject[],
        protos.google.storage.v2.IListObjectsRequest|null,
        protos.google.storage.v2.IListObjectsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.listObjects(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Name of the bucket in which to look for objects.
 * @param {number} request.pageSize
 *   Maximum number of `items` plus `prefixes` to return
 *   in a single page of responses. As duplicate `prefixes` are
 *   omitted, fewer total results may be returned than requested. The service
 *   will use this parameter or 1,000 items, whichever is smaller.
 * @param {string} request.pageToken
 *   A previously-returned page token representing part of the larger set of
 *   results to view.
 * @param {string} request.delimiter
 *   If set, returns results in a directory-like mode. `items` will contain
 *   only objects whose names, aside from the `prefix`, do not
 *   contain `delimiter`. Objects whose names, aside from the
 *   `prefix`, contain `delimiter` will have their name,
 *   truncated after the `delimiter`, returned in
 *   `prefixes`. Duplicate `prefixes` are omitted.
 * @param {boolean} request.includeTrailingDelimiter
 *   If true, objects that end in exactly one instance of `delimiter`
 *   will have their metadata included in `items` in addition to
 *   `prefixes`.
 * @param {string} request.prefix
 *   Filter results to objects whose names begin with this prefix.
 * @param {boolean} request.versions
 *   If `true`, lists all versions of an object as distinct results.
 *   For more information, see
 *   [Object
 *   Versioning](https://cloud.google.com/storage/docs/object-versioning).
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read from each result.
 *   If no mask is specified, will default to all fields except items.acl and
 *   items.owner.
 *   * may be used to mean "all fields".
 * @param {string} [request.lexicographicStart]
 *   Optional. Filter results to objects whose names are lexicographically equal
 *   to or after lexicographic_start. If lexicographic_end is also set, the
 *   objects listed have names between lexicographic_start (inclusive) and
 *   lexicographic_end (exclusive).
 * @param {string} [request.lexicographicEnd]
 *   Optional. Filter results to objects whose names are lexicographically
 *   before lexicographic_end. If lexicographic_start is also set, the objects
 *   listed have names between lexicographic_start (inclusive) and
 *   lexicographic_end (exclusive).
 * @param {boolean} [request.softDeleted]
 *   Optional. If true, only list all soft-deleted versions of the object.
 *   Soft delete policy is required to set this option.
 * @param {string} [request.matchGlob]
 *   Optional. Filter results to objects and prefixes that match this glob
 *   pattern. See [List Objects Using
 *   Glob](https://cloud.google.com/storage/docs/json_api/v1/objects/list#list-objects-and-prefixes-using-glob)
 *   for the full syntax.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.storage.v2.Object|Object} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listObjectsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listObjectsStream(
      request?: protos.google.storage.v2.IListObjectsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    const defaultCallSettings = this._defaults['listObjects'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listObjects.createStream(
      this.innerApiCalls.listObjects as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listObjects`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Name of the bucket in which to look for objects.
 * @param {number} request.pageSize
 *   Maximum number of `items` plus `prefixes` to return
 *   in a single page of responses. As duplicate `prefixes` are
 *   omitted, fewer total results may be returned than requested. The service
 *   will use this parameter or 1,000 items, whichever is smaller.
 * @param {string} request.pageToken
 *   A previously-returned page token representing part of the larger set of
 *   results to view.
 * @param {string} request.delimiter
 *   If set, returns results in a directory-like mode. `items` will contain
 *   only objects whose names, aside from the `prefix`, do not
 *   contain `delimiter`. Objects whose names, aside from the
 *   `prefix`, contain `delimiter` will have their name,
 *   truncated after the `delimiter`, returned in
 *   `prefixes`. Duplicate `prefixes` are omitted.
 * @param {boolean} request.includeTrailingDelimiter
 *   If true, objects that end in exactly one instance of `delimiter`
 *   will have their metadata included in `items` in addition to
 *   `prefixes`.
 * @param {string} request.prefix
 *   Filter results to objects whose names begin with this prefix.
 * @param {boolean} request.versions
 *   If `true`, lists all versions of an object as distinct results.
 *   For more information, see
 *   [Object
 *   Versioning](https://cloud.google.com/storage/docs/object-versioning).
 * @param {google.protobuf.FieldMask} request.readMask
 *   Mask specifying which fields to read from each result.
 *   If no mask is specified, will default to all fields except items.acl and
 *   items.owner.
 *   * may be used to mean "all fields".
 * @param {string} [request.lexicographicStart]
 *   Optional. Filter results to objects whose names are lexicographically equal
 *   to or after lexicographic_start. If lexicographic_end is also set, the
 *   objects listed have names between lexicographic_start (inclusive) and
 *   lexicographic_end (exclusive).
 * @param {string} [request.lexicographicEnd]
 *   Optional. Filter results to objects whose names are lexicographically
 *   before lexicographic_end. If lexicographic_start is also set, the objects
 *   listed have names between lexicographic_start (inclusive) and
 *   lexicographic_end (exclusive).
 * @param {boolean} [request.softDeleted]
 *   Optional. If true, only list all soft-deleted versions of the object.
 *   Soft delete policy is required to set this option.
 * @param {string} [request.matchGlob]
 *   Optional. Filter results to objects and prefixes that match this glob
 *   pattern. See [List Objects Using
 *   Glob](https://cloud.google.com/storage/docs/json_api/v1/objects/list#list-objects-and-prefixes-using-glob)
 *   for the full syntax.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.storage.v2.Object|Object}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.list_objects.js</caption>
 * region_tag:storage_v2_generated_Storage_ListObjects_async
 */
  listObjectsAsync(
      request?: protos.google.storage.v2.IListObjectsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.storage.v2.IObject>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, { bucket: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    const defaultCallSettings = this._defaults['listObjects'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listObjects.asyncIterate(
      this.innerApiCalls['listObjects'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.storage.v2.IObject>;
  }
 /**
 * Lists HMAC keys under a given project with the additional filters provided.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.project
 *   Required. The project to list HMAC keys for, in the format of
 *   "projects/{projectIdentifier}".
 *   {projectIdentifier} can be the project ID or project number.
 * @param {number} request.pageSize
 *   The maximum number of keys to return.
 * @param {string} request.pageToken
 *   A previously returned token from ListHmacKeysResponse to get the next page.
 * @param {string} request.serviceAccountEmail
 *   If set, filters to only return HMAC keys for specified service account.
 * @param {boolean} request.showDeletedKeys
 *   If set, return deleted keys that have not yet been wiped out.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.storage.v2.HmacKeyMetadata|HmacKeyMetadata}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listHmacKeysAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listHmacKeys(
      request?: protos.google.storage.v2.IListHmacKeysRequest,
      options?: CallOptions):
      Promise<[
        protos.google.storage.v2.IHmacKeyMetadata[],
        protos.google.storage.v2.IListHmacKeysRequest|null,
        protos.google.storage.v2.IListHmacKeysResponse
      ]>;
  listHmacKeys(
      request: protos.google.storage.v2.IListHmacKeysRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.storage.v2.IListHmacKeysRequest,
          protos.google.storage.v2.IListHmacKeysResponse|null|undefined,
          protos.google.storage.v2.IHmacKeyMetadata>): void;
  listHmacKeys(
      request: protos.google.storage.v2.IListHmacKeysRequest,
      callback: PaginationCallback<
          protos.google.storage.v2.IListHmacKeysRequest,
          protos.google.storage.v2.IListHmacKeysResponse|null|undefined,
          protos.google.storage.v2.IHmacKeyMetadata>): void;
  listHmacKeys(
      request?: protos.google.storage.v2.IListHmacKeysRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.storage.v2.IListHmacKeysRequest,
          protos.google.storage.v2.IListHmacKeysResponse|null|undefined,
          protos.google.storage.v2.IHmacKeyMetadata>,
      callback?: PaginationCallback<
          protos.google.storage.v2.IListHmacKeysRequest,
          protos.google.storage.v2.IListHmacKeysResponse|null|undefined,
          protos.google.storage.v2.IHmacKeyMetadata>):
      Promise<[
        protos.google.storage.v2.IHmacKeyMetadata[],
        protos.google.storage.v2.IListHmacKeysRequest|null,
        protos.google.storage.v2.IListHmacKeysResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.project;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<project>.*)'));
        if (match) {
          const parameterValue = match.groups?.['project'] ?? fieldValue;
          Object.assign(routingParameter, { project: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.listHmacKeys(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.project
 *   Required. The project to list HMAC keys for, in the format of
 *   "projects/{projectIdentifier}".
 *   {projectIdentifier} can be the project ID or project number.
 * @param {number} request.pageSize
 *   The maximum number of keys to return.
 * @param {string} request.pageToken
 *   A previously returned token from ListHmacKeysResponse to get the next page.
 * @param {string} request.serviceAccountEmail
 *   If set, filters to only return HMAC keys for specified service account.
 * @param {boolean} request.showDeletedKeys
 *   If set, return deleted keys that have not yet been wiped out.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.storage.v2.HmacKeyMetadata|HmacKeyMetadata} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listHmacKeysAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listHmacKeysStream(
      request?: protos.google.storage.v2.IListHmacKeysRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.project;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<project>.*)'));
        if (match) {
          const parameterValue = match.groups?.['project'] ?? fieldValue;
          Object.assign(routingParameter, { project: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    const defaultCallSettings = this._defaults['listHmacKeys'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listHmacKeys.createStream(
      this.innerApiCalls.listHmacKeys as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listHmacKeys`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.project
 *   Required. The project to list HMAC keys for, in the format of
 *   "projects/{projectIdentifier}".
 *   {projectIdentifier} can be the project ID or project number.
 * @param {number} request.pageSize
 *   The maximum number of keys to return.
 * @param {string} request.pageToken
 *   A previously returned token from ListHmacKeysResponse to get the next page.
 * @param {string} request.serviceAccountEmail
 *   If set, filters to only return HMAC keys for specified service account.
 * @param {boolean} request.showDeletedKeys
 *   If set, return deleted keys that have not yet been wiped out.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.storage.v2.HmacKeyMetadata|HmacKeyMetadata}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/storage.list_hmac_keys.js</caption>
 * region_tag:storage_v2_generated_Storage_ListHmacKeys_async
 */
  listHmacKeysAsync(
      request?: protos.google.storage.v2.IListHmacKeysRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.storage.v2.IHmacKeyMetadata>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.project;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<project>.*)'));
        if (match) {
          const parameterValue = match.groups?.['project'] ?? fieldValue;
          Object.assign(routingParameter, { project: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    const defaultCallSettings = this._defaults['listHmacKeys'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listHmacKeys.asyncIterate(
      this.innerApiCalls['listHmacKeys'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.storage.v2.IHmacKeyMetadata>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified bucket resource name string.
   *
   * @param {string} project
   * @param {string} bucket
   * @returns {string} Resource name string.
   */
  bucketPath(project:string,bucket:string) {
    return this.pathTemplates.bucketPathTemplate.render({
      project: project,
      bucket: bucket,
    });
  }

  /**
   * Parse the project from Bucket resource.
   *
   * @param {string} bucketName
   *   A fully-qualified path representing Bucket resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBucketName(bucketName: string) {
    return this.pathTemplates.bucketPathTemplate.match(bucketName).project;
  }

  /**
   * Parse the bucket from Bucket resource.
   *
   * @param {string} bucketName
   *   A fully-qualified path representing Bucket resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromBucketName(bucketName: string) {
    return this.pathTemplates.bucketPathTemplate.match(bucketName).bucket;
  }

  /**
   * Return a fully-qualified cryptoKey resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} key_ring
   * @param {string} crypto_key
   * @returns {string} Resource name string.
   */
  cryptoKeyPath(project:string,location:string,keyRing:string,cryptoKey:string) {
    return this.pathTemplates.cryptoKeyPathTemplate.render({
      project: project,
      location: location,
      key_ring: keyRing,
      crypto_key: cryptoKey,
    });
  }

  /**
   * Parse the project from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).project;
  }

  /**
   * Parse the location from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).location;
  }

  /**
   * Parse the key_ring from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the key_ring.
   */
  matchKeyRingFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).key_ring;
  }

  /**
   * Parse the crypto_key from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the crypto_key.
   */
  matchCryptoKeyFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).crypto_key;
  }

  /**
   * Return a fully-qualified notificationConfig resource name string.
   *
   * @param {string} project
   * @param {string} bucket
   * @param {string} notification_config
   * @returns {string} Resource name string.
   */
  notificationConfigPath(project:string,bucket:string,notificationConfig:string) {
    return this.pathTemplates.notificationConfigPathTemplate.render({
      project: project,
      bucket: bucket,
      notification_config: notificationConfig,
    });
  }

  /**
   * Parse the project from NotificationConfig resource.
   *
   * @param {string} notificationConfigName
   *   A fully-qualified path representing NotificationConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNotificationConfigName(notificationConfigName: string) {
    return this.pathTemplates.notificationConfigPathTemplate.match(notificationConfigName).project;
  }

  /**
   * Parse the bucket from NotificationConfig resource.
   *
   * @param {string} notificationConfigName
   *   A fully-qualified path representing NotificationConfig resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromNotificationConfigName(notificationConfigName: string) {
    return this.pathTemplates.notificationConfigPathTemplate.match(notificationConfigName).bucket;
  }

  /**
   * Parse the notification_config from NotificationConfig resource.
   *
   * @param {string} notificationConfigName
   *   A fully-qualified path representing NotificationConfig resource.
   * @returns {string} A string representing the notification_config.
   */
  matchNotificationConfigFromNotificationConfigName(notificationConfigName: string) {
    return this.pathTemplates.notificationConfigPathTemplate.match(notificationConfigName).notification_config;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.storageStub && !this._terminated) {
      return this.storageStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
