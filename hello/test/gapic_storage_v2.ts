// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as storageModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubServerStreamingCall<ResponseType>(response?: ResponseType, error?: Error) {
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // write something to the stream to trigger transformStub and send the response back to the client
    setImmediate(() => { mockStream.write({}); });
    setImmediate(() => { mockStream.end(); });
    return sinon.stub().returns(mockStream);
}

function stubBidiStreamingCall<ResponseType>(response?: ResponseType, error?: Error) {
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    return sinon.stub().returns(mockStream);
}

function stubClientStreamingCall<ResponseType>(response?: ResponseType, error?: Error) {
    if (error) {
        return sinon.stub().callsArgWith(2, error);
    }
    const transformStub = sinon.stub();
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    return sinon.stub().returns(mockStream).callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v2.StorageClient', () => {
    describe('Common methods', () => {
        it('has servicePath', () => {
            const servicePath = storageModule.v2.StorageClient.servicePath;
            assert(servicePath);
        });

        it('has apiEndpoint', () => {
            const apiEndpoint = storageModule.v2.StorageClient.apiEndpoint;
            assert(apiEndpoint);
        });

        it('has port', () => {
            const port = storageModule.v2.StorageClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new storageModule.v2.StorageClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new storageModule.v2.StorageClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.storageStub, undefined);
            await client.initialize();
            assert(client.storageStub);
        });

        it('has close method for the initialized client', done => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.storageStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.storageStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('deleteBucket', () => {
        it('invokes deleteBucket without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.DeleteBucketRequest()
            );
            // path template: {bucket=**}
            request.name = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteBucket = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteBucket(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteBucket as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteBucket as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteBucket without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.DeleteBucketRequest()
            );
            // path template: {bucket=**}
            request.name = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteBucket = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteBucket(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteBucket as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteBucket as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteBucket with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.DeleteBucketRequest()
            );
            // path template: {bucket=**}
            request.name = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteBucket = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteBucket(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteBucket as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteBucket as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteBucket with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.DeleteBucketRequest()
            );
            // path template: {bucket=**}
            request.name = 'value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteBucket(request), expectedError);
        });
    });

    describe('getBucket', () => {
        it('invokes getBucket without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetBucketRequest()
            );
            // path template: {bucket=**}
            request.name = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.Bucket()
            );
            client.innerApiCalls.getBucket = stubSimpleCall(expectedResponse);
            const [response] = await client.getBucket(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getBucket as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getBucket as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getBucket without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetBucketRequest()
            );
            // path template: {bucket=**}
            request.name = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.Bucket()
            );
            client.innerApiCalls.getBucket = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getBucket(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.IBucket|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getBucket as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getBucket as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getBucket with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetBucketRequest()
            );
            // path template: {bucket=**}
            request.name = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.getBucket = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getBucket(request), expectedError);
            const actualRequest = (client.innerApiCalls.getBucket as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getBucket as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getBucket with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetBucketRequest()
            );
            // path template: {bucket=**}
            request.name = 'value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getBucket(request), expectedError);
        });
    });

    describe('createBucket', () => {
        it('invokes createBucket without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.CreateBucketRequest()
            );
            // path template: {project=**}
            request.parent = 'value';
            request.bucket = {};
            // path template: {project=**}
            request.bucket.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.Bucket()
            );
            client.innerApiCalls.createBucket = stubSimpleCall(expectedResponse);
            const [response] = await client.createBucket(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createBucket as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createBucket as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createBucket without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.CreateBucketRequest()
            );
            // path template: {project=**}
            request.parent = 'value';
            request.bucket = {};
            // path template: {project=**}
            request.bucket.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.Bucket()
            );
            client.innerApiCalls.createBucket = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createBucket(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.IBucket|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createBucket as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createBucket as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createBucket with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.CreateBucketRequest()
            );
            // path template: {project=**}
            request.parent = 'value';
            request.bucket = {};
            // path template: {project=**}
            request.bucket.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.createBucket = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createBucket(request), expectedError);
            const actualRequest = (client.innerApiCalls.createBucket as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createBucket as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createBucket with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.CreateBucketRequest()
            );
            // path template: {project=**}
            request.parent = 'value';
            request.bucket = {};
            // path template: {project=**}
            request.bucket.project = 'value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createBucket(request), expectedError);
        });
    });

    describe('lockBucketRetentionPolicy', () => {
        it('invokes lockBucketRetentionPolicy without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.LockBucketRetentionPolicyRequest()
            );
            // path template: {bucket=**}
            request.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.Bucket()
            );
            client.innerApiCalls.lockBucketRetentionPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.lockBucketRetentionPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.lockBucketRetentionPolicy as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.lockBucketRetentionPolicy as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes lockBucketRetentionPolicy without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.LockBucketRetentionPolicyRequest()
            );
            // path template: {bucket=**}
            request.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.Bucket()
            );
            client.innerApiCalls.lockBucketRetentionPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.lockBucketRetentionPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.IBucket|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.lockBucketRetentionPolicy as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.lockBucketRetentionPolicy as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes lockBucketRetentionPolicy with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.LockBucketRetentionPolicyRequest()
            );
            // path template: {bucket=**}
            request.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.lockBucketRetentionPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.lockBucketRetentionPolicy(request), expectedError);
            const actualRequest = (client.innerApiCalls.lockBucketRetentionPolicy as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.lockBucketRetentionPolicy as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes lockBucketRetentionPolicy with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.LockBucketRetentionPolicyRequest()
            );
            // path template: {bucket=**}
            request.bucket = 'value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.lockBucketRetentionPolicy(request), expectedError);
        });
    });

    describe('getIamPolicy', () => {
        it('invokes getIamPolicy without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.GetIamPolicyRequest()
            );
            // path template: {bucket=**}
            request.resource = 'value';
            // path template: {bucket=projects/*/buckets/*}/objects/**
            request.resource = 'projects/value/buckets/value/objects/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedResponse = generateSampleMessage(
              new protos.google.iam.v1.Policy()
            );
            client.innerApiCalls.getIamPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.getIamPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getIamPolicy as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getIamPolicy as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getIamPolicy without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.GetIamPolicyRequest()
            );
            // path template: {bucket=**}
            request.resource = 'value';
            // path template: {bucket=projects/*/buckets/*}/objects/**
            request.resource = 'projects/value/buckets/value/objects/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedResponse = generateSampleMessage(
              new protos.google.iam.v1.Policy()
            );
            client.innerApiCalls.getIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getIamPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.IPolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getIamPolicy as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getIamPolicy as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getIamPolicy with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.GetIamPolicyRequest()
            );
            // path template: {bucket=**}
            request.resource = 'value';
            // path template: {bucket=projects/*/buckets/*}/objects/**
            request.resource = 'projects/value/buckets/value/objects/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedError = new Error('expected');
            client.innerApiCalls.getIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIamPolicy(request), expectedError);
            const actualRequest = (client.innerApiCalls.getIamPolicy as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getIamPolicy as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getIamPolicy with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.GetIamPolicyRequest()
            );
            // path template: {bucket=**}
            request.resource = 'value';
            // path template: {bucket=projects/*/buckets/*}/objects/**
            request.resource = 'projects/value/buckets/value/objects/value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getIamPolicy(request), expectedError);
        });
    });

    describe('setIamPolicy', () => {
        it('invokes setIamPolicy without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.SetIamPolicyRequest()
            );
            // path template: {bucket=**}
            request.resource = 'value';
            // path template: {bucket=projects/*/buckets/*}/objects/**
            request.resource = 'projects/value/buckets/value/objects/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedResponse = generateSampleMessage(
              new protos.google.iam.v1.Policy()
            );
            client.innerApiCalls.setIamPolicy = stubSimpleCall(expectedResponse);
            const [response] = await client.setIamPolicy(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.setIamPolicy as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.setIamPolicy as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes setIamPolicy without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.SetIamPolicyRequest()
            );
            // path template: {bucket=**}
            request.resource = 'value';
            // path template: {bucket=projects/*/buckets/*}/objects/**
            request.resource = 'projects/value/buckets/value/objects/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedResponse = generateSampleMessage(
              new protos.google.iam.v1.Policy()
            );
            client.innerApiCalls.setIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setIamPolicy(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.IPolicy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.setIamPolicy as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.setIamPolicy as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes setIamPolicy with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.SetIamPolicyRequest()
            );
            // path template: {bucket=**}
            request.resource = 'value';
            // path template: {bucket=projects/*/buckets/*}/objects/**
            request.resource = 'projects/value/buckets/value/objects/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedError = new Error('expected');
            client.innerApiCalls.setIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setIamPolicy(request), expectedError);
            const actualRequest = (client.innerApiCalls.setIamPolicy as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.setIamPolicy as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes setIamPolicy with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.SetIamPolicyRequest()
            );
            // path template: {bucket=**}
            request.resource = 'value';
            // path template: {bucket=projects/*/buckets/*}/objects/**
            request.resource = 'projects/value/buckets/value/objects/value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.setIamPolicy(request), expectedError);
        });
    });

    describe('testIamPermissions', () => {
        it('invokes testIamPermissions without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.TestIamPermissionsRequest()
            );
            // path template: {bucket=**}
            request.resource = 'value';
            // path template: {bucket=projects/*/buckets/*}/objects/**
            request.resource = 'projects/value/buckets/value/objects/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedResponse = generateSampleMessage(
              new protos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.innerApiCalls.testIamPermissions = stubSimpleCall(expectedResponse);
            const [response] = await client.testIamPermissions(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.testIamPermissions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.testIamPermissions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes testIamPermissions without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.TestIamPermissionsRequest()
            );
            // path template: {bucket=**}
            request.resource = 'value';
            // path template: {bucket=projects/*/buckets/*}/objects/**
            request.resource = 'projects/value/buckets/value/objects/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedResponse = generateSampleMessage(
              new protos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.innerApiCalls.testIamPermissions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.testIamPermissions(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1.ITestIamPermissionsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.testIamPermissions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.testIamPermissions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes testIamPermissions with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.TestIamPermissionsRequest()
            );
            // path template: {bucket=**}
            request.resource = 'value';
            // path template: {bucket=projects/*/buckets/*}/objects/**
            request.resource = 'projects/value/buckets/value/objects/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedError = new Error('expected');
            client.innerApiCalls.testIamPermissions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.testIamPermissions(request), expectedError);
            const actualRequest = (client.innerApiCalls.testIamPermissions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.testIamPermissions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes testIamPermissions with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.iam.v1.TestIamPermissionsRequest()
            );
            // path template: {bucket=**}
            request.resource = 'value';
            // path template: {bucket=projects/*/buckets/*}/objects/**
            request.resource = 'projects/value/buckets/value/objects/value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.testIamPermissions(request), expectedError);
        });
    });

    describe('updateBucket', () => {
        it('invokes updateBucket without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.UpdateBucketRequest()
            );
            request.bucket = {};
            // path template: {bucket=**}
            request.bucket.name = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.Bucket()
            );
            client.innerApiCalls.updateBucket = stubSimpleCall(expectedResponse);
            const [response] = await client.updateBucket(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateBucket as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateBucket as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateBucket without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.UpdateBucketRequest()
            );
            request.bucket = {};
            // path template: {bucket=**}
            request.bucket.name = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.Bucket()
            );
            client.innerApiCalls.updateBucket = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateBucket(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.IBucket|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateBucket as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateBucket as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateBucket with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.UpdateBucketRequest()
            );
            request.bucket = {};
            // path template: {bucket=**}
            request.bucket.name = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.updateBucket = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateBucket(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateBucket as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateBucket as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateBucket with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.UpdateBucketRequest()
            );
            request.bucket = {};
            // path template: {bucket=**}
            request.bucket.name = 'value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateBucket(request), expectedError);
        });
    });

    describe('deleteNotificationConfig', () => {
        it('invokes deleteNotificationConfig without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.DeleteNotificationConfigRequest()
            );
            // path template: {bucket=projects/*/buckets/*}/**
            request.name = 'projects/value/buckets/value/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteNotificationConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteNotificationConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteNotificationConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteNotificationConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteNotificationConfig without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.DeleteNotificationConfigRequest()
            );
            // path template: {bucket=projects/*/buckets/*}/**
            request.name = 'projects/value/buckets/value/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteNotificationConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteNotificationConfig(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteNotificationConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteNotificationConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteNotificationConfig with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.DeleteNotificationConfigRequest()
            );
            // path template: {bucket=projects/*/buckets/*}/**
            request.name = 'projects/value/buckets/value/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteNotificationConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteNotificationConfig(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteNotificationConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteNotificationConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteNotificationConfig with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.DeleteNotificationConfigRequest()
            );
            // path template: {bucket=projects/*/buckets/*}/**
            request.name = 'projects/value/buckets/value/value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteNotificationConfig(request), expectedError);
        });
    });

    describe('getNotificationConfig', () => {
        it('invokes getNotificationConfig without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetNotificationConfigRequest()
            );
            // path template: {bucket=projects/*/buckets/*}/**
            request.name = 'projects/value/buckets/value/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.NotificationConfig()
            );
            client.innerApiCalls.getNotificationConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.getNotificationConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getNotificationConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getNotificationConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getNotificationConfig without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetNotificationConfigRequest()
            );
            // path template: {bucket=projects/*/buckets/*}/**
            request.name = 'projects/value/buckets/value/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.NotificationConfig()
            );
            client.innerApiCalls.getNotificationConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getNotificationConfig(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.INotificationConfig|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getNotificationConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getNotificationConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getNotificationConfig with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetNotificationConfigRequest()
            );
            // path template: {bucket=projects/*/buckets/*}/**
            request.name = 'projects/value/buckets/value/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedError = new Error('expected');
            client.innerApiCalls.getNotificationConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getNotificationConfig(request), expectedError);
            const actualRequest = (client.innerApiCalls.getNotificationConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getNotificationConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getNotificationConfig with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetNotificationConfigRequest()
            );
            // path template: {bucket=projects/*/buckets/*}/**
            request.name = 'projects/value/buckets/value/value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getNotificationConfig(request), expectedError);
        });
    });

    describe('createNotificationConfig', () => {
        it('invokes createNotificationConfig without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.CreateNotificationConfigRequest()
            );
            // path template: {bucket=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.NotificationConfig()
            );
            client.innerApiCalls.createNotificationConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.createNotificationConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createNotificationConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createNotificationConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createNotificationConfig without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.CreateNotificationConfigRequest()
            );
            // path template: {bucket=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.NotificationConfig()
            );
            client.innerApiCalls.createNotificationConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createNotificationConfig(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.INotificationConfig|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createNotificationConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createNotificationConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createNotificationConfig with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.CreateNotificationConfigRequest()
            );
            // path template: {bucket=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.createNotificationConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createNotificationConfig(request), expectedError);
            const actualRequest = (client.innerApiCalls.createNotificationConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createNotificationConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createNotificationConfig with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.CreateNotificationConfigRequest()
            );
            // path template: {bucket=**}
            request.parent = 'value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createNotificationConfig(request), expectedError);
        });
    });

    describe('composeObject', () => {
        it('invokes composeObject without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ComposeObjectRequest()
            );
            request.destination = {};
            // path template: {bucket=**}
            request.destination.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.Object()
            );
            client.innerApiCalls.composeObject = stubSimpleCall(expectedResponse);
            const [response] = await client.composeObject(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.composeObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.composeObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes composeObject without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ComposeObjectRequest()
            );
            request.destination = {};
            // path template: {bucket=**}
            request.destination.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.Object()
            );
            client.innerApiCalls.composeObject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.composeObject(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.IObject|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.composeObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.composeObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes composeObject with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ComposeObjectRequest()
            );
            request.destination = {};
            // path template: {bucket=**}
            request.destination.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.composeObject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.composeObject(request), expectedError);
            const actualRequest = (client.innerApiCalls.composeObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.composeObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes composeObject with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ComposeObjectRequest()
            );
            request.destination = {};
            // path template: {bucket=**}
            request.destination.bucket = 'value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.composeObject(request), expectedError);
        });
    });

    describe('deleteObject', () => {
        it('invokes deleteObject without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.DeleteObjectRequest()
            );
            // path template: {bucket=**}
            request.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteObject = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteObject(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteObject without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.DeleteObjectRequest()
            );
            // path template: {bucket=**}
            request.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteObject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteObject(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteObject with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.DeleteObjectRequest()
            );
            // path template: {bucket=**}
            request.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteObject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteObject(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteObject with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.DeleteObjectRequest()
            );
            // path template: {bucket=**}
            request.bucket = 'value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteObject(request), expectedError);
        });
    });

    describe('restoreObject', () => {
        it('invokes restoreObject without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.RestoreObjectRequest()
            );
            // path template: {bucket=**}
            request.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.Object()
            );
            client.innerApiCalls.restoreObject = stubSimpleCall(expectedResponse);
            const [response] = await client.restoreObject(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.restoreObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.restoreObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes restoreObject without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.RestoreObjectRequest()
            );
            // path template: {bucket=**}
            request.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.Object()
            );
            client.innerApiCalls.restoreObject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.restoreObject(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.IObject|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.restoreObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.restoreObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes restoreObject with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.RestoreObjectRequest()
            );
            // path template: {bucket=**}
            request.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.restoreObject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.restoreObject(request), expectedError);
            const actualRequest = (client.innerApiCalls.restoreObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.restoreObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes restoreObject with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.RestoreObjectRequest()
            );
            // path template: {bucket=**}
            request.bucket = 'value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.restoreObject(request), expectedError);
        });
    });

    describe('cancelResumableWrite', () => {
        it('invokes cancelResumableWrite without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.CancelResumableWriteRequest()
            );
            // path template: {bucket=projects/*/buckets/*}/**
            request.uploadId = 'projects/value/buckets/value/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.CancelResumableWriteResponse()
            );
            client.innerApiCalls.cancelResumableWrite = stubSimpleCall(expectedResponse);
            const [response] = await client.cancelResumableWrite(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.cancelResumableWrite as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.cancelResumableWrite as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes cancelResumableWrite without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.CancelResumableWriteRequest()
            );
            // path template: {bucket=projects/*/buckets/*}/**
            request.uploadId = 'projects/value/buckets/value/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.CancelResumableWriteResponse()
            );
            client.innerApiCalls.cancelResumableWrite = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.cancelResumableWrite(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.ICancelResumableWriteResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.cancelResumableWrite as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.cancelResumableWrite as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes cancelResumableWrite with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.CancelResumableWriteRequest()
            );
            // path template: {bucket=projects/*/buckets/*}/**
            request.uploadId = 'projects/value/buckets/value/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedError = new Error('expected');
            client.innerApiCalls.cancelResumableWrite = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.cancelResumableWrite(request), expectedError);
            const actualRequest = (client.innerApiCalls.cancelResumableWrite as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.cancelResumableWrite as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes cancelResumableWrite with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.CancelResumableWriteRequest()
            );
            // path template: {bucket=projects/*/buckets/*}/**
            request.uploadId = 'projects/value/buckets/value/value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.cancelResumableWrite(request), expectedError);
        });
    });

    describe('getObject', () => {
        it('invokes getObject without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetObjectRequest()
            );
            // path template: {bucket=**}
            request.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.Object()
            );
            client.innerApiCalls.getObject = stubSimpleCall(expectedResponse);
            const [response] = await client.getObject(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getObject without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetObjectRequest()
            );
            // path template: {bucket=**}
            request.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.Object()
            );
            client.innerApiCalls.getObject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getObject(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.IObject|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getObject with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetObjectRequest()
            );
            // path template: {bucket=**}
            request.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.getObject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getObject(request), expectedError);
            const actualRequest = (client.innerApiCalls.getObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getObject with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetObjectRequest()
            );
            // path template: {bucket=**}
            request.bucket = 'value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getObject(request), expectedError);
        });
    });

    describe('updateObject', () => {
        it('invokes updateObject without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.UpdateObjectRequest()
            );
            request.object = {};
            // path template: {bucket=**}
            request.object.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.Object()
            );
            client.innerApiCalls.updateObject = stubSimpleCall(expectedResponse);
            const [response] = await client.updateObject(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateObject without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.UpdateObjectRequest()
            );
            request.object = {};
            // path template: {bucket=**}
            request.object.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.Object()
            );
            client.innerApiCalls.updateObject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateObject(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.IObject|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateObject with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.UpdateObjectRequest()
            );
            request.object = {};
            // path template: {bucket=**}
            request.object.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.updateObject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateObject(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateObject with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.UpdateObjectRequest()
            );
            request.object = {};
            // path template: {bucket=**}
            request.object.bucket = 'value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateObject(request), expectedError);
        });
    });

    describe('rewriteObject', () => {
        it('invokes rewriteObject without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.RewriteObjectRequest()
            );
            // path template: {bucket=**}
            request.destinationBucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.RewriteResponse()
            );
            client.innerApiCalls.rewriteObject = stubSimpleCall(expectedResponse);
            const [response] = await client.rewriteObject(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.rewriteObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.rewriteObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes rewriteObject without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.RewriteObjectRequest()
            );
            // path template: {bucket=**}
            request.destinationBucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.RewriteResponse()
            );
            client.innerApiCalls.rewriteObject = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.rewriteObject(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.IRewriteResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.rewriteObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.rewriteObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes rewriteObject with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.RewriteObjectRequest()
            );
            // path template: {bucket=**}
            request.destinationBucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.rewriteObject = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.rewriteObject(request), expectedError);
            const actualRequest = (client.innerApiCalls.rewriteObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.rewriteObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes rewriteObject with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.RewriteObjectRequest()
            );
            // path template: {bucket=**}
            request.destinationBucket = 'value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.rewriteObject(request), expectedError);
        });
    });

    describe('startResumableWrite', () => {
        it('invokes startResumableWrite without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.StartResumableWriteRequest()
            );
            request.writeObjectSpec = {};
            request.writeObjectSpec.resource = {};
            // path template: {bucket=**}
            request.writeObjectSpec.resource.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.StartResumableWriteResponse()
            );
            client.innerApiCalls.startResumableWrite = stubSimpleCall(expectedResponse);
            const [response] = await client.startResumableWrite(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.startResumableWrite as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.startResumableWrite as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes startResumableWrite without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.StartResumableWriteRequest()
            );
            request.writeObjectSpec = {};
            request.writeObjectSpec.resource = {};
            // path template: {bucket=**}
            request.writeObjectSpec.resource.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.StartResumableWriteResponse()
            );
            client.innerApiCalls.startResumableWrite = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.startResumableWrite(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.IStartResumableWriteResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.startResumableWrite as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.startResumableWrite as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes startResumableWrite with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.StartResumableWriteRequest()
            );
            request.writeObjectSpec = {};
            request.writeObjectSpec.resource = {};
            // path template: {bucket=**}
            request.writeObjectSpec.resource.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.startResumableWrite = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.startResumableWrite(request), expectedError);
            const actualRequest = (client.innerApiCalls.startResumableWrite as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.startResumableWrite as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes startResumableWrite with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.StartResumableWriteRequest()
            );
            request.writeObjectSpec = {};
            request.writeObjectSpec.resource = {};
            // path template: {bucket=**}
            request.writeObjectSpec.resource.bucket = 'value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.startResumableWrite(request), expectedError);
        });
    });

    describe('queryWriteStatus', () => {
        it('invokes queryWriteStatus without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.QueryWriteStatusRequest()
            );
            // path template: {bucket=projects/*/buckets/*}/**
            request.uploadId = 'projects/value/buckets/value/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.QueryWriteStatusResponse()
            );
            client.innerApiCalls.queryWriteStatus = stubSimpleCall(expectedResponse);
            const [response] = await client.queryWriteStatus(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.queryWriteStatus as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.queryWriteStatus as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes queryWriteStatus without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.QueryWriteStatusRequest()
            );
            // path template: {bucket=projects/*/buckets/*}/**
            request.uploadId = 'projects/value/buckets/value/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.QueryWriteStatusResponse()
            );
            client.innerApiCalls.queryWriteStatus = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.queryWriteStatus(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.IQueryWriteStatusResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.queryWriteStatus as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.queryWriteStatus as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes queryWriteStatus with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.QueryWriteStatusRequest()
            );
            // path template: {bucket=projects/*/buckets/*}/**
            request.uploadId = 'projects/value/buckets/value/value';
            const expectedHeaderRequestParams = 'bucket=projects%2Fvalue%2Fbuckets%2Fvalue';
            const expectedError = new Error('expected');
            client.innerApiCalls.queryWriteStatus = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.queryWriteStatus(request), expectedError);
            const actualRequest = (client.innerApiCalls.queryWriteStatus as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.queryWriteStatus as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes queryWriteStatus with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.QueryWriteStatusRequest()
            );
            // path template: {bucket=projects/*/buckets/*}/**
            request.uploadId = 'projects/value/buckets/value/value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.queryWriteStatus(request), expectedError);
        });
    });

    describe('getServiceAccount', () => {
        it('invokes getServiceAccount without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetServiceAccountRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.ServiceAccount()
            );
            client.innerApiCalls.getServiceAccount = stubSimpleCall(expectedResponse);
            const [response] = await client.getServiceAccount(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getServiceAccount as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getServiceAccount as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getServiceAccount without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetServiceAccountRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.ServiceAccount()
            );
            client.innerApiCalls.getServiceAccount = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getServiceAccount(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.IServiceAccount|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getServiceAccount as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getServiceAccount as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getServiceAccount with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetServiceAccountRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.getServiceAccount = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getServiceAccount(request), expectedError);
            const actualRequest = (client.innerApiCalls.getServiceAccount as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getServiceAccount as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getServiceAccount with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetServiceAccountRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getServiceAccount(request), expectedError);
        });
    });

    describe('createHmacKey', () => {
        it('invokes createHmacKey without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.CreateHmacKeyRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.CreateHmacKeyResponse()
            );
            client.innerApiCalls.createHmacKey = stubSimpleCall(expectedResponse);
            const [response] = await client.createHmacKey(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createHmacKey as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createHmacKey as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createHmacKey without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.CreateHmacKeyRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.CreateHmacKeyResponse()
            );
            client.innerApiCalls.createHmacKey = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createHmacKey(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.ICreateHmacKeyResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createHmacKey as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createHmacKey as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createHmacKey with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.CreateHmacKeyRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.createHmacKey = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createHmacKey(request), expectedError);
            const actualRequest = (client.innerApiCalls.createHmacKey as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createHmacKey as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createHmacKey with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.CreateHmacKeyRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createHmacKey(request), expectedError);
        });
    });

    describe('deleteHmacKey', () => {
        it('invokes deleteHmacKey without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.DeleteHmacKeyRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteHmacKey = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteHmacKey(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteHmacKey as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteHmacKey as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteHmacKey without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.DeleteHmacKeyRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteHmacKey = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteHmacKey(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteHmacKey as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteHmacKey as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteHmacKey with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.DeleteHmacKeyRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteHmacKey = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteHmacKey(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteHmacKey as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteHmacKey as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteHmacKey with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.DeleteHmacKeyRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteHmacKey(request), expectedError);
        });
    });

    describe('getHmacKey', () => {
        it('invokes getHmacKey without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetHmacKeyRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.HmacKeyMetadata()
            );
            client.innerApiCalls.getHmacKey = stubSimpleCall(expectedResponse);
            const [response] = await client.getHmacKey(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getHmacKey as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getHmacKey as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getHmacKey without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetHmacKeyRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.HmacKeyMetadata()
            );
            client.innerApiCalls.getHmacKey = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getHmacKey(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.IHmacKeyMetadata|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getHmacKey as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getHmacKey as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getHmacKey with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetHmacKeyRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.getHmacKey = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getHmacKey(request), expectedError);
            const actualRequest = (client.innerApiCalls.getHmacKey as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getHmacKey as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getHmacKey with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.GetHmacKeyRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getHmacKey(request), expectedError);
        });
    });

    describe('updateHmacKey', () => {
        it('invokes updateHmacKey without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.UpdateHmacKeyRequest()
            );
            request.hmacKey = {};
            // path template: {project=**}
            request.hmacKey.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.HmacKeyMetadata()
            );
            client.innerApiCalls.updateHmacKey = stubSimpleCall(expectedResponse);
            const [response] = await client.updateHmacKey(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateHmacKey as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateHmacKey as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateHmacKey without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.UpdateHmacKeyRequest()
            );
            request.hmacKey = {};
            // path template: {project=**}
            request.hmacKey.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.HmacKeyMetadata()
            );
            client.innerApiCalls.updateHmacKey = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateHmacKey(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.IHmacKeyMetadata|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateHmacKey as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateHmacKey as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateHmacKey with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.UpdateHmacKeyRequest()
            );
            request.hmacKey = {};
            // path template: {project=**}
            request.hmacKey.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.updateHmacKey = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateHmacKey(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateHmacKey as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateHmacKey as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateHmacKey with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.UpdateHmacKeyRequest()
            );
            request.hmacKey = {};
            // path template: {project=**}
            request.hmacKey.project = 'value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateHmacKey(request), expectedError);
        });
    });

    describe('readObject', () => {
        it('invokes readObject without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ReadObjectRequest()
            );
            // path template: {bucket=**}
            request.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.ReadObjectResponse()
            );
            client.innerApiCalls.readObject = stubServerStreamingCall(expectedResponse);
            const stream = client.readObject(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.storage.v2.ReadObjectResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.readObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.readObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes readObject with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ReadObjectRequest()
            );
            // path template: {bucket=**}
            request.bucket = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.readObject = stubServerStreamingCall(undefined, expectedError);
            const stream = client.readObject(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.storage.v2.ReadObjectResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            const actualRequest = (client.innerApiCalls.readObject as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.readObject as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes readObject with closed client', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ReadObjectRequest()
            );
            // path template: {bucket=**}
            request.bucket = 'value';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            const stream = client.readObject(request, {retryRequestOptions: {noResponseRetries: 0}});
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.storage.v2.ReadObjectResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
        });
    });

    describe('bidiWriteObject', () => {
        it('invokes bidiWriteObject without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.BidiWriteObjectRequest()
            );
            
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.BidiWriteObjectResponse()
            );
            client.innerApiCalls.bidiWriteObject = stubBidiStreamingCall(expectedResponse);
            const stream = client.bidiWriteObject();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.storage.v2.BidiWriteObjectResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.bidiWriteObject as SinonStub)
                .getCall(0).calledWith(null));
            assert.deepStrictEqual(((stream as unknown as PassThrough)
                ._transform as SinonStub).getCall(0).args[0], request);
        });

        it('invokes bidiWriteObject with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.BidiWriteObjectRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.bidiWriteObject = stubBidiStreamingCall(undefined, expectedError);
            const stream = client.bidiWriteObject();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response: protos.google.storage.v2.BidiWriteObjectResponse) => {
                    resolve(response);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            await assert.rejects(promise, expectedError);
            assert((client.innerApiCalls.bidiWriteObject as SinonStub)
                .getCall(0).calledWith(null));
            assert.deepStrictEqual(((stream as unknown as PassThrough)
                ._transform as SinonStub).getCall(0).args[0], request);
        });
    });

    describe('writeObject', () => {
        it('invokes writeObject without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.WriteObjectRequest()
            );
            
            const expectedResponse = generateSampleMessage(
              new protos.google.storage.v2.WriteObjectResponse()
            );
            client.innerApiCalls.writeObject = stubClientStreamingCall(expectedResponse);
            let stream: PassThrough;
            const promise = new Promise((resolve, reject) => {
                stream = client.writeObject(
                    (err?: Error|null, result?: protos.google.storage.v2.IWriteObjectResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }) as unknown as PassThrough;
                stream.write(request);
                stream.end();
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.writeObject as SinonStub)
                .getCall(0).calledWith(null, {} /*, callback defined above */));
            assert.deepStrictEqual((stream!._transform as SinonStub).getCall(0).args[0], request);
        });

        it('invokes writeObject with error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.WriteObjectRequest()
            );
            const expectedError = new Error('expected');
            client.innerApiCalls.writeObject = stubClientStreamingCall(undefined, expectedError);
            let stream: PassThrough;
            const promise = new Promise((resolve, reject) => {
                stream = client.writeObject(
                    (err?: Error|null, result?: protos.google.storage.v2.IWriteObjectResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }) as unknown as PassThrough;
                stream.write(request);
                stream.end();
            });
            await assert.rejects(promise, expectedError);
            assert((client.innerApiCalls.writeObject as SinonStub)
                .getCall(0).calledWith(null, {} /*, callback defined above */));
        });
    });

    describe('listBuckets', () => {
        it('invokes listBuckets without error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListBucketsRequest()
            );
            // path template: {project=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'project=value';const expectedResponse = [
              generateSampleMessage(new protos.google.storage.v2.Bucket()),
              generateSampleMessage(new protos.google.storage.v2.Bucket()),
              generateSampleMessage(new protos.google.storage.v2.Bucket()),
            ];
            client.innerApiCalls.listBuckets = stubSimpleCall(expectedResponse);
            const [response] = await client.listBuckets(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listBuckets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listBuckets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listBuckets without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListBucketsRequest()
            );
            // path template: {project=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'project=value';const expectedResponse = [
              generateSampleMessage(new protos.google.storage.v2.Bucket()),
              generateSampleMessage(new protos.google.storage.v2.Bucket()),
              generateSampleMessage(new protos.google.storage.v2.Bucket()),
            ];
            client.innerApiCalls.listBuckets = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listBuckets(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.IBucket[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listBuckets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listBuckets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listBuckets with error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListBucketsRequest()
            );
            // path template: {project=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.listBuckets = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listBuckets(request), expectedError);
            const actualRequest = (client.innerApiCalls.listBuckets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listBuckets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listBucketsStream without error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListBucketsRequest()
            );
            // path template: {project=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedResponse = [
              generateSampleMessage(new protos.google.storage.v2.Bucket()),
              generateSampleMessage(new protos.google.storage.v2.Bucket()),
              generateSampleMessage(new protos.google.storage.v2.Bucket()),
            ];
            client.descriptors.page.listBuckets.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listBucketsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.storage.v2.Bucket[] = [];
                stream.on('data', (response: protos.google.storage.v2.Bucket) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listBuckets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listBuckets, request));
            assert(
                (client.descriptors.page.listBuckets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listBucketsStream with error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListBucketsRequest()
            );
            // path template: {project=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedError = new Error('expected');
            client.descriptors.page.listBuckets.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listBucketsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.storage.v2.Bucket[] = [];
                stream.on('data', (response: protos.google.storage.v2.Bucket) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listBuckets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listBuckets, request));
            assert(
                (client.descriptors.page.listBuckets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listBuckets without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListBucketsRequest()
            );
            // path template: {project=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedResponse = [
              generateSampleMessage(new protos.google.storage.v2.Bucket()),
              generateSampleMessage(new protos.google.storage.v2.Bucket()),
              generateSampleMessage(new protos.google.storage.v2.Bucket()),
            ];
            client.descriptors.page.listBuckets.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.storage.v2.IBucket[] = [];
            const iterable = client.listBucketsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listBuckets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listBuckets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listBuckets with error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListBucketsRequest()
            );
            // path template: {project=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedError = new Error('expected');
            client.descriptors.page.listBuckets.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listBucketsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.storage.v2.IBucket[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listBuckets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listBuckets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listNotificationConfigs', () => {
        it('invokes listNotificationConfigs without error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListNotificationConfigsRequest()
            );
            // path template: {bucket=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'bucket=value';const expectedResponse = [
              generateSampleMessage(new protos.google.storage.v2.NotificationConfig()),
              generateSampleMessage(new protos.google.storage.v2.NotificationConfig()),
              generateSampleMessage(new protos.google.storage.v2.NotificationConfig()),
            ];
            client.innerApiCalls.listNotificationConfigs = stubSimpleCall(expectedResponse);
            const [response] = await client.listNotificationConfigs(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listNotificationConfigs as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listNotificationConfigs as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listNotificationConfigs without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListNotificationConfigsRequest()
            );
            // path template: {bucket=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'bucket=value';const expectedResponse = [
              generateSampleMessage(new protos.google.storage.v2.NotificationConfig()),
              generateSampleMessage(new protos.google.storage.v2.NotificationConfig()),
              generateSampleMessage(new protos.google.storage.v2.NotificationConfig()),
            ];
            client.innerApiCalls.listNotificationConfigs = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listNotificationConfigs(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.INotificationConfig[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listNotificationConfigs as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listNotificationConfigs as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listNotificationConfigs with error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListNotificationConfigsRequest()
            );
            // path template: {bucket=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.listNotificationConfigs = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listNotificationConfigs(request), expectedError);
            const actualRequest = (client.innerApiCalls.listNotificationConfigs as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listNotificationConfigs as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listNotificationConfigsStream without error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListNotificationConfigsRequest()
            );
            // path template: {bucket=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = [
              generateSampleMessage(new protos.google.storage.v2.NotificationConfig()),
              generateSampleMessage(new protos.google.storage.v2.NotificationConfig()),
              generateSampleMessage(new protos.google.storage.v2.NotificationConfig()),
            ];
            client.descriptors.page.listNotificationConfigs.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listNotificationConfigsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.storage.v2.NotificationConfig[] = [];
                stream.on('data', (response: protos.google.storage.v2.NotificationConfig) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listNotificationConfigs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listNotificationConfigs, request));
            assert(
                (client.descriptors.page.listNotificationConfigs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listNotificationConfigsStream with error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListNotificationConfigsRequest()
            );
            // path template: {bucket=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedError = new Error('expected');
            client.descriptors.page.listNotificationConfigs.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listNotificationConfigsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.storage.v2.NotificationConfig[] = [];
                stream.on('data', (response: protos.google.storage.v2.NotificationConfig) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listNotificationConfigs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listNotificationConfigs, request));
            assert(
                (client.descriptors.page.listNotificationConfigs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listNotificationConfigs without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListNotificationConfigsRequest()
            );
            // path template: {bucket=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = [
              generateSampleMessage(new protos.google.storage.v2.NotificationConfig()),
              generateSampleMessage(new protos.google.storage.v2.NotificationConfig()),
              generateSampleMessage(new protos.google.storage.v2.NotificationConfig()),
            ];
            client.descriptors.page.listNotificationConfigs.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.storage.v2.INotificationConfig[] = [];
            const iterable = client.listNotificationConfigsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listNotificationConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listNotificationConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listNotificationConfigs with error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListNotificationConfigsRequest()
            );
            // path template: {bucket=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedError = new Error('expected');
            client.descriptors.page.listNotificationConfigs.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listNotificationConfigsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.storage.v2.INotificationConfig[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listNotificationConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listNotificationConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listObjects', () => {
        it('invokes listObjects without error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListObjectsRequest()
            );
            // path template: {bucket=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'bucket=value';const expectedResponse = [
              generateSampleMessage(new protos.google.storage.v2.Object()),
              generateSampleMessage(new protos.google.storage.v2.Object()),
              generateSampleMessage(new protos.google.storage.v2.Object()),
            ];
            client.innerApiCalls.listObjects = stubSimpleCall(expectedResponse);
            const [response] = await client.listObjects(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listObjects as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listObjects as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listObjects without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListObjectsRequest()
            );
            // path template: {bucket=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'bucket=value';const expectedResponse = [
              generateSampleMessage(new protos.google.storage.v2.Object()),
              generateSampleMessage(new protos.google.storage.v2.Object()),
              generateSampleMessage(new protos.google.storage.v2.Object()),
            ];
            client.innerApiCalls.listObjects = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listObjects(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.IObject[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listObjects as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listObjects as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listObjects with error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListObjectsRequest()
            );
            // path template: {bucket=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.listObjects = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listObjects(request), expectedError);
            const actualRequest = (client.innerApiCalls.listObjects as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listObjects as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listObjectsStream without error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListObjectsRequest()
            );
            // path template: {bucket=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = [
              generateSampleMessage(new protos.google.storage.v2.Object()),
              generateSampleMessage(new protos.google.storage.v2.Object()),
              generateSampleMessage(new protos.google.storage.v2.Object()),
            ];
            client.descriptors.page.listObjects.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listObjectsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.storage.v2.Object[] = [];
                stream.on('data', (response: protos.google.storage.v2.Object) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listObjects.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listObjects, request));
            assert(
                (client.descriptors.page.listObjects.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listObjectsStream with error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListObjectsRequest()
            );
            // path template: {bucket=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedError = new Error('expected');
            client.descriptors.page.listObjects.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listObjectsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.storage.v2.Object[] = [];
                stream.on('data', (response: protos.google.storage.v2.Object) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listObjects.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listObjects, request));
            assert(
                (client.descriptors.page.listObjects.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listObjects without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListObjectsRequest()
            );
            // path template: {bucket=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedResponse = [
              generateSampleMessage(new protos.google.storage.v2.Object()),
              generateSampleMessage(new protos.google.storage.v2.Object()),
              generateSampleMessage(new protos.google.storage.v2.Object()),
            ];
            client.descriptors.page.listObjects.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.storage.v2.IObject[] = [];
            const iterable = client.listObjectsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listObjects.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listObjects.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listObjects with error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListObjectsRequest()
            );
            // path template: {bucket=**}
            request.parent = 'value';
            const expectedHeaderRequestParams = 'bucket=value';
            const expectedError = new Error('expected');
            client.descriptors.page.listObjects.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listObjectsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.storage.v2.IObject[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listObjects.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listObjects.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listHmacKeys', () => {
        it('invokes listHmacKeys without error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListHmacKeysRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedHeaderRequestParams = 'project=value';const expectedResponse = [
              generateSampleMessage(new protos.google.storage.v2.HmacKeyMetadata()),
              generateSampleMessage(new protos.google.storage.v2.HmacKeyMetadata()),
              generateSampleMessage(new protos.google.storage.v2.HmacKeyMetadata()),
            ];
            client.innerApiCalls.listHmacKeys = stubSimpleCall(expectedResponse);
            const [response] = await client.listHmacKeys(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listHmacKeys as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listHmacKeys as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listHmacKeys without error using callback', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListHmacKeysRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedHeaderRequestParams = 'project=value';const expectedResponse = [
              generateSampleMessage(new protos.google.storage.v2.HmacKeyMetadata()),
              generateSampleMessage(new protos.google.storage.v2.HmacKeyMetadata()),
              generateSampleMessage(new protos.google.storage.v2.HmacKeyMetadata()),
            ];
            client.innerApiCalls.listHmacKeys = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listHmacKeys(
                    request,
                    (err?: Error|null, result?: protos.google.storage.v2.IHmacKeyMetadata[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listHmacKeys as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listHmacKeys as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listHmacKeys with error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListHmacKeysRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedError = new Error('expected');
            client.innerApiCalls.listHmacKeys = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listHmacKeys(request), expectedError);
            const actualRequest = (client.innerApiCalls.listHmacKeys as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listHmacKeys as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listHmacKeysStream without error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListHmacKeysRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedResponse = [
              generateSampleMessage(new protos.google.storage.v2.HmacKeyMetadata()),
              generateSampleMessage(new protos.google.storage.v2.HmacKeyMetadata()),
              generateSampleMessage(new protos.google.storage.v2.HmacKeyMetadata()),
            ];
            client.descriptors.page.listHmacKeys.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listHmacKeysStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.storage.v2.HmacKeyMetadata[] = [];
                stream.on('data', (response: protos.google.storage.v2.HmacKeyMetadata) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listHmacKeys.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listHmacKeys, request));
            assert(
                (client.descriptors.page.listHmacKeys.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listHmacKeysStream with error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListHmacKeysRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedError = new Error('expected');
            client.descriptors.page.listHmacKeys.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listHmacKeysStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.storage.v2.HmacKeyMetadata[] = [];
                stream.on('data', (response: protos.google.storage.v2.HmacKeyMetadata) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listHmacKeys.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listHmacKeys, request));
            assert(
                (client.descriptors.page.listHmacKeys.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listHmacKeys without error', async () => {
            const client = new storageModule.v2.StorageClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListHmacKeysRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedResponse = [
              generateSampleMessage(new protos.google.storage.v2.HmacKeyMetadata()),
              generateSampleMessage(new protos.google.storage.v2.HmacKeyMetadata()),
              generateSampleMessage(new protos.google.storage.v2.HmacKeyMetadata()),
            ];
            client.descriptors.page.listHmacKeys.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.storage.v2.IHmacKeyMetadata[] = [];
            const iterable = client.listHmacKeysAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listHmacKeys.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listHmacKeys.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listHmacKeys with error', async () => {
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.storage.v2.ListHmacKeysRequest()
            );
            // path template is empty
            request.project = 'value';
            const expectedHeaderRequestParams = 'project=value';
            const expectedError = new Error('expected');
            client.descriptors.page.listHmacKeys.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listHmacKeysAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.storage.v2.IHmacKeyMetadata[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listHmacKeys.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listHmacKeys.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('Path templates', () => {

        describe('bucket', () => {
            const fakePath = "/rendered/path/bucket";
            const expectedParameters = {
                project: "projectValue",
                bucket: "bucketValue",
            };
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.bucketPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.bucketPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('bucketPath', () => {
                const result = client.bucketPath("projectValue", "bucketValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.bucketPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromBucketName', () => {
                const result = client.matchProjectFromBucketName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.bucketPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBucketFromBucketName', () => {
                const result = client.matchBucketFromBucketName(fakePath);
                assert.strictEqual(result, "bucketValue");
                assert((client.pathTemplates.bucketPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('cryptoKey', () => {
            const fakePath = "/rendered/path/cryptoKey";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                key_ring: "keyRingValue",
                crypto_key: "cryptoKeyValue",
            };
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.cryptoKeyPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.cryptoKeyPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('cryptoKeyPath', () => {
                const result = client.cryptoKeyPath("projectValue", "locationValue", "keyRingValue", "cryptoKeyValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.cryptoKeyPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromCryptoKeyName', () => {
                const result = client.matchProjectFromCryptoKeyName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCryptoKeyName', () => {
                const result = client.matchLocationFromCryptoKeyName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchKeyRingFromCryptoKeyName', () => {
                const result = client.matchKeyRingFromCryptoKeyName(fakePath);
                assert.strictEqual(result, "keyRingValue");
                assert((client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCryptoKeyFromCryptoKeyName', () => {
                const result = client.matchCryptoKeyFromCryptoKeyName(fakePath);
                assert.strictEqual(result, "cryptoKeyValue");
                assert((client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('notificationConfig', () => {
            const fakePath = "/rendered/path/notificationConfig";
            const expectedParameters = {
                project: "projectValue",
                bucket: "bucketValue",
                notification_config: "notificationConfigValue",
            };
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.notificationConfigPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.notificationConfigPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('notificationConfigPath', () => {
                const result = client.notificationConfigPath("projectValue", "bucketValue", "notificationConfigValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.notificationConfigPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromNotificationConfigName', () => {
                const result = client.matchProjectFromNotificationConfigName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.notificationConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBucketFromNotificationConfigName', () => {
                const result = client.matchBucketFromNotificationConfigName(fakePath);
                assert.strictEqual(result, "bucketValue");
                assert((client.pathTemplates.notificationConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchNotificationConfigFromNotificationConfigName', () => {
                const result = client.matchNotificationConfigFromNotificationConfigName(fakePath);
                assert.strictEqual(result, "notificationConfigValue");
                assert((client.pathTemplates.notificationConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('project', () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new storageModule.v2.StorageClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
