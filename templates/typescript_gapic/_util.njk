{#-

Copyright 2019 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-#}

{%- macro printComments(method, service) -%}
  {{- printCommentsForMethod(method) }}
  {{- printRequest(method) -}}
  {{- printCommentsForParams(method) -}}
  {{- printOptions() -}}
  {{- printReturn(method, service) }}
{%- endmacro %}

{%- macro printCommentsPageStream(method) -%}
  {{- printPageStreamHeader(method) -}}
  {{- printRequest(method) -}}
  {{- printCommentsForParams(method) -}}
  {{- printOptions() -}}
  {{- printReturnPageStream(method) }}
{%- endmacro -%}

{%- macro printCommentsForService(service) -%}
{%- set lines = service.comments -%}
{% for line in lines %}
 * {{ line | safe}}
{%- endfor %}
{%- endmacro -%}

{%- macro printCommentsForMethod(method) -%}
{%- set lines = method.comments -%}
{% for line in lines %}
 *{{ line | safe}}
{%- endfor %}
{%- endmacro -%}

{%- macro printPageStreamHeader(method) %}
 * Equivalent to {@link {{ method.name.toCamelCase() }}}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link {{ method.name.toCamelCase() }}} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
{%- endmacro -%}

{%- macro printRequest(method) %}
{%- if not method.clientStreaming %}
 * @param {Object} request
 *   The request object that will be sent.
{%- endif %}
{%- endmacro -%}

{%- macro printCommentsForParams(method) -%}
{% if not method.clientStreaming %}
{%- set commentsMap = method.paramComment -%}
{%- for oneComment in commentsMap -%}
{%- set type = oneComment.paramType -%}
{%- if type.startsWith('.') %}
 * @param { {{- type.substring(1) -}} } request.{{ oneComment.paramName }}
{%- else %}
 * @param { {{- convertParamType(oneComment.paramType) -}} } request.{{ oneComment.paramName }}
{%- endif -%}
{%- set lines = oneComment.comments -%}
{%- for line in lines %} 
 *  {{ line.replaceAll('*/', '* /') | safe}} 
{%- endfor -%}
{%- endfor -%}
{%- endif %}
{%- endmacro -%}

{%- macro printOptions(type) %}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
{%- endmacro -%}

{%- macro printReturn(method, service) -%}
{%- if method.longRunning %}
{{- printReturnSimpleMethod(method) }}
{%- elif method.serverStreaming and method.clientStreaming %}
{{- printReturnBidiStreamingMethod(method) }}
{%- elif method in service.paging %}
{{- printReturnPagingServerMethod(method) }}
{%- elif method.serverStreaming %}
{{- printReturnPagingServerMethod(method) }}
{%- elif method.clientStreaming %}
{{- printReturnClientStreamingMethod(method) }}
{%- else %}
{{- printReturnSimpleMethod(method) }}
{%- endif -%}
{%- endmacro -%}

{%- macro printReturnSimpleMethod(method) %}
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [{{- toMessageName(method.outputType) -}}]{@link {{ method.outputType.substring(1) }}}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
{%- endmacro -%}

{%- macro printReturnPagingServerMethod(method) %}
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [{{- toMessageName(method.outputType) -}}]{@link {{ method.outputType.substring(1) }}}.
 *   
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [{{- toMessageName(method.outputType) -}}]{@link {{ method.outputType.substring(1) }}} in a single response.
 *   The second element is the next request object if the response
 *   indicates the next page exists, or null. The third element is
 *   an object representing [{{- toMessageName(method.outputType) -}}]{@link {{ method.outputType.substring(1) }}}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
{%- endmacro -%}


{%- macro printReturnClientStreamingMethod(method) %}
 * @returns {Stream} - A writable stream which accepts objects representing 
 * [{{- toMessageName(method.inputType) -}}]{@link {{ method.inputType.substring(1) }}}.
{%- endmacro -%}

{%- macro printReturnBidiStreamingMethod(method) %}
 * @returns {Stream} 
 *   An object stream which is both readable and writable. It accepts objects
 *   representing [{{- toMessageName(method.inputType) -}}]{@link {{ method.inputType.substring(1) }}} for write() method, and
 *   will emit objects representing [{{- toMessageName(method.outputType) -}}]{@link {{ method.outputType.substring(1) }}} on 'data' event asynchronously.
{%- endmacro -%}

{%- macro printReturnPageStream(method) %}
 * @returns {Stream}
 *   An object stream which emits an object representing [{{- toMessageName(method.pagingResponseType) -}}]{@link {{ method.pagingResponseType.substring(1) }}} on 'data' event.
{%- endmacro -%}

{%- macro toMessageName(messageType) -%}
{%- set arr = messageType.split('.') %}
{{- arr[arr.length - 1] -}}
{%- endmacro -%}

{%- macro initRequestWithHeaderParam(method) -%}
            const request: protosTypes{{ toInterface(method.inputInterface) }} = {};
{%- if method.headerRequestParams.length > 1 %}
{%- set chain = "request" -%}
{%- for field in method.headerRequestParams.slice(0, -1) %}
            {{ chain }}.{{ field.toCamelCase() }} = {};
{%- set chain = chain + "." + field.toCamelCase() -%}
{%- endfor %}
            {{ chain }}.{{ method.headerRequestParams.slice(-1)[0] }} = '';
{%- endif %}
{%- endmacro -%}

{%- macro toInterface(type) -%}
{%- set index = type.lastIndexOf('.') -%}
{{ type.substring(0, index + 1) + 'I' + type.substring(index + 1) }}
{%- endmacro -%}

{%- macro convertParamType(paramType) -%}
{%- if paramType.includes('TYPE_BYTES') %}
{%- set type = paramType.replace('TYPE_BYTES', 'Buffer') %}
{%- elif paramType.includes('TYPE_BOOL') %}
{%- set type = paramType.replace('TYPE_BOOL', 'boolean') %}
{%- elif paramType.includes('TYPE_STRING') %}
{%- set type = paramType.replace('TYPE_STRING', 'string') %}
{%- else %}
{%- set type = 'number' %}
{%- endif %}
          {{- type -}}
{%- endmacro -%}
