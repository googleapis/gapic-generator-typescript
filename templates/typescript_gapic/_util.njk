{%- macro initRequestWithHeaderParam(method) -%}
            const request: protosTypes{{ method.inputInterface }} = {};
{%- if method.headerRequestParams.length > 1 %}
{%- set chain = "request" -%}
{%- for field in method.headerRequestParams.slice(0, -1) %}
            {{ chain }}.{{ field.toCamelCase() }} = {};
{%- set chain = chain + "." + field.toCamelCase() -%}
{%- endfor %}
            {{ chain }}.{{ method.headerRequestParams.slice(-1)[0] }} = '';
{%- endif %}
{%- endmacro -%}

{%- macro printCommentsForParams(method) -%}
{%- set commentsMap = method.paramComment -%}
{%- for oneComment in commentsMap -%}
{%- set type = oneComment.paramType -%}
{%- if type.startsWith('.') %}
 * @param { {{- type.substring(1) -}} } request.{{ oneComment.paramName }}
{%- else %}
 * @param { {{- convertParamType(oneComment.paramType) -}} } request.{{ oneComment.paramName }}
{%- endif -%}
{%- set lines = oneComment.comments -%}
{%- for line in lines %} 
 *  {{ line.replaceAll('*/', '* /') | safe}} 
{%- endfor -%}
{%- endfor -%}
{%- endmacro -%}

{%- macro printCommentsForMethod(method) -%}
{%- set lines = method.comments -%}
{% for line in lines %}
 *{{ line | safe}}
{%- endfor %}
{%- endmacro -%}

{%- macro printCommentsForService(service) -%}
{%- set lines = service.comments -%}
{% for line in lines %}
   * {{ line | safe}}
{%- endfor %}
{%- endmacro -%}

{%- macro printRequest() %}
 * @param {Object} request
 *   The request object that will be sent.
{%- endmacro -%}

{%- macro printReturnSimpleMethod(method) %}
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [{{- toMessageName(method.outputType) -}}]{@link {{ method.outputType.substring(1) }}}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
{%- endmacro -%}

{%- macro toMessageName(messageType) -%}
{%- set arr = messageType.split('.') %}
{{- arr[arr.length - 1] -}}
{%- endmacro -%}

{%- macro convertParamType(paramType) -%}
{%- if paramType.includes('TYPE_BYTES') %}
{%- set type = paramType.replace('TYPE_BYTES', 'Buffer') %}
{%- elif paramType.includes('TYPE_BOOL') %}
{%- set type = paramType.replace('TYPE_BOOL', 'boolean') %}
{%- elif paramType.includes('TYPE_STRING') %}
{%- set type = paramType.replace('TYPE_STRING', 'string') %}
{%- else %}
{%- set type = 'number' %}
{%- endif %}
          {{- type -}}
{%- endmacro -%}
