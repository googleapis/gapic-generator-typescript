{% import "../../_license.njk" as license -%}
{{license.license()}}
import * as gax from 'google-gax';
import * as path from 'path';

import * as protosTypes from '../../protos/protos';
import * as gapicConfig from './{{ service.name.toSnakeCase() }}_client_config.json';

const version = require('../../../package.json').version;

export interface ClientOptions extends gax.GrpcClientOptions,
                                       gax.GoogleAuthOptions,
                                       gax.ClientStubOptions {
  libName?: string;
  libVersion?: string;
  clientConfig?: gax.ClientConfig;
  fallback?: boolean;
  apiEndpoint?: string;
}

interface Descriptors {
  page: {[name: string]: gax.PageDescriptor};
  stream: {[name: string]: gax.StreamDescriptor};
  longrunning: {[name: string]: gax.LongrunningDescriptor};
}

export interface Callback<
    ResponseObject, NextRequestObject, RawResponseObject> {
  (err: Error|null|undefined, value?: ResponseObject|null,
   nextRequest?: NextRequestObject, rawResponse?: RawResponseObject): void;
}
{% if (service.longRunning.length > 0) %}
export interface Operation<ResultType, MetadataType> extends gax.Operation {
    promise(): Promise<[ResultType, MetadataType, protosTypes.google.longrunning.IOperation]>;
}
{%- endif %}

{% if (service.paging.length > 0) %}
export interface PaginationCallback<
    RequestObject, ResponseObject, ResponseType> {
  (err: Error|null, values?: ResponseType[], nextPageRequest?: RequestObject,
   rawResponse?: ResponseObject): void;
}

export interface PaginationResponse<
    RequestObject, ResponseObject, ResponseType> {
  values?: ResponseType[];
  nextPageRequest?: RequestObject;
  rawResponse?: ResponseObject;
}
{% endif %}
export class {{ service.name }}Client {
  /*
  {{ service.comments }}
  */
  private _descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}};
  private _innerApiCalls: {[name: string]: Function};
  {%- if (service.pathTemplate.length > 0) %}
  private _pathTemplates: {[name: string]: gax.PathTemplate};
  {%- endif %}
  auth: gax.GoogleAuth;

  /**
   * Construct an instance of {{ service.name }}Client.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@@link
   * https://developers.google.com/identity/protocols/application-default-credentials
   * Application Default Credentials}, your project ID will be detected
   * automatically.
   * @param {function} [options.promise] - Custom promise module to use instead
   *     of native Promises.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof {{ service.name }}Client;
    const servicePath = opts && opts.servicePath ?
        opts.servicePath :
        ((opts && opts.apiEndpoint) ? opts.apiEndpoint :
                                      staticMembers.servicePath);
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = (typeof window !== 'undefined');
    if (isBrowser){
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    const gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof {{ service.name }}Client).scopes;
    const gaxGrpc = new gaxModule.GrpcClient(opts);

    // Save the auth object to the client, for use by other methods.
    this.auth = (gaxGrpc.auth as gax.GoogleAuth);

    // Determine the client header string.
    const clientHeader = [
      `gl-node/${process.version}`,
      `grpc/${gaxGrpc.grpcVersion}`,
      `gax/${gaxModule.version}`,
      `gapic/${version}`,
      `gl-web/${gaxModule.version}`
    ];
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
    const protos = gaxGrpc.loadProto(
      opts.fallback ?
        require("../../protos/protos.json") :
        nodejsProtoPath
    );
{%- if (service.pathTemplate.length > 0) %}
    this._pathTemplates = {
{%- for template in service.pathTemplate %}
      {{ template.type.toCamelCase() }}PathTemplate: new gaxModule.PathTemplate(
        '{{ template.pattern }}'
      ),
{%- endfor %}
    };
{%- endif %}

{%- if (service.paging.length > 0) %}

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this._descriptors.page = {
{%- set pagingJoiner = joiner() %}
{%- for method in service.paging %}
      {{- pagingJoiner() }}
      {{ method.name.toCamelCase() }}:
          new gaxModule.PageDescriptor('pageToken', 'nextPageToken', '{{ method.pagingFieldName }}')
{%- endfor %}
    };
{%- endif %}

{%- if (service.streaming.length > 0) %}

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this._descriptors.stream = {
{%- set streamingJoiner = joiner() %}
{%- for method in service.streaming %}
      {{- streamingJoiner() }}
      {{ method.name.toCamelCase() }}: new gaxModule.StreamDescriptor(gax.StreamType.{{ method.streaming }})
{%- endfor %}
    };
{%- endif %}
    
{%- if (service.longRunning.length > 0) %}
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const protoFilesRoot = opts.fallback?
      gaxModule.protobuf.Root.fromJSON(require("../../protos/protos.json")) :
      gaxModule.protobuf.loadSync(nodejsProtoPath);

    const operationsClient = gaxModule.lro({
      auth: this.auth,
      grpc: 'grpc' in gaxGrpc ? gaxGrpc.grpc : undefined
    }).operationsClient(opts);

{%- for method in service.longRunning %}
    const {{ method.name.toCamelCase() }}Response = protoFilesRoot.lookup(
      '{{ method.longRunning.responseType }}') as gax.protobuf.Type;
    const {{ method.name.toCamelCase() }}Metadata = protoFilesRoot.lookup(
      '{{ method.longRunning.metadataType }}') as gax.protobuf.Type;
{%- endfor %}

    this._descriptors.longrunning = {
{%- set longRunningJoiner = joiner() %}
{%- for method in service.longRunning %}
      {{- longRunningJoiner() }}
      {{ method.name.toCamelCase() }}: new gaxModule.LongrunningDescriptor(
        operationsClient,
        {{ method.name.toCamelCase() }}Response.decode.bind({{ method.name.toCamelCase() }}Response),
        {{ method.name.toCamelCase() }}Metadata.decode.bind({{ method.name.toCamelCase() }}Metadata))
{%- endfor %}
    };
{%- endif %}

    // Put together the default options sent with requests.
    const defaults = gaxGrpc.constructSettings(
        '{{ api.naming.protoPackage }}.{{ service.name }}', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};

    // Put together the "service stub" for
    // google.showcase.v1alpha2.Echo.
    const {{ service.name.toCamelCase() }}Stub = gaxGrpc.createStub(
        opts.fallback ?
          // @ts-ignore Do not check types for loaded protos
          protos.lookupService('{{api.naming.protoPackage}}.{{ service.name }}') : 
          // @ts-ignore Do not check types for loaded protos
          protos.{{api.naming.protoPackage}}.{{ service.name }},
        opts) as Promise<{[method: string]: Function}>;

    const {{ service.name.toCamelCase() }}StubMethods =
        [
{%- set stubMethodsJoiner = joiner(', ') -%}
{%- for method in service.method -%}
      {{- stubMethodsJoiner() -}}
      '{{ method.name.toCamelCase() }}'
{%- endfor -%}
    ];

    for (const methodName of {{ service.name.toCamelCase() }}StubMethods) {
      const innerCallPromise = {{ service.name.toCamelCase() }}Stub.then(
        (stub: {[method: string]: Function}) => (...args: Array<{}>) => {
          return stub[methodName].apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      this._innerApiCalls[methodName] = gax.createApiCall(
        innerCallPromise,
        defaults[methodName],
        this._descriptors.page[methodName] ||
            this._descriptors.stream[methodName] || 
            this._descriptors.longrunning[methodName]
      );
    }
  }
  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return '{{ api.hostName }}';
  }
  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return '{{ api.hostName }}';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return {{ api.port }};
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
{%- if (service.oauthScopes.length == 0) %}
    return [];
{%- else %}
    return [
{%- set scopesJoiner = joiner() %}
{%- for scope in service.oauthScopes %}
      {{- scopesJoiner() }}
      '{{ scope }}'
{%- endfor %}
    ];
{%- endif %}
  }

  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------

{%- for method in service.simpleMethods %}
  /*
  {{ method.comments }} 
  */
  {{ method.name.toCamelCase() }}(
      request: protosTypes{{ method.inputInterface }},
      options?: gax.CallOptions):
      Promise<[
        protosTypes{{ method.outputInterface }},
        protosTypes{{ method.inputInterface }}|undefined, {}|undefined
      ]>;
  {{ method.name.toCamelCase() }}(
      request: protosTypes{{ method.inputInterface }},
      options: gax.CallOptions,
      callback: Callback<
          protosTypes{{ method.outputInterface }},
          protosTypes{{ method.inputInterface }}|undefined,
          {}|undefined>): void;
  {{ method.name.toCamelCase() }}(
      request: protosTypes{{ method.inputInterface }},
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes{{ method.outputInterface }},
          protosTypes{{ method.inputInterface }}|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes{{ method.outputInterface }},
          protosTypes{{ method.inputInterface }}|undefined,
          {}|undefined>):
      Promise<[
        protosTypes{{ method.outputInterface }},
        protosTypes{{ method.inputInterface }}|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.{{ method.name.toCamelCase() }}(request, options, callback);
  } 
{%- endfor %}
{% for method in service.streaming %}
  /*
  {{ method.comments }} 
  */
{%- if method.serverStreaming and method.clientStreaming %}
  {{ method.name.toCamelCase() }}(
      options?: gax.CallOptions):
    gax.CancellableStream{
    options = options || {};
    return this._innerApiCalls.{{ method.name.toCamelCase() }}(options);
  }
{%- elif method.serverStreaming %}
  {{ method.name.toCamelCase() }}(
      request?: protosTypes{{ method.inputInterface }},
      options?: gax.CallOptions):
    gax.CancellableStream{
    request = request || {}; 
    options = options || {};
    return this._innerApiCalls.{{ method.name.toCamelCase() }}(request, options);
  }
{%- elif method.clientStreaming %}
  {{ method.name.toCamelCase() }}(
      options: gax.CallOptions,
      callback: Callback<
        protosTypes{{ method.outputInterface }},
        protosTypes{{ method.inputInterface }}|undefined, {}|undefined>):
    gax.CancellableStream;
  {{ method.name.toCamelCase() }}(
      callback: Callback<
        protosTypes{{ method.outputInterface }},
        protosTypes{{ method.inputInterface }}|undefined, {}|undefined>):
    gax.CancellableStream;
  {{ method.name.toCamelCase() }}(
      optionsOrCallback: gax.CallOptions|Callback<
        protosTypes{{ method.outputInterface }},
        protosTypes{{ method.inputInterface }}|undefined, {}|undefined>,
      callback?: Callback<
        protosTypes{{ method.outputInterface }},
        protosTypes{{ method.inputInterface }}|undefined, {}|undefined>):
    gax.CancellableStream {
    if (optionsOrCallback instanceof Function && callback === undefined) {
        callback = optionsOrCallback;
        optionsOrCallback = {};
    }
    optionsOrCallback = optionsOrCallback || {};
    return this._innerApiCalls.{{ method.name.toCamelCase() }}(null, optionsOrCallback, callback);
  }
{%- endif %}
{% endfor %}
{%- for method in service.longRunning %}
  /*
  {{ method.comments }} 
  */
  {{ method.name.toCamelCase() }}(
      request: protosTypes{{ method.inputInterface }},
      options?: gax.CallOptions):
      Promise<[
        Operation<protosTypes{{ method.longRunningResponseType }}, protosTypes{{ method.longRunningMetadataType }}>,
        protosTypes{{ method.outputInterface }}|undefined, {}|undefined
      ]>;
  {{ method.name.toCamelCase() }}(
      request: protosTypes{{ method.inputInterface }},
      options: gax.CallOptions,
      callback: Callback<
          Operation<protosTypes{{ method.longRunningResponseType }}, protosTypes{{ method.longRunningMetadataType }}>,
          protosTypes{{ method.outputInterface }}|undefined,
          {}|undefined>): void;
  {{ method.name.toCamelCase() }}(
      request: protosTypes{{ method.inputInterface }},
      optionsOrCallback?: gax.CallOptions|Callback<
          Operation<protosTypes{{ method.longRunningResponseType }}, protosTypes{{ method.longRunningMetadataType }}>,
          protosTypes{{ method.outputInterface }}|undefined, {}|undefined>,
      callback?: Callback<
          Operation<protosTypes{{ method.longRunningResponseType }}, protosTypes{{ method.longRunningMetadataType }}>,
          protosTypes{{ method.outputInterface }}|undefined,
          {}|undefined>):
      Promise<[
        Operation<protosTypes{{ method.longRunningResponseType }}, protosTypes{{ method.longRunningMetadataType }}>,
        protosTypes{{ method.outputInterface }}|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.{{ method.name.toCamelCase() }}(request, options, callback);
  } 
{%- endfor %}
{%- for method in service.paging %}
  /*
  {{ method.comments }} 
  */
  {{ method.name.toCamelCase() }}(
      request: protosTypes{{ method.inputInterface }},
      options?: gax.CallOptions):
      Promise<[
        protosTypes{{ method.pagingResponseType }}[],
        protosTypes{{ method.inputInterface }}|null, 
        protosTypes{{ method.outputInterface }}
      ]>;
  {{ method.name.toCamelCase() }}(
      request: protosTypes{{ method.inputInterface }},
      options: gax.CallOptions,
      callback: Callback<
          protosTypes{{ method.pagingResponseType }}[],
          protosTypes{{ method.inputInterface }}|null,
          protosTypes{{ method.outputInterface }}>): void;
  {{ method.name.toCamelCase() }}(
      request: protosTypes{{ method.inputInterface }},
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes{{ method.pagingResponseType }}[],
          protosTypes{{ method.inputInterface }}|null, 
          protosTypes{{ method.outputInterface }}>,
      callback?: Callback<
          protosTypes{{ method.pagingResponseType }}[],
          protosTypes{{ method.inputInterface }}|null,
          protosTypes{{ method.outputInterface }}>):
      Promise<[
        protosTypes{{ method.pagingResponseType }}[],
        protosTypes{{ method.inputInterface }}|null, 
        protosTypes{{ method.outputInterface }}
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.{{ method.name.toCamelCase() }}(request, options, callback);
  } 
{%- endfor %}
{%- if (service.pathTemplate.length > 0) %}
  // --------------------
  // -- Path templates --
  // --------------------
{%- for template in service.pathTemplate %}
  {{ template.type.toLowerCase() }}Path(
{%- set paramJoiner = joiner() %}
{%- for param in template.params %}
{{-paramJoiner()-}}{{ param }}:string
{%- endfor -%}
  ){
    return this._pathTemplates.{{ template.type.toLowerCase() }}PathTemplate.render({
{%- for param in template.params %}
      {{ param }}: {{ param }},
{%- endfor %}
    });
  }
{%- for param in template.params %}
  match{{ param.capitalize() }}From{{ template.type }}Name({{ template.type.toLowerCase() }}Name: string){
    return this._pathTemplates.{{ template.type.toLowerCase() }}PathTemplate.match({{ template.type.toLowerCase() }}Name).{{ param }};
  }
{%- endfor %}  
{%- endfor %}
{%- endif %}
}
