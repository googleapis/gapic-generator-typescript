{% import "../src/$version/license.njk" as license %}{{license.license()}}
'use strict';

const assert = require('assert');
const {{ service.name }}Module = require('../src');
{% if (service.streaming.length > 0) %}
const {PassThrough} = require('stream');
{% endif %}

const FAKE_STATUS_CODE = 1;
const error = new Error();
error.code = FAKE_STATUS_CODE;

function mockSimpleGrpcMethod(expectedRequest, response, error) {
    return function(actualRequest, options, callback) {
        assert.deepStrictEqual(actualRequest, expectedRequest);
        if (error) {
            callback(error);
        } else if (response) {
            callback(null, response);
        } else {
            callback(null);
        } 
    };
}
{%- if (service.serverStreaming.length > 0) %}
function mockServerStreamingGrpcMethod(expectedRequest, response, error) {
    return actualRequest => {
        assert.deepStrictEqual(actualRequest, expectedRequest);
        const mockStream = new PassThrough({
          objectMode: true,
          transform: (chunk, enc, callback) => {
            if (error) {
              callback(error);
            }
            else {
              callback(null, response);
            }
          }
        });
        return mockStream;
    };
}
{%- endif %}
{%- if (service.bidiStreaming.length > 0) %}
function mockBidiStreamingGrpcMethod(expectedRequest, response, error) {
    return () => {
        const mockStream = new PassThrough({
          objectMode: true,
          transform: (chunk, enc, callback) => {
            assert.deepStrictEqual(chunk, expectedRequest);
            if (error) {
              callback(error);
            }
            else {
              callback(null, response);
            }
          }
        });
        return mockStream;
    }
}
{%- endif %}
{%- if (service.longRunning.length > 0) %}
function mockLongRunningGrpcMethod(expectedRequest, response, error) {
    return request => {
        assert.deepStrictEqual(request, expectedRequest);
        const mockOperation = {
          promise: function() {
            return new Promise((resolve, reject) => {
              if (error) {
                reject(error);
              }
              else {
                resolve([response]);
              }
            });
          }
        };
        return Promise.resolve([mockOperation]);
    };
}
{%- endif %}
describe('{{ service.name }}Client', () => {
    it('has servicePath', () => {
        const servicePath = {{ service.name }}Module.{{ api.naming.version }}.{{ service.name }}Client.servicePath;
        assert(servicePath);
    });
    it('has apiEndpoint', () => {
        const apiEndpoint = {{ service.name }}Module.{{ api.naming.version }}.{{ service.name }}Client.apiEndpoint;
        assert(apiEndpoint);
    });
    it('has port', () => {
        const port = {{ service.name }}Module.{{ api.naming.version }}.{{ service.name }}Client.port;
        assert(port);
        assert(typeof port === 'number');
    });
    it('should create a client with no option', () => {
        const client = new {{ service.name }}Module.{{ api.naming.version }}.{{ service.name }}Client();
        assert(client);
    });    
    it('should create a client with gRPC option', () => {
        const client = new {{ service.name }}Module.{{ api.naming.version }}.{{ service.name }}Client({
            fallback: true,
        });
        assert(client);
    });
{%- for method in service.simpleMethods %}
    describe('{{ method.name.toCamelCase() }}', () => {
        it('invokes {{ method.name.toCamelCase() }} without error', done => {
            const client = new {{ service.name }}Module.{{ api.naming.version }}.{{ service.name }}Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.{{ method.name.toCamelCase() }} = mockSimpleGrpcMethod(
                request,
                expectedResponse
            );
            client.{{ method.name.toCamelCase() }}(request, (err, response) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes {{ method.name.toCamelCase() }} with error', done => {
            const client = new {{ service.name }}Module.{{ api.naming.version }}.{{ service.name }}Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.{{ method.name.toCamelCase() }} = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.{{ method.name.toCamelCase() }}(request, (err, response) => {
                assert(err instanceof Error);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
{%- endfor %}
{%- for method in service.longRunning %}
    describe('{{ method.name.toCamelCase() }}', () => {
        it('invokes {{ method.name.toCamelCase() }} without error', done => {
            const client = new {{ service.name }}Module.{{ api.naming.version }}.{{ service.name }}Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.{{ method.name.toCamelCase() }} = mockLongRunningGrpcMethod(
                request,
                expectedResponse
            );
            client.{{ method.name.toCamelCase() }}(request).then(responses => {
                const operation = responses[0];
                return operation.promise();
            }).then(responses => {
                assert.deepStrictEqual(responses[0], expectedResponse);
                done();
            }).catch(err => {
                done(err);
            });
        });

        it('invokes {{ method.name.toCamelCase() }} with error', done => {
            const client = new {{ service.name }}Module.{{ api.naming.version }}.{{ service.name }}Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.{{ method.name.toCamelCase() }} = mockLongRunningGrpcMethod(
                request,
                null,
                error
            );
            client.{{ method.name.toCamelCase() }}(request).then(responses => {
                const operation = responses[0];
                return operation.promise();
            }).then(() => {
                assert.fail();
            }).catch(err => {
                assert(err instanceof Error);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                done();
            });
        });
    });
{%- endfor %}
{%- for method in service.serverStreaming %}
    describe('{{ method.name.toCamelCase() }}', () => {
        it('invokes {{ method.name.toCamelCase() }} without error', done => {
            const client = new {{ service.name }}Module.{{ api.naming.version }}.{{ service.name }}Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.{{ method.name.toCamelCase() }} = mockServerStreamingGrpcMethod(request, expectedResponse);
            const stream = client.{{ method.name.toCamelCase() }}(request);
            stream.on('data', response =>{
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
            stream.on('error', err => {
                done(err);
            });
            stream.write();
        });
        it('invokes {{ method.name.toCamelCase() }} with error', done => {            
            const client = new {{ service.name }}Module.{{ api.naming.version }}.{{ service.name }}Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.{{ method.name.toCamelCase() }} = mockServerStreamingGrpcMethod(request, null, error);
            const stream = client.{{ method.name.toCamelCase() }}(request);
            stream.on('data', () =>{
                assert.fail();
            });
            stream.on('error', err => {
                assert(err instanceof Error);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                done();
            });
            stream.write();  
        });
    });
{%- endfor %}
{%- for method in service.bidiStreaming %}
    describe('{{ method.name.toCamelCase() }}', () => {
        it('invokes {{ method.name.toCamelCase() }} without error', done => {
            const client = new {{ service.name }}Module.{{ api.naming.version }}.{{ service.name }}Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.{{ method.name.toCamelCase() }} = mockBidiStreamingGrpcMethod(request, expectedResponse);
            const stream = client.{{ method.name.toCamelCase() }}().on('data', response =>{
                assert.deepStrictEqual(response, expectedResponse);
                done();
            }).on('error', err => {
                done(err);
            });
            stream.write(request);
        });
        it('invokes {{ method.name.toCamelCase() }} with error', done => {            
            const client = new {{ service.name }}Module.{{ api.naming.version }}.{{ service.name }}Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus', 
            });
            // Mock request
            const request = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.{{ method.name.toCamelCase() }} = mockBidiStreamingGrpcMethod(request, null, error);
            const stream = client.{{ method.name.toCamelCase() }}().on('data', () =>{
                assert.fail();
            }).on('error', err => {
                assert(err instanceof Error);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);               
                done();
            });
            stream.write(request);
        });
{%- endfor %}
    });
});
