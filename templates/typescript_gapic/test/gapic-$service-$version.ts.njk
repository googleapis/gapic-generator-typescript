{#-

Copyright 2019 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-#}
{% import "../_license.njk" as license -%}
{% import "../_util.njk" as util -%}
{{license.license(commonParameters.copyrightYear)}}
import * as protosTypes from '../protos/protos';
import * as assert from 'assert';
import { describe, it } from 'mocha';
/* eslint-disable @typescript-eslint/no-var-requires */
const {{ service.name.toLowerCase() }}Module = require('../src');
{% if (service.streaming.length > 0) %}
import {PassThrough} from 'stream';
{% endif %}

const FAKE_STATUS_CODE = 1;
class FakeError{
    name: string;
    message: string;
    code: number;
    constructor(n: number){
        this.name = 'fakeName';
        this.message = 'fake message';
        this.code = n;
    }
}
const error = new FakeError(FAKE_STATUS_CODE);
export interface Callback {
  (err: FakeError|null, response?: {} | null): void;
}

export class Operation{
    constructor(){};
    promise() {};
}

{%- if (service.simpleMethods.length > 0) %}
function mockSimpleGrpcMethod(expectedRequest: {}, response: {} | null, error: FakeError | null) {
    return (actualRequest: {}, options: {}, callback: Callback) => {
        assert.deepStrictEqual(actualRequest, expectedRequest);
        if (error) {
            callback(error);
        } else if (response) {
            callback(null, response);
        } else {
            callback(null);
        }
    };
}
{%- endif %}
{%- if (service.serverStreaming.length > 0) %}
function mockServerStreamingGrpcMethod(expectedRequest: {}, response: {} | null, error: FakeError | null) {
    return (actualRequest: {}) => {
        assert.deepStrictEqual(actualRequest, expectedRequest);
        const mockStream = new PassThrough({
          objectMode: true,
          transform: (chunk: {}, enc: {}, callback: Callback) => {
            if (error) {
              callback(error);
            }
            else {
              callback(null, response);
            }
          }
        });
        return mockStream;
    };
}
{%- endif %}
{%- if (service.bidiStreaming.length > 0) %}
function mockBidiStreamingGrpcMethod(expectedRequest: {}, response: {} | null, error: FakeError | null) {
    return () => {
        const mockStream = new PassThrough({
          objectMode: true,
          transform: (chunk: {}, enc: {}, callback: Callback) => {
            assert.deepStrictEqual(chunk, expectedRequest);
            if (error) {
              callback(error);
            }
            else {
              callback(null, response);
            }
          }
        });
        return mockStream;
    }
}
{%- endif %}
{%- if (service.longRunning.length > 0) %}
function mockLongRunningGrpcMethod(expectedRequest: {}, response: {} | null, error?: {} | null) {
    return (request: {}) => {
        assert.deepStrictEqual(request, expectedRequest);
        const mockOperation = {
          promise: function() {
            return new Promise((resolve, reject) => {
              if (error) {
                reject(error);
              }
              else {
                resolve([response]);
              }
            });
          }
        };
        return Promise.resolve([mockOperation]);
    };
}
{%- endif %}
describe('{{ api.naming.version }}.{{ service.name }}Client', () => {
    it('has servicePath', () => {
        const servicePath = {{ service.name.toLowerCase() }}Module.{{ api.naming.version }}.{{ service.name }}Client.servicePath;
        assert(servicePath);
    });
    it('has apiEndpoint', () => {
        const apiEndpoint = {{ service.name.toLowerCase() }}Module.{{ api.naming.version }}.{{ service.name }}Client.apiEndpoint;
        assert(apiEndpoint);
    });
    it('has port', () => {
        const port = {{ service.name.toLowerCase() }}Module.{{ api.naming.version }}.{{ service.name }}Client.port;
        assert(port);
        assert(typeof port === 'number');
    });
    it('should create a client with no option', () => {
        const client = new {{ service.name.toLowerCase() }}Module.{{ api.naming.version }}.{{ service.name }}Client();
        assert(client);
    });
    it('should create a client with gRPC fallback', () => {
        const client = new {{ service.name.toLowerCase() }}Module.{{ api.naming.version }}.{{ service.name }}Client({
            fallback: true,
        });
        assert(client);
    });
    it('has initialize method and supports deferred initialization', async () => {
        const client = new {{ service.name.toLowerCase() }}Module.{{ api.naming.version }}.{{ service.name }}Client({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.{{ service.name.toCamelCase() }}Stub, undefined);
        await client.initialize();
        assert(client.{{ service.name.toCamelCase() }}Stub);
    });
    it('has close method', () => {
        const client = new {{ service.name.toLowerCase() }}Module.{{ api.naming.version }}.{{ service.name }}Client({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });
{%- for method in service.simpleMethods %}
    describe('{{ method.name.toCamelCase() }}', () => {
        it('invokes {{ method.name.toCamelCase() }} without error', done => {
            const client = new {{ service.name.toLowerCase() }}Module.{{ api.naming.version }}.{{ service.name }}Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            {{ util.initRequestWithHeaderParam(method) }}
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.{{ method.name.toCamelCase() }} = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.{{ method.name.toCamelCase() }}(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes {{ method.name.toCamelCase() }} with error', done => {
            const client = new {{ service.name.toLowerCase() }}Module.{{ api.naming.version }}.{{ service.name }}Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            {{ util.initRequestWithHeaderParam(method) }}
            // Mock gRPC layer
            client._innerApiCalls.{{ method.name.toCamelCase() }} = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.{{ method.name.toCamelCase() }}(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
{%- endfor %}
{%- for method in service.longRunning %}
    describe('{{ method.name.toCamelCase() }}', () => {
        it('invokes {{ method.name.toCamelCase() }} without error', done => {
            const client = new {{ service.name.toLowerCase() }}Module.{{ api.naming.version }}.{{ service.name }}Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            {{ util.initRequestWithHeaderParam(method) }}
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.{{ method.name.toCamelCase() }} = mockLongRunningGrpcMethod(
                request,
                expectedResponse
            );
            client.{{ method.name.toCamelCase() }}(request).then((responses: [Operation]) => {
                const operation = responses[0];
                return operation? operation.promise() : {};
            }).then((responses: [Operation]) => {
                assert.deepStrictEqual(responses[0], expectedResponse);
                done();
            }).catch((err: {}) => {
                done(err);
            });
        });

        it('invokes {{ method.name.toCamelCase() }} with error', done => {
            const client = new {{ service.name.toLowerCase() }}Module.{{ api.naming.version }}.{{ service.name }}Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            {{ util.initRequestWithHeaderParam(method) }}
            // Mock gRPC layer
            client._innerApiCalls.{{ method.name.toCamelCase() }} = mockLongRunningGrpcMethod(
                request,
                null,
                error
            );
            client.{{ method.name.toCamelCase() }}(request).then((responses: [Operation]) => {
                const operation = responses[0];
                return operation? operation.promise() : {};
            }).then(() => {
                assert.fail();
            }).catch((err: FakeError) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                done();
            });
        });
    });
{%- endfor %}
{%- for method in service.serverStreaming %}
    describe('{{ method.name.toCamelCase() }}', () => {
        it('invokes {{ method.name.toCamelCase() }} without error', done => {
            const client = new {{ service.name.toLowerCase() }}Module.{{ api.naming.version }}.{{ service.name }}Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            {{ util.initRequestWithHeaderParam(method) }}
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.{{ method.name.toCamelCase() }} = mockServerStreamingGrpcMethod(request, expectedResponse, null);
            const stream = client.{{ method.name.toCamelCase() }}(request);
            stream.on('data', (response: {}) =>{
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
            stream.on('error', (err: FakeError) => {
                done(err);
            });
            stream.write();
        });
        it('invokes {{ method.name.toCamelCase() }} with error', done => {
            const client = new {{ service.name.toLowerCase() }}Module.{{ api.naming.version }}.{{ service.name }}Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            {{ util.initRequestWithHeaderParam(method) }}
            // Mock gRPC layer
            client._innerApiCalls.{{ method.name.toCamelCase() }} = mockServerStreamingGrpcMethod(request, null, error);
            const stream = client.{{ method.name.toCamelCase() }}(request);
            stream.on('data', () =>{
                assert.fail();
            });
            stream.on('error', (err: FakeError) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                done();
            });
            stream.write();
        });
    });
{%- endfor %}
{%- for method in service.bidiStreaming %}
    describe('{{ method.name.toCamelCase() }}', () => {
        it('invokes {{ method.name.toCamelCase() }} without error', done => {
            const client = new {{ service.name.toLowerCase() }}Module.{{ api.naming.version }}.{{ service.name }}Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            {{ util.initRequestWithHeaderParam(method) }}
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.{{ method.name.toCamelCase() }} = mockBidiStreamingGrpcMethod(request, expectedResponse, null);
            const stream = client.{{ method.name.toCamelCase() }}().on('data', (response: {}) =>{
                assert.deepStrictEqual(response, expectedResponse);
                done();
            }).on('error', (err: FakeError) => {
                done(err);
            });
            stream.write(request);
        });
        it('invokes {{ method.name.toCamelCase() }} with error', done => {
            const client = new {{ service.name.toLowerCase() }}Module.{{ api.naming.version }}.{{ service.name }}Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            {{ util.initRequestWithHeaderParam(method) }}
            // Mock gRPC layer
            client._innerApiCalls.{{ method.name.toCamelCase() }} = mockBidiStreamingGrpcMethod(request, null, error);
            const stream = client.{{ method.name.toCamelCase() }}().on('data', () =>{
                assert.fail();
            }).on('error', (err: FakeError) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                done();
            });
            stream.write(request);
        });
    });
{%- endfor %}
{%- for method in service.paging %}
    describe('{{ method.name.toCamelCase() }}', () => {
        it('invokes {{ method.name.toCamelCase() }} without error', done => {
            const client = new {{ service.name.toLowerCase() }}Module.{{ api.naming.version }}.{{ service.name }}Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            {{ util.initRequestWithHeaderParam(method) }}
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.{{ method.name.toCamelCase() }} = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            client.{{ method.name.toCamelCase() }}(request, (err: FakeError, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
    });
    describe('{{ method.name.toCamelCase() }}Stream', () => {
        it('invokes {{ method.name.toCamelCase() }}Stream without error', done => {
            const client = new {{ service.name.toLowerCase() }}Module.{{ api.naming.version }}.{{ service.name }}Client({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Initialize client before mocking
            client.initialize();
            // Mock request
            {{ util.initRequestWithHeaderParam(method) }}
            // Mock response
            const expectedResponse = {response: 'data'};
            // Mock Grpc layer
            client._innerApiCalls.{{ method.name.toCamelCase() }} = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            const stream = client.{{ method.name.toCamelCase() }}Stream(request, {}).on('data', (response: {}) =>{
                assert.deepStrictEqual(response, expectedResponse);
                done();
            }).on('error', (err: FakeError) => {
                done(err);
            });
            stream.write(expectedResponse);
        });
    });
{%- endfor %}
});
