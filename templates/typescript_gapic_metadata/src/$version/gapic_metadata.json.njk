{#-

Copyright 2019 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-#}

{#-
  This template generates the metadata JSON that describes the generated
  client library. To enable metadata generation, pass --metadata to the
  generator (or, if using Bazel, set "metadata" plugin parameter to "true").

  This JSON is supposed to match the given proto schema.
  The generator design won't let us produce the proper proto JSON because
  the generator itself has no idea about method naming (and, in general,
  has no idea about TypeScript): all the naming logic is in the templates.
  Hence, the metadata JSON is also a template that uses the same naming
  logic. We'll do our best to make it compatible with the proper schema.
-#}

{% import "../../_namer.njk" as namer -%}
{{- namer.initialize(id, api) -}}

{
  "schema": "1.0",
  "comment": "This file maps proto services/RPCs to the corresponding library clients/methods",
  "language": "typescript",
  "protoPackage": "{{ api.naming.protoPackage }}",
  "libraryPackage": "{{ api.publishName }}",
  "services": {
{%- set serviceJoiner = joiner(',') -%}
{%- for service in api.services -%}
    {{- serviceJoiner() -}}
    "{{ service.name }}": {
{#- TODO(@alexander-fenster): replace hardcoded transports ("grpc", etc.) with an iteration. -#}
      "clients": {
        "grpc": {
          "libraryClient": "{{ service.name }}Client",
          "rpcs": {
  {%- set grpcMethodJoiner = joiner(',') -%}
  {%- for method in service.simpleMethods -%}
            {{- grpcMethodJoiner() -}}
            "{{ method.name }}": {
              "methods": ["{{ method.name.toCamelCase() }}"]
            }
  {%- endfor -%}
  {%- for method in service.streaming -%}
            {{- grpcMethodJoiner() -}}
            "{{ method.name }}": {
              "methods": ["{{ method.name.toCamelCase() }}"]
            }
  {%- endfor -%}
  {%- for method in service.longRunning -%}
            {{- grpcMethodJoiner() -}}
            "{{ method.name }}": {
              "methods": ["{{ method.name.toCamelCase() }}"]
            }
  {%- endfor -%}
  {%- for method in service.paging %}
            {{- grpcMethodJoiner() -}}
            "{{ method.name }}": {
              "methods": [
                            "{{ method.name.toCamelCase() }}",
                            "{{ id.get(method.name.toCamelCase() + "Stream", service.name) }}",
                            "{{ id.get(method.name.toCamelCase() + "Async", service.name) }}"
              ]
            }
  {%- endfor -%}
          }
        },
        "grpc-fallback": {
          "libraryClient": "{{ service.name }}Client",
          "rpcs": {
  {%- set fallbackMethodJoiner = joiner(',') -%}
  {%- for method in service.simpleMethods -%}
            {{- fallbackMethodJoiner() -}}
            "{{ method.name }}": {
              "methods": ["{{ method.name.toCamelCase() }}"]
            }
  {%- endfor -%}
  {%- for method in service.longRunning -%}
            {{- fallbackMethodJoiner() -}}
            "{{ method.name }}": {
              "methods": ["{{ method.name.toCamelCase() }}"]
            }
  {%- endfor -%}
  {%- for method in service.paging %}
            {{- fallbackMethodJoiner() -}}
            "{{ method.name }}": {
              "methods": [
                            "{{ method.name.toCamelCase() }}",
                            "{{ id.get(method.name.toCamelCase() + "Stream", service.name) }}",
                            "{{ id.get(method.name.toCamelCase() + "Async", service.name) }}"
              ]
            }
  {%- endfor -%}
          }
        }
      }
    }
{%- endfor -%}
  }
}
