{% import "../_util.njk"  as util -%}
{%- if method.longRunning %}
* @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.{{ method.name.toCamelCase() }}(request);
 * const [response] = await operation.promise();
{%- elif method.serverStreaming and method.clientStreaming %}
SERVER STREAMING AND CLIENT STREAMING
{%- elif method in service.paging %}
SERVICE PAGING
{%- elif method.serverStreaming %}
SERVER STREAMING
{%- elif method.clientStreaming %}
CLIENT STREAMING
{%- else %}
{%- set commentsMap = method.paramComment -%}
{%- for oneComment in commentsMap -%}
{%- if oneComment.fieldBehavior and oneComment.fieldBehavior !== 1 -%}
param name: {{ oneComment.paramName.toCamelCase() }}
param type: {{ oneComment.paramType }}
param comment: {{ oneComment.paramComment }}
{%- endif -%}
{%- endfor -%}


// TODO: add in comments attached to required fields, and
// sample values based on type
// Write out what the actual samples look like
// service client template --> there's helpers for those values
/**
 * Copyright 2019, Google, Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

function main() {
  // [START {{ api.naming.productName.toCamelCase() }}_{{ method.name.toCamelCase() }}_sample]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
   {# {{- util.printCommentsForService(service) }} #}

  {{- util.printCommentsForParams(method) -}}

  {%- for oneComment in commentsMap -%}
  {%- if oneComment.fieldBehavior and oneComment.fieldBehavior !== 1 -%}
  // const {{ oneComment.paramName.toCamelCase() }} = {%- if oneComment.paramType === 'TYPE_STRING' -%} 'my-string'

  {%- elif oneComment.paramType === 'TYPE_NUMBER' -%} 12345

  {%- else -%} {{  oneComment.paramType }}

  {%- endif -%}
  {%- endif -%}
  {%- endfor -%}

  // Imports the {{ api.naming.productName }} library
  const {{ api.naming.productName.toKebabCase()}} = require('{{ api.publishName }}');

  // Instantiates a client
  const {{ service.name.toCamelCase() }}Client = new {{ api.naming.productName.toKebabCase() }}.{{ service.name.toPascalCase() + 'Client' }}();

  async function {{ method.name.toCamelCase() }}() {
    // Construct request
    const request = {
  {%- for oneComment in commentsMap -%}
  {%- if oneComment.fieldBehavior and oneComment.fieldBehavior !== 1 -%}
  {{ oneComment.paramName.toCamelCase() }},
  {%- endif -%}
  {%- endfor -%}
    }

    // Run request
    const response = await {{ service.name.toCamelCase() }}Client.{{ method.name.toCamelCase() }}(request);
    console.log(`Response: ${response}`);
  }

  {{ method.name.toCamelCase() }}();
  // [END {{ service.name.toCamelCase() }}_{{ method.name.toCamelCase() }}_sample]
}

main(...process.argv.slice(2));
{%- endif -%}