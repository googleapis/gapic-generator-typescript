{% import "./_util.njk"  as util -%}
/**
 * Copyright 2021, Google, Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

function main() {
  // [START {{ api.naming.productName.toSnakeCase() }}_{{ method.name.toSnakeCase() }}_sample]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  {{- util.printCommentsForSample(method) -}}

  {{ "\n\n" }}
  // Imports the {{ api.naming.productName }} library
  const { {{ api.naming.productName.toKebabCase()}}Client } = require('{{ api.publishName }}');

  // Instantiates a client
  const {{ service.name.toCamelCase() }}Client = new {{ api.naming.productName.toKebabCase() }}.{{ service.name.toPascalCase() + 'Client' }}();

  async function {{ method.name.toCamelCase() }}() {
    // Construct request
    const request = { {{ "\n" }}
    {%- set commentsMap = method.paramComment -%}
    {%- for oneComment in commentsMap -%}
    {%- if oneComment.fieldBehavior and oneComment.fieldBehavior !== 1 -%}
         {{  oneComment.paramName.toCamelCase()}},{{ "\n" }}
    {%- endif -%}
    {%- endfor -%}
    {{ "\t" }}}
{%- if method.longRunning %}

    // Run request
    const [operation] = await {{ service.name.toCamelCase() }}Client.{{ method.name.toCamelCase() }}(request);
    const [response] = await operation.promise();
    console.log(`Response: ${response}`);

{%- elif method.serverStreaming and method.clientStreaming %}

    // Run request
    const stream = await {{ service.name.toCamelCase() }}Client.{{ method.name.toCamelCase() }}(request);
    console.log(`Response: ${response}`);

{%- elif method in service.paging %}

    // Run request
    const iterable = await {{ service.name.toCamelCase() }}Client.{{ method.name.toCamelCase() }}(request);
    for await (const response of iterable) {
        console.log(response);
    }

{%- elif method.serverStreaming %}

    // Run request
    const stream = await {{ service.name.toCamelCase() }}Client.{{ method.name.toCamelCase() }}(request);
    console.log(`Response: ${response}`);

{%- elif method.clientStreaming %}

    // Run request
    const stream = await {{ service.name.toCamelCase() }}Client.{{ method.name.toCamelCase() }}(request);
    console.log(`Response: ${response}`);

{%- else %}

    // Run request
    const response = await {{ service.name.toCamelCase() }}Client.{{ method.name.toCamelCase() }}(request);
    console.log(`Response: ${response}`);
{%- endif -%}

  }

  {{ method.name.toCamelCase() }}();
  // [END {{ api.naming.productName.toSnakeCase() }}_{{ method.name.toSnakeCase() }}_sample]
}

main(...process.argv.slice(2));