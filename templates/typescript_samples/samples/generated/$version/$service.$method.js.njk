{% import "./_license.njk" as license -%}
{{license.license(commonParameters.copyrightYear)}}

{% if api.handwrittenLayer %} /**
 * NOTE: This sample is autogenerated, but this library contains handwritten
 * samples that are the recommended way to use this library. Please refer to
 * samples outside of the generated/ folder for these recommendations.
 */ {% endif -%} 

{% import "./_util.njk" as util%}
{% import "./_namer.njk" as namer -%}
{{- namer.initialize(id, service) -}}
'use strict';
{%- set commentsMap = method.paramComment -%}
{% set filteredComments = [] %}
{%- for oneComment in commentsMap -%}
{%- if oneComment.fieldBehavior and oneComment.fieldBehavior !== 1 -%}
{% set filteredComments = (filteredComments.push(oneComment), filteredComments) %}
{%- endif -%}
{% endfor %}

function main({%- for comment in filteredComments -%}
    {%- if loop.first and loop.last -%}
    {{  id.get(comment.paramName.toCamelCase()) }}
    {%- elif loop.first -%}
    {{  id.get(comment.paramName.toCamelCase()) }},
    {%- elif loop.last -%}
    {{ " " }}{{  id.get(comment.paramName.toCamelCase()) }}
    {%- else -%}
    {{ " " }}{{  id.get(comment.paramName.toCamelCase()) }},
    {%- endif -%}
    {% endfor %}) {
  // [START {{ api.hostName.split(".")[0] }}_{{ api.naming.version }}_generated_{{ service.name }}_{{ method.name }}_async]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  {{- util.printCommentsForSample(method) -}}
  {{ "\n" }}
  // Imports the {{ api.naming.productName }} library
  const { {{- service.name.toPascalCase() }}Client} = require('{{ api.publishName }}').{{ api.naming.version }};

  // Instantiates a client
  const {{ (api.naming.productName).toCamelCase() }}Client = new {{ service.name.toPascalCase() }}Client();

  async function {{ id.get('call'+method.name.toPascalCase()) }}() {
    // Construct request
    const request = {
    {%- set commentsMap = method.paramComment -%}
    {%- for oneComment in commentsMap -%}
    {%- if oneComment.fieldBehavior and oneComment.fieldBehavior !== 1 -%}
    {{ "\n  " }}{{  id.get(oneComment.paramName.toCamelCase()) | indent(4, true) }},
    {%- endif -%}
    {% endfor %}
    };
{% if method.longRunning %}
    // Run request
    const [operation] = await {{ (api.naming.productName).toCamelCase() }}Client.{{ method.name.toCamelCase() }}(request);
    const [response] = await operation.promise();
    console.log(response);
  }
{% elif method.serverStreaming and method.clientStreaming %}
    // Run request
    const stream = await {{ (api.naming.productName).toCamelCase() }}Client.{{ method.name.toCamelCase() }}();
    stream.on('data', (response) => { console.log(response) });
    stream.on('error', (err) => { throw(err) });
    stream.on('end', () => { /* API call completed */ });
    stream.write(request);
    stream.end(); 
  }
{% elif method in service.paging %}
    // Run request
    const iterable = await {{ (api.naming.productName).toCamelCase() }}Client.{{ method.name.toCamelCase() }}Async(request);
    {%- if method.pagingMapResponseType %}
    for await (const [key, value] of iterable) {
    {%- else %}
    for await (const response of iterable) {
    {%- endif %}
        console.log(response);
    }
  }
{% elif method.serverStreaming %}
    // Run request
    const stream = await {{ (api.naming.productName).toCamelCase() }}Client.{{ method.name.toCamelCase() }}(request);
    stream.on('data', (response) => { console.log(response) });
    stream.on('error', (err) => { throw(err) });
    stream.on('end', () => { /* API call completed */ });
  }
{% elif method.clientStreaming %}
    // Run request
    const stream = await {{ (api.naming.productName).toCamelCase() }}Client.{{ method.name.toCamelCase() }}((response) => console.log(response));
    stream.write(request);
    stream.end();
  }
{% else %}
    // Run request
    const response = await {{ (api.naming.productName).toCamelCase() }}Client.{{ method.name.toCamelCase() }}(request);
    console.log(response);
  }
{% endif %}
  {{ id.get('call'+method.name.toPascalCase()) }}();
  // [END {{ api.hostName.split(".")[0] }}_{{ api.naming.version }}_generated_{{ service.name }}_{{ method.name }}_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
