{% import "../../../../typescript_gapic/_util.njk"  as util %}
// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

'use strict';

function main() {
  // [START {{ api.naming.productName.toSnakeCase() }}_{{ method.name.toSnakeCase() }}_sample]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  {{- util.printCommentsForSample(method) -}}
  {{ "\n" }}
  // Imports the {{ api.naming.productName }} library
  const { {{- service.name.toPascalCase() }}Client} = require('{{ api.publishName }}');

  // Instantiates a client
  const {{ (api.naming.productName).toCamelCase() }}Client = new {{ service.name.toPascalCase() }}Client();

  async function {{ method.name.toCamelCase() }}() {
    // Construct request
    const request = {
    {%- set commentsMap = method.paramComment -%}
    {%- for oneComment in commentsMap -%}
    {%- if oneComment.fieldBehavior and oneComment.fieldBehavior !== 1 -%}
    {{ "\n  " }}{{  oneComment.paramName.toCamelCase() | indent(4, true) }},
    {%- endif -%}
    {% endfor %}
    };
{% if method.longRunning %}
    // Run request
    const [operation] = await {{ (api.naming.productName).toCamelCase() }}Client.{{ method.name.toCamelCase() }}(request);
    const [response] = await operation.promise();
    console.log(`Response: ${response}`);
  }
{% elif method.serverStreaming and method.clientStreaming %}
    // Run request
    const stream = await {{ (api.naming.productName).toCamelCase() }}Client.{{ method.name.toCamelCase() }}(request);
    console.log(`Response: ${response}`);
  }
{% elif method in service.paging %}
    // Run request
    const iterable = await {{ (api.naming.productName).toCamelCase() }}Client.{{ method.name.toCamelCase() }}(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }
{% elif method.serverStreaming %}
    // Run request
    const stream = await {{ (api.naming.productName).toCamelCase() }}Client.{{ method.name.toCamelCase() }}(request);
    console.log(`Response: ${response}`);
  }
{% elif method.clientStreaming %}
    // Run request
    const stream = await {{ (api.naming.productName).toCamelCase() }}Client.{{ method.name.toCamelCase() }}(request);
    console.log(`Response: ${response}`);
  }
{% else %}
    // Run request
    const response = await {{ (api.naming.productName).toCamelCase() }}Client.{{ method.name.toCamelCase() }}(request);
    console.log(`Response: ${response}`);
  }
{% endif %}
  {{ method.name.toCamelCase() }}();
  // [END {{ api.naming.productName.toSnakeCase() }}_{{ method.name.toSnakeCase() }}_sample]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
