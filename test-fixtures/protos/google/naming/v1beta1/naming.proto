// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/longrunning/operations.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";

package google.naming.v1beta1;

// Fake service to test various possible naming problems.
service Naming {
  // Fake default host since there is no actual server that implements this
  // service.
  option (google.api.default_host) = "localhost:1234";

  // Problem #1: paginated method generates extra methods *Stream() and
  // *Async(), which might conflict with unary methods with the same names.
  rpc PaginatedMethod(PaginatedMethodRequest) returns (PaginatedMethodResponse) {
    option (google.api.http) = {
      post: "/v1beta1/naming:paginatedMethod"
      body: "*"
    };
  }

  rpc PaginatedMethodStream(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1beta1/naming:paginatedMethodStream"
      body: "*"
    };
  }

  rpc PaginatedMethodAsync(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1beta1/naming:paginatedMethodAsync"
      body: "*"
    };
  }

  // Problem #2: long running method generates extra method check*Progress()
  rpc LongRunning(google.protobuf.Empty) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1beta1/naming:longRunning"
      body: "*"
    };
    option (google.longrunning.operation_info) = {
      response_type: "google.protobuf.Empty"
      metadata_type: "google.protobuf.Empty"
    };
  }

  rpc CheckLongRunningProgress(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1beta1/naming:checkLongRunningProgress"
      body: "*"
    };
  }

  // Problem #3: RPCs that conflict with auto-generated methods
  rpc Initialize(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1beta1/naming:initialize"
      body: "*"
    };
  }

  rpc ServicePath(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1beta1/naming:servicePath"
      body: "*"
    };
  }

  rpc ApiEndpoint(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1beta1/naming:apiEndpoint"
      body: "*"
    };
  }

  rpc Port(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1beta1/naming:port"
      body: "*"
    };
  }

  rpc Scopes(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1beta1/naming:scopes"
      body: "*"
    };
  }

  rpc getProjectId(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1beta1/naming:getProjectId"
      body: "*"
    };
  }

  rpc getReservedWord(GetReservedWordRequest) returns (ReservedWord) {
    option (google.api.http) = {
      post: "/v1beta1/naming:getReservedWord"
      body: "*"
    };
  }
}

message PaginatedMethodRequest {
  google.protobuf.Empty content = 1 [(google.api.field_behavior) = REQUIRED];
  int32 page_size = 2;
  string page_token = 3;
}

message PaginatedMethodResponse {
  repeated google.protobuf.Empty content = 1;
  string next_page_token = 2;
}

message GetReservedWordRequest {
  string word = 1;
}

message ReservedWord {
  option (google.api.resource) = {
    type: "naming.googleapis.com/ReservedWord"
    pattern: "projects/{project}/packages/{package}",
    pattern: "projects/{project}/exports/{export}",
  };
  string name = 1;
}
