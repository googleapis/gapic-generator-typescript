// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protosTypes from '../protos/protos';
import * as assert from 'assert';
import { describe, it } from 'mocha';
const dlpserviceModule = require('../src');


const FAKE_STATUS_CODE = 1;
class FakeError{
    name: string;
    message: string;
    code: number;
    constructor(n: number){
        this.name = 'fakeName';
        this.message = 'fake message';
        this.code = n;
    }
}
const error = new FakeError(FAKE_STATUS_CODE);
export interface Callback {
  (err: FakeError|null, response?: {} | null): void;
}

export class Operation{
    constructor(){};
    promise() {};
}
function mockSimpleGrpcMethod(expectedRequest: {}, response: {} | null, error: FakeError | null) {
    return (actualRequest: {}, options: {}, callback: Callback) => {
        assert.deepStrictEqual(actualRequest, expectedRequest);
        if (error) {
            callback(error);
        } else if (response) {
            callback(null, response);
        } else {
            callback(null);
        }
    };
}
describe('v2.DlpServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = dlpserviceModule.v2.DlpServiceClient.servicePath;
        assert(servicePath);
    });
    it('has apiEndpoint', () => {
        const apiEndpoint = dlpserviceModule.v2.DlpServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });
    it('has port', () => {
        const port = dlpserviceModule.v2.DlpServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });
    it('should create a client with no option', () => {
        const client = new dlpserviceModule.v2.DlpServiceClient();
        assert(client);
    });
    it('should create a client with gRPC fallback', () => {
        const client = new dlpserviceModule.v2.DlpServiceClient({
            fallback: true,
        });
        assert(client);
    });
    describe('inspectContent', () => {
        it('invokes inspectContent without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IInspectContentRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.inspectContent = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.inspectContent(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes inspectContent with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IInspectContentRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.inspectContent = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.inspectContent(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('redactImage', () => {
        it('invokes redactImage without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IRedactImageRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.redactImage = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.redactImage(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes redactImage with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IRedactImageRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.redactImage = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.redactImage(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('deidentifyContent', () => {
        it('invokes deidentifyContent without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IDeidentifyContentRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deidentifyContent = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.deidentifyContent(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes deidentifyContent with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IDeidentifyContentRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deidentifyContent = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.deidentifyContent(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('reidentifyContent', () => {
        it('invokes reidentifyContent without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IReidentifyContentRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.reidentifyContent = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.reidentifyContent(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes reidentifyContent with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IReidentifyContentRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.reidentifyContent = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.reidentifyContent(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('listInfoTypes', () => {
        it('invokes listInfoTypes without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IListInfoTypesRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.listInfoTypes = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.listInfoTypes(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes listInfoTypes with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IListInfoTypesRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.listInfoTypes = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.listInfoTypes(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('createInspectTemplate', () => {
        it('invokes createInspectTemplate without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.ICreateInspectTemplateRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createInspectTemplate = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.createInspectTemplate(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes createInspectTemplate with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.ICreateInspectTemplateRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createInspectTemplate = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.createInspectTemplate(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('updateInspectTemplate', () => {
        it('invokes updateInspectTemplate without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IUpdateInspectTemplateRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.updateInspectTemplate = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.updateInspectTemplate(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes updateInspectTemplate with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IUpdateInspectTemplateRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.updateInspectTemplate = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.updateInspectTemplate(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('getInspectTemplate', () => {
        it('invokes getInspectTemplate without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IGetInspectTemplateRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getInspectTemplate = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.getInspectTemplate(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes getInspectTemplate with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IGetInspectTemplateRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getInspectTemplate = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.getInspectTemplate(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('deleteInspectTemplate', () => {
        it('invokes deleteInspectTemplate without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IDeleteInspectTemplateRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deleteInspectTemplate = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.deleteInspectTemplate(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes deleteInspectTemplate with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IDeleteInspectTemplateRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deleteInspectTemplate = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.deleteInspectTemplate(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('createDeidentifyTemplate', () => {
        it('invokes createDeidentifyTemplate without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.ICreateDeidentifyTemplateRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createDeidentifyTemplate = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.createDeidentifyTemplate(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes createDeidentifyTemplate with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.ICreateDeidentifyTemplateRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createDeidentifyTemplate = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.createDeidentifyTemplate(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('updateDeidentifyTemplate', () => {
        it('invokes updateDeidentifyTemplate without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IUpdateDeidentifyTemplateRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.updateDeidentifyTemplate = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.updateDeidentifyTemplate(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes updateDeidentifyTemplate with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IUpdateDeidentifyTemplateRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.updateDeidentifyTemplate = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.updateDeidentifyTemplate(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('getDeidentifyTemplate', () => {
        it('invokes getDeidentifyTemplate without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IGetDeidentifyTemplateRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getDeidentifyTemplate = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.getDeidentifyTemplate(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes getDeidentifyTemplate with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IGetDeidentifyTemplateRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getDeidentifyTemplate = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.getDeidentifyTemplate(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('deleteDeidentifyTemplate', () => {
        it('invokes deleteDeidentifyTemplate without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IDeleteDeidentifyTemplateRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deleteDeidentifyTemplate = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.deleteDeidentifyTemplate(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes deleteDeidentifyTemplate with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IDeleteDeidentifyTemplateRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deleteDeidentifyTemplate = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.deleteDeidentifyTemplate(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('createJobTrigger', () => {
        it('invokes createJobTrigger without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.ICreateJobTriggerRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createJobTrigger = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.createJobTrigger(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes createJobTrigger with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.ICreateJobTriggerRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createJobTrigger = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.createJobTrigger(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('updateJobTrigger', () => {
        it('invokes updateJobTrigger without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IUpdateJobTriggerRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.updateJobTrigger = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.updateJobTrigger(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes updateJobTrigger with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IUpdateJobTriggerRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.updateJobTrigger = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.updateJobTrigger(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('getJobTrigger', () => {
        it('invokes getJobTrigger without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IGetJobTriggerRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getJobTrigger = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.getJobTrigger(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes getJobTrigger with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IGetJobTriggerRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getJobTrigger = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.getJobTrigger(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('deleteJobTrigger', () => {
        it('invokes deleteJobTrigger without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IDeleteJobTriggerRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deleteJobTrigger = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.deleteJobTrigger(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes deleteJobTrigger with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IDeleteJobTriggerRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deleteJobTrigger = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.deleteJobTrigger(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('activateJobTrigger', () => {
        it('invokes activateJobTrigger without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IActivateJobTriggerRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.activateJobTrigger = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.activateJobTrigger(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes activateJobTrigger with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IActivateJobTriggerRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.activateJobTrigger = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.activateJobTrigger(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('createDlpJob', () => {
        it('invokes createDlpJob without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.ICreateDlpJobRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createDlpJob = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.createDlpJob(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes createDlpJob with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.ICreateDlpJobRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createDlpJob = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.createDlpJob(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('getDlpJob', () => {
        it('invokes getDlpJob without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IGetDlpJobRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getDlpJob = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.getDlpJob(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes getDlpJob with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IGetDlpJobRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getDlpJob = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.getDlpJob(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('deleteDlpJob', () => {
        it('invokes deleteDlpJob without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IDeleteDlpJobRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deleteDlpJob = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.deleteDlpJob(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes deleteDlpJob with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IDeleteDlpJobRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deleteDlpJob = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.deleteDlpJob(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('cancelDlpJob', () => {
        it('invokes cancelDlpJob without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.ICancelDlpJobRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.cancelDlpJob = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.cancelDlpJob(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes cancelDlpJob with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.ICancelDlpJobRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.cancelDlpJob = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.cancelDlpJob(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('createStoredInfoType', () => {
        it('invokes createStoredInfoType without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.ICreateStoredInfoTypeRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createStoredInfoType = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.createStoredInfoType(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes createStoredInfoType with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.ICreateStoredInfoTypeRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.createStoredInfoType = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.createStoredInfoType(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('updateStoredInfoType', () => {
        it('invokes updateStoredInfoType without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IUpdateStoredInfoTypeRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.updateStoredInfoType = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.updateStoredInfoType(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes updateStoredInfoType with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IUpdateStoredInfoTypeRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.updateStoredInfoType = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.updateStoredInfoType(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('getStoredInfoType', () => {
        it('invokes getStoredInfoType without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IGetStoredInfoTypeRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getStoredInfoType = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.getStoredInfoType(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes getStoredInfoType with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IGetStoredInfoTypeRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.getStoredInfoType = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.getStoredInfoType(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('deleteStoredInfoType', () => {
        it('invokes deleteStoredInfoType without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IDeleteStoredInfoTypeRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deleteStoredInfoType = mockSimpleGrpcMethod(
                request,
                expectedResponse,
                null
            );
            client.deleteStoredInfoType(request, (err: {}, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            })
        });

        it('invokes deleteStoredInfoType with error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IDeleteStoredInfoTypeRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock gRPC layer
            client._innerApiCalls.deleteStoredInfoType = mockSimpleGrpcMethod(
                request,
                null,
                error
            );
            client.deleteStoredInfoType(request, (err: FakeError, response: {}) => {
                assert(err instanceof FakeError);
                assert.strictEqual(err.code, FAKE_STATUS_CODE);
                assert(typeof response === 'undefined');
                done();
            })
        });
    });
    describe('listInspectTemplates', () => {
        it('invokes listInspectTemplates without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IListInspectTemplatesRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listInspectTemplates = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            client.listInspectTemplates(request, (err: FakeError, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
    });
    describe('listInspectTemplatesStream', () => {
        it('invokes listInspectTemplatesStream without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IListInspectTemplatesRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listInspectTemplates = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            const stream = client.listInspectTemplatesStream(request, {}).on('data', (response: {}) =>{
                assert.deepStrictEqual(response, expectedResponse);
                done();
            }).on('error', (err: FakeError) => {
                done(err);
            });
            stream.write(request);
        });
    });
    describe('listDeidentifyTemplates', () => {
        it('invokes listDeidentifyTemplates without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IListDeidentifyTemplatesRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listDeidentifyTemplates = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            client.listDeidentifyTemplates(request, (err: FakeError, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
    });
    describe('listDeidentifyTemplatesStream', () => {
        it('invokes listDeidentifyTemplatesStream without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IListDeidentifyTemplatesRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listDeidentifyTemplates = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            const stream = client.listDeidentifyTemplatesStream(request, {}).on('data', (response: {}) =>{
                assert.deepStrictEqual(response, expectedResponse);
                done();
            }).on('error', (err: FakeError) => {
                done(err);
            });
            stream.write(request);
        });
    });
    describe('listJobTriggers', () => {
        it('invokes listJobTriggers without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IListJobTriggersRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listJobTriggers = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            client.listJobTriggers(request, (err: FakeError, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
    });
    describe('listJobTriggersStream', () => {
        it('invokes listJobTriggersStream without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IListJobTriggersRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listJobTriggers = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            const stream = client.listJobTriggersStream(request, {}).on('data', (response: {}) =>{
                assert.deepStrictEqual(response, expectedResponse);
                done();
            }).on('error', (err: FakeError) => {
                done(err);
            });
            stream.write(request);
        });
    });
    describe('listDlpJobs', () => {
        it('invokes listDlpJobs without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IListDlpJobsRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listDlpJobs = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            client.listDlpJobs(request, (err: FakeError, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
    });
    describe('listDlpJobsStream', () => {
        it('invokes listDlpJobsStream without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IListDlpJobsRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listDlpJobs = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            const stream = client.listDlpJobsStream(request, {}).on('data', (response: {}) =>{
                assert.deepStrictEqual(response, expectedResponse);
                done();
            }).on('error', (err: FakeError) => {
                done(err);
            });
            stream.write(request);
        });
    });
    describe('listStoredInfoTypes', () => {
        it('invokes listStoredInfoTypes without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IListStoredInfoTypesRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listStoredInfoTypes = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            client.listStoredInfoTypes(request, (err: FakeError, response: {}) => {
                assert.ifError(err);
                assert.deepStrictEqual(response, expectedResponse);
                done();
            });
        });
    });
    describe('listStoredInfoTypesStream', () => {
        it('invokes listStoredInfoTypesStream without error', done => {
            const client = new dlpserviceModule.v2.DlpServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            // Mock request
            const request: protosTypes.google.privacy.dlp.v2.IListStoredInfoTypesRequest = {};
            // Mock response
            const expectedResponse = {};
            // Mock Grpc layer
            client._innerApiCalls.listStoredInfoTypes = (actualRequest: {}, options: {}, callback: Callback) => {
                assert.deepStrictEqual(actualRequest, request);
                callback(null, expectedResponse);
            };
            const stream = client.listStoredInfoTypesStream(request, {}).on('data', (response: {}) =>{
                assert.deepStrictEqual(response, expectedResponse);
                done();
            }).on('error', (err: FakeError) => {
                done(err);
            });
            stream.write(request);
        });
    });
});
