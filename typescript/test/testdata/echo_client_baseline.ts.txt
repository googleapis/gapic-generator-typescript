// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import * as path from 'path';

import * as packageJson from '../../package.json';
import * as protosTypes from '../../protos/protos';
import * as gapicConfig from './echo_client_config.json';

const version = packageJson.version;

export interface ClientOptions extends gax.GrpcClientOptions,
                                       gax.GoogleAuthOptions,
                                       gax.ClientStubOptions {
  libName?: string;
  libVersion?: string;
  clientConfig: gax.ClientConfig;
  fallback?: boolean;
  apiEndpoint?: string;
}

interface Descriptors {
  page: {[name: string]: gax.PageDescriptor};
  stream: {[name: string]: gax.StreamDescriptor};
  longrunning: {[name: string]: gax.LongrunningDescriptor};
}

export interface Callback<
    ResponseObject, NextRequestObject, RawResponseObject> {
  (err: Error|null|undefined, value?: ResponseObject|null,
   nextRequest?: NextRequestObject, rawResponse?: RawResponseObject): void;
}

export interface PaginationCallback<
    RequestObject, ResponseObject, ResponseType> {
  (err: Error|null, values?: ResponseType[], nextPageRequest?: RequestObject,
   rawResponse?: ResponseObject): void;
}

export interface PaginationResponse<
    RequestObject, ResponseObject, ResponseType> {
  values?: ResponseType[];
  nextPageRequest?: RequestObject;
  rawResponse?: ResponseObject;
}

export class EchoClient {
  private _descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}};
  private _innerApiCalls: {[name: string]: Function};
  auth: gax.GoogleAuth;

  constructor(opts: ClientOptions) {
    // Ensure that options include the service address and port.
    opts = opts || {};
    const isBrowser = (typeof window !== 'undefined');
    if (isBrowser){
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    const gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;
    const servicePath =
      opts.servicePath ||
      opts.apiEndpoint ||
      (this.constructor as typeof EchoClient).servicePath;

    opts = Object.assign(
        {
          clientConfig: {},
          port: (this.constructor as typeof EchoClient).port,
          servicePath: servicePath,
        },
        opts);

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof EchoClient).scopes;
    const gaxGrpc = new gaxModule.GrpcClient(opts);

    // Save the auth object to the client, for use by other methods.
    this.auth = (gaxGrpc.auth as gax.GoogleAuth);

    // Determine the client header string.
    const clientHeader = [
      `gl-node/${process.version}`,
      `grpc/${gaxGrpc.grpcVersion}`,
      `gax/${gaxModule.version}`,
      `gapic/${version}`,
      `gl-web/${gaxModule.version}`
    ];
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
    const protos = gaxGrpc.loadProto(
      opts.fallback ?
        require("../../protos/protos.json") :
        nodejsProtoPath
    );

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this._descriptors.page = {
      pagedExpand:
          new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'responses')
    };

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this._descriptors.stream = {
      expand: new gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),
      collect: new gaxModule.StreamDescriptor(gax.StreamType.CLIENT_STREAMING),
      chat: new gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING)
    };
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const protoFilesRoot = opts.fallback?
      gaxModule.protobuf.Root.fromJSON(require("../../protos/protos.json")) :
      gaxModule.protobuf.loadSync(nodejsProtoPath);

    const operationsClient = gaxModule.lro({
      auth: this.auth,
      // @ts-ignore
      grpc: gaxGrpc.grpc,
    }).operationsClient(opts);
    const waitResponse = protoFilesRoot.lookup(
      'WaitResponse');
    const waitMetadata = protoFilesRoot.lookup(
      'WaitMetadata');

    this._descriptors.longrunning = {
      wait: new gaxModule.LongrunningDescriptor(
        operationsClient,
        // @ts-ignore
        waitResponse.decode.bind(waitResponse),
        // @ts-ignore
        waitMetadata.decode.bind(waitMetadata))
    };

    // Put together the default options sent with requests.
    const defaults = gaxGrpc.constructSettings(
        'google.showcase.v1beta1.Echo', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};

    // Put together the "service stub" for
    // google.showcase.v1alpha2.Echo.
    const echoStub = gaxGrpc.createStub(
        // @ts-ignore We cannot check types that are loaded in runtime.
        opts.fallback ?
          // @ts-ignore
          protos.lookupService('google.showcase.v1beta1.Echo') : 
          // @ts-ignore
          protos.google.showcase.v1beta1.Echo,
        opts);

    const echoStubMethods =
        ['echo', 'expand', 'collect', 'chat', 'pagedExpand', 'wait'];

    for (const methodName of echoStubMethods) {
      // @ts-ignore
      const innerCallPromise = echoStub.then(
        // @ts-ignore
        stub => (...args: Array<{}>) => {
          return stub[methodName].apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      this._innerApiCalls[methodName] = gax.createApiCall(
        innerCallPromise,
        defaults[methodName],
        this._descriptors.page[methodName] ||
            this._descriptors.stream[methodName] || 
            this._descriptors.longrunning[methodName]
      );
    }
  }
  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'localhost';
  }
  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'localhost';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 7469;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [];
  }

  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  echo(
      request: protosTypes.google.showcase.v1beta1.IEchoRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.showcase.v1beta1.IEchoResponse,
        protosTypes.google.showcase.v1beta1.IEchoRequest|undefined, {}|undefined
      ]>;
  echo(
      request: protosTypes.google.showcase.v1beta1.IEchoRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.showcase.v1beta1.IEchoResponse,
          protosTypes.google.showcase.v1beta1.IEchoRequest|undefined,
          {}|undefined>): void;
  echo(
      request: protosTypes.google.showcase.v1beta1.IEchoRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.showcase.v1beta1.IEchoResponse,
          protosTypes.google.showcase.v1beta1.IEchoRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.showcase.v1beta1.IEchoResponse,
          protosTypes.google.showcase.v1beta1.IEchoRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.showcase.v1beta1.IEchoResponse,
        protosTypes.google.showcase.v1beta1.IEchoRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.echo(request, options, callback);
  }

  expand(
      request?: protosTypes.google.showcase.v1beta1.IExpandRequest,
      options?: gax.CallOptions):
    gax.ServerStreamingCall{
    request = request || {}; 
    options = options || {};
    return this._innerApiCalls.expand(request, options);
  }

  collect(
      options: gax.CallOptions,
      callback: Callback<
        protosTypes.google.showcase.v1beta1.IEchoResponse,
        protosTypes.google.showcase.v1beta1.IEchoRequest|undefined, {}|undefined>):
    gax.ClientStreamingCall;
  collect(
      callback: Callback<
        protosTypes.google.showcase.v1beta1.IEchoResponse,
        protosTypes.google.showcase.v1beta1.IEchoRequest|undefined, {}|undefined>):
    gax.ClientStreamingCall;
  collect(
      optionsOrCallback: gax.CallOptions|Callback<
        protosTypes.google.showcase.v1beta1.IEchoResponse,
        protosTypes.google.showcase.v1beta1.IEchoRequest|undefined, {}|undefined>,
      callback?: Callback<
        protosTypes.google.showcase.v1beta1.IEchoResponse,
        protosTypes.google.showcase.v1beta1.IEchoRequest|undefined, {}|undefined>):
    gax.ClientStreamingCall {
    if (optionsOrCallback instanceof Function && callback === undefined) {
        callback = optionsOrCallback;
        optionsOrCallback = {};
    }
    optionsOrCallback = optionsOrCallback || {};
    return this._innerApiCalls.collect(null, optionsOrCallback, callback);
  }

  chat(
      options?: gax.CallOptions):
    gax.BiDiStreamingCall{
    options = options || {};
    return this._innerApiCalls.chat(options);
  }

  wait(
      request: protosTypes.google.showcase.v1beta1.IWaitRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.longrunning.IOperation,
        protosTypes.google.showcase.v1beta1.IWaitRequest|undefined, {}|undefined
      ]>;
  wait(
      request: protosTypes.google.showcase.v1beta1.IWaitRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.longrunning.IOperation,
          protosTypes.google.showcase.v1beta1.IWaitRequest|undefined,
          {}|undefined>): void;
  wait(
      request: protosTypes.google.showcase.v1beta1.IWaitRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.longrunning.IOperation,
          protosTypes.google.showcase.v1beta1.IWaitRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.longrunning.IOperation,
          protosTypes.google.showcase.v1beta1.IWaitRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.longrunning.IOperation,
        protosTypes.google.showcase.v1beta1.IWaitRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.wait(request, options, callback);
  }
  pagedExpand(
      request: protosTypes.google.showcase.v1beta1.IPagedExpandRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.showcase.v1beta1.IPagedExpandResponse,
        protosTypes.google.showcase.v1beta1.IPagedExpandRequest|undefined, 
        {}|undefined
      ]>;
  pagedExpand(
      request: protosTypes.google.showcase.v1beta1.IPagedExpandRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.showcase.v1beta1.IPagedExpandResponse,
          protosTypes.google.showcase.v1beta1.IPagedExpandRequest|undefined,
          {}|undefined>): void;
  pagedExpand(
      request: protosTypes.google.showcase.v1beta1.IPagedExpandRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.showcase.v1beta1.IPagedExpandResponse,
          protosTypes.google.showcase.v1beta1.IPagedExpandRequest|undefined, 
          {}|undefined>,
      callback?: Callback<
          protosTypes.google.showcase.v1beta1.IPagedExpandResponse,
          protosTypes.google.showcase.v1beta1.IPagedExpandRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.showcase.v1beta1.IPagedExpandResponse,
        protosTypes.google.showcase.v1beta1.IPagedExpandRequest|undefined, 
        {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.pagedExpand(request, options, callback);
  }
}
