// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import * as path from 'path';

import * as packageJson from '../../package.json';
import * as protosTypes from '../../protos/protos';
import * as gapicConfig from './keymanagementservice_client_config.json';

const version = packageJson.version;

export interface ClientOptions extends gax.GrpcClientOptions,
                                       gax.GoogleAuthOptions,
                                       gax.ClientStubOptions {
  libName?: string;
  libVersion?: string;
  clientConfig?: gax.ClientConfig;
  fallback?: boolean;
  apiEndpoint?: string;
}

interface Descriptors {
  page: {[name: string]: gax.PageDescriptor};
  stream: {[name: string]: gax.StreamDescriptor};
  longrunning: {[name: string]: gax.LongrunningDescriptor};
}

export interface Callback<
    ResponseObject, NextRequestObject, RawResponseObject> {
  (err: Error|null|undefined, value?: ResponseObject|null,
   nextRequest?: NextRequestObject, rawResponse?: RawResponseObject): void;
}



export interface PaginationCallback<
    RequestObject, ResponseObject, ResponseType> {
  (err: Error|null, values?: ResponseType[], nextPageRequest?: RequestObject,
   rawResponse?: ResponseObject): void;
}

export interface PaginationResponse<
    RequestObject, ResponseObject, ResponseType> {
  values?: ResponseType[];
  nextPageRequest?: RequestObject;
  rawResponse?: ResponseObject;
}

export class KeyManagementServiceClient {
  private _descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}};
  private _innerApiCalls: {[name: string]: Function};
  auth: gax.GoogleAuth;

  /**
    * Construct an instance of KeyManagementServiceClient.
    *
    * @@param {object} [options] - The configuration object. See the subsequent
    *   parameters for more details.
    * @@param {object} [options.credentials] - Credentials object.
    * @@param {string} [options.credentials.client_email]
    * @@param {string} [options.credentials.private_key]
    * @@param {string} [options.email] - Account email address. Required when
    *     using a .pem or .p12 keyFilename.
    * @@param {string} [options.keyFilename] - Full path to the a .json, .pem, or
    *     .p12 key downloaded from the Google Developers Console. If you provide
    *     a path to a JSON file, the projectId option below is not necessary.
    *     NOTE: .pem and .p12 require you to specify options.email as well.
    * @@param {number} [options.port] - The port on which to connect to
    *     the remote host.
    * @@param {string} [options.projectId] - The project ID from the Google
    *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
    *     the environment variable GCLOUD_PROJECT for your project ID. If your
    *     app is running in an environment which supports
    *     {@@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
    *     your project ID will be detected automatically.
    * @@param {function} [options.promise] - Custom promise module to use instead
    *     of native Promises.
    * @@param {string} [options.apiEndpoint] - The domain name of the
    *     API remote host.
    */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof KeyManagementServiceClient;
    const servicePath = opts && opts.servicePath ?
        opts.servicePath :
        ((opts && opts.apiEndpoint) ? opts.apiEndpoint :
                                      staticMembers.servicePath);
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = (typeof window !== 'undefined');
    if (isBrowser){
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    const gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof KeyManagementServiceClient).scopes;
    const gaxGrpc = new gaxModule.GrpcClient(opts);

    // Save the auth object to the client, for use by other methods.
    this.auth = (gaxGrpc.auth as gax.GoogleAuth);

    // Determine the client header string.
    const clientHeader = [
      `gl-node/${process.version}`,
      `grpc/${gaxGrpc.grpcVersion}`,
      `gax/${gaxModule.version}`,
      `gapic/${version}`,
      `gl-web/${gaxModule.version}`
    ];
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
    const protos = gaxGrpc.loadProto(
      opts.fallback ?
        require("../../protos/protos.json") :
        nodejsProtoPath
    );

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this._descriptors.page = {
      listKeyRings:
          new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'key_rings'),
      listCryptoKeys:
          new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'crypto_keys'),
      listCryptoKeyVersions:
          new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'crypto_key_versions'),
      listImportJobs:
          new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'import_jobs')
    };

    // Put together the default options sent with requests.
    const defaults = gaxGrpc.constructSettings(
        'google.cloud.kms.v1.KeyManagementService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};

    // Put together the "service stub" for
    // google.showcase.v1alpha2.Echo.
    const keyManagementServiceStub = gaxGrpc.createStub(
        opts.fallback ?
          // @ts-ignore Do not check types for loaded protos
          protos.lookupService('google.cloud.kms.v1.KeyManagementService') : 
          // @ts-ignore Do not check types for loaded protos
          protos.google.cloud.kms.v1.KeyManagementService,
        opts) as Promise<{[method: string]: Function}>;

    const keyManagementServiceStubMethods =
        ['listKeyRings', 'listCryptoKeys', 'listCryptoKeyVersions', 'listImportJobs', 'getKeyRing', 'getCryptoKey', 'getCryptoKeyVersion', 'getPublicKey', 'getImportJob', 'createKeyRing', 'createCryptoKey', 'createCryptoKeyVersion', 'importCryptoKeyVersion', 'createImportJob', 'updateCryptoKey', 'updateCryptoKeyVersion', 'encrypt', 'decrypt', 'asymmetricSign', 'asymmetricDecrypt', 'updateCryptoKeyPrimaryVersion', 'destroyCryptoKeyVersion', 'restoreCryptoKeyVersion'];

    for (const methodName of keyManagementServiceStubMethods) {
      const innerCallPromise = keyManagementServiceStub.then(
        (stub: {[method: string]: Function}) => (...args: Array<{}>) => {
          return stub[methodName].apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      this._innerApiCalls[methodName] = gax.createApiCall(
        innerCallPromise,
        defaults[methodName],
        this._descriptors.page[methodName] ||
            this._descriptors.stream[methodName] || 
            this._descriptors.longrunning[methodName]
      );
    }
  }
  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'cloudkms.googleapis.com';
  }
  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'cloudkms.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloudkms'
    ];
  }

  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getKeyRing(
      request: protosTypes.google.cloud.kms.v1.IGetKeyRingRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.IKeyRing,
        protosTypes.google.cloud.kms.v1.IGetKeyRingRequest|undefined, {}|undefined
      ]>;
  getKeyRing(
      request: protosTypes.google.cloud.kms.v1.IGetKeyRingRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.IKeyRing,
          protosTypes.google.cloud.kms.v1.IGetKeyRingRequest|undefined,
          {}|undefined>): void;
  getKeyRing(
      request: protosTypes.google.cloud.kms.v1.IGetKeyRingRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.IKeyRing,
          protosTypes.google.cloud.kms.v1.IGetKeyRingRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.IKeyRing,
          protosTypes.google.cloud.kms.v1.IGetKeyRingRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.kms.v1.IKeyRing,
        protosTypes.google.cloud.kms.v1.IGetKeyRingRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.getKeyRing(request, options, callback);
  }
  getCryptoKey(
      request: protosTypes.google.cloud.kms.v1.IGetCryptoKeyRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKey,
        protosTypes.google.cloud.kms.v1.IGetCryptoKeyRequest|undefined, {}|undefined
      ]>;
  getCryptoKey(
      request: protosTypes.google.cloud.kms.v1.IGetCryptoKeyRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKey,
          protosTypes.google.cloud.kms.v1.IGetCryptoKeyRequest|undefined,
          {}|undefined>): void;
  getCryptoKey(
      request: protosTypes.google.cloud.kms.v1.IGetCryptoKeyRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKey,
          protosTypes.google.cloud.kms.v1.IGetCryptoKeyRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKey,
          protosTypes.google.cloud.kms.v1.IGetCryptoKeyRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKey,
        protosTypes.google.cloud.kms.v1.IGetCryptoKeyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.getCryptoKey(request, options, callback);
  }
  getCryptoKeyVersion(
      request: protosTypes.google.cloud.kms.v1.IGetCryptoKeyVersionRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
        protosTypes.google.cloud.kms.v1.IGetCryptoKeyVersionRequest|undefined, {}|undefined
      ]>;
  getCryptoKeyVersion(
      request: protosTypes.google.cloud.kms.v1.IGetCryptoKeyVersionRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
          protosTypes.google.cloud.kms.v1.IGetCryptoKeyVersionRequest|undefined,
          {}|undefined>): void;
  getCryptoKeyVersion(
      request: protosTypes.google.cloud.kms.v1.IGetCryptoKeyVersionRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
          protosTypes.google.cloud.kms.v1.IGetCryptoKeyVersionRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
          protosTypes.google.cloud.kms.v1.IGetCryptoKeyVersionRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
        protosTypes.google.cloud.kms.v1.IGetCryptoKeyVersionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.getCryptoKeyVersion(request, options, callback);
  }
  getPublicKey(
      request: protosTypes.google.cloud.kms.v1.IGetPublicKeyRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.IPublicKey,
        protosTypes.google.cloud.kms.v1.IGetPublicKeyRequest|undefined, {}|undefined
      ]>;
  getPublicKey(
      request: protosTypes.google.cloud.kms.v1.IGetPublicKeyRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.IPublicKey,
          protosTypes.google.cloud.kms.v1.IGetPublicKeyRequest|undefined,
          {}|undefined>): void;
  getPublicKey(
      request: protosTypes.google.cloud.kms.v1.IGetPublicKeyRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.IPublicKey,
          protosTypes.google.cloud.kms.v1.IGetPublicKeyRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.IPublicKey,
          protosTypes.google.cloud.kms.v1.IGetPublicKeyRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.kms.v1.IPublicKey,
        protosTypes.google.cloud.kms.v1.IGetPublicKeyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.getPublicKey(request, options, callback);
  }
  getImportJob(
      request: protosTypes.google.cloud.kms.v1.IGetImportJobRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.IImportJob,
        protosTypes.google.cloud.kms.v1.IGetImportJobRequest|undefined, {}|undefined
      ]>;
  getImportJob(
      request: protosTypes.google.cloud.kms.v1.IGetImportJobRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.IImportJob,
          protosTypes.google.cloud.kms.v1.IGetImportJobRequest|undefined,
          {}|undefined>): void;
  getImportJob(
      request: protosTypes.google.cloud.kms.v1.IGetImportJobRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.IImportJob,
          protosTypes.google.cloud.kms.v1.IGetImportJobRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.IImportJob,
          protosTypes.google.cloud.kms.v1.IGetImportJobRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.kms.v1.IImportJob,
        protosTypes.google.cloud.kms.v1.IGetImportJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.getImportJob(request, options, callback);
  }
  createKeyRing(
      request: protosTypes.google.cloud.kms.v1.ICreateKeyRingRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.IKeyRing,
        protosTypes.google.cloud.kms.v1.ICreateKeyRingRequest|undefined, {}|undefined
      ]>;
  createKeyRing(
      request: protosTypes.google.cloud.kms.v1.ICreateKeyRingRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.IKeyRing,
          protosTypes.google.cloud.kms.v1.ICreateKeyRingRequest|undefined,
          {}|undefined>): void;
  createKeyRing(
      request: protosTypes.google.cloud.kms.v1.ICreateKeyRingRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.IKeyRing,
          protosTypes.google.cloud.kms.v1.ICreateKeyRingRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.IKeyRing,
          protosTypes.google.cloud.kms.v1.ICreateKeyRingRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.kms.v1.IKeyRing,
        protosTypes.google.cloud.kms.v1.ICreateKeyRingRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.createKeyRing(request, options, callback);
  }
  createCryptoKey(
      request: protosTypes.google.cloud.kms.v1.ICreateCryptoKeyRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKey,
        protosTypes.google.cloud.kms.v1.ICreateCryptoKeyRequest|undefined, {}|undefined
      ]>;
  createCryptoKey(
      request: protosTypes.google.cloud.kms.v1.ICreateCryptoKeyRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKey,
          protosTypes.google.cloud.kms.v1.ICreateCryptoKeyRequest|undefined,
          {}|undefined>): void;
  createCryptoKey(
      request: protosTypes.google.cloud.kms.v1.ICreateCryptoKeyRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKey,
          protosTypes.google.cloud.kms.v1.ICreateCryptoKeyRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKey,
          protosTypes.google.cloud.kms.v1.ICreateCryptoKeyRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKey,
        protosTypes.google.cloud.kms.v1.ICreateCryptoKeyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.createCryptoKey(request, options, callback);
  }
  createCryptoKeyVersion(
      request: protosTypes.google.cloud.kms.v1.ICreateCryptoKeyVersionRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
        protosTypes.google.cloud.kms.v1.ICreateCryptoKeyVersionRequest|undefined, {}|undefined
      ]>;
  createCryptoKeyVersion(
      request: protosTypes.google.cloud.kms.v1.ICreateCryptoKeyVersionRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
          protosTypes.google.cloud.kms.v1.ICreateCryptoKeyVersionRequest|undefined,
          {}|undefined>): void;
  createCryptoKeyVersion(
      request: protosTypes.google.cloud.kms.v1.ICreateCryptoKeyVersionRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
          protosTypes.google.cloud.kms.v1.ICreateCryptoKeyVersionRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
          protosTypes.google.cloud.kms.v1.ICreateCryptoKeyVersionRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
        protosTypes.google.cloud.kms.v1.ICreateCryptoKeyVersionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.createCryptoKeyVersion(request, options, callback);
  }
  importCryptoKeyVersion(
      request: protosTypes.google.cloud.kms.v1.IImportCryptoKeyVersionRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
        protosTypes.google.cloud.kms.v1.IImportCryptoKeyVersionRequest|undefined, {}|undefined
      ]>;
  importCryptoKeyVersion(
      request: protosTypes.google.cloud.kms.v1.IImportCryptoKeyVersionRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
          protosTypes.google.cloud.kms.v1.IImportCryptoKeyVersionRequest|undefined,
          {}|undefined>): void;
  importCryptoKeyVersion(
      request: protosTypes.google.cloud.kms.v1.IImportCryptoKeyVersionRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
          protosTypes.google.cloud.kms.v1.IImportCryptoKeyVersionRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
          protosTypes.google.cloud.kms.v1.IImportCryptoKeyVersionRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
        protosTypes.google.cloud.kms.v1.IImportCryptoKeyVersionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.importCryptoKeyVersion(request, options, callback);
  }
  createImportJob(
      request: protosTypes.google.cloud.kms.v1.ICreateImportJobRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.IImportJob,
        protosTypes.google.cloud.kms.v1.ICreateImportJobRequest|undefined, {}|undefined
      ]>;
  createImportJob(
      request: protosTypes.google.cloud.kms.v1.ICreateImportJobRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.IImportJob,
          protosTypes.google.cloud.kms.v1.ICreateImportJobRequest|undefined,
          {}|undefined>): void;
  createImportJob(
      request: protosTypes.google.cloud.kms.v1.ICreateImportJobRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.IImportJob,
          protosTypes.google.cloud.kms.v1.ICreateImportJobRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.IImportJob,
          protosTypes.google.cloud.kms.v1.ICreateImportJobRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.kms.v1.IImportJob,
        protosTypes.google.cloud.kms.v1.ICreateImportJobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.createImportJob(request, options, callback);
  }
  updateCryptoKey(
      request: protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKey,
        protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyRequest|undefined, {}|undefined
      ]>;
  updateCryptoKey(
      request: protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKey,
          protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyRequest|undefined,
          {}|undefined>): void;
  updateCryptoKey(
      request: protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKey,
          protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKey,
          protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKey,
        protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.updateCryptoKey(request, options, callback);
  }
  updateCryptoKeyVersion(
      request: protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyVersionRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
        protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyVersionRequest|undefined, {}|undefined
      ]>;
  updateCryptoKeyVersion(
      request: protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyVersionRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
          protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyVersionRequest|undefined,
          {}|undefined>): void;
  updateCryptoKeyVersion(
      request: protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyVersionRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
          protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyVersionRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
          protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyVersionRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
        protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyVersionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.updateCryptoKeyVersion(request, options, callback);
  }
  encrypt(
      request: protosTypes.google.cloud.kms.v1.IEncryptRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.IEncryptResponse,
        protosTypes.google.cloud.kms.v1.IEncryptRequest|undefined, {}|undefined
      ]>;
  encrypt(
      request: protosTypes.google.cloud.kms.v1.IEncryptRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.IEncryptResponse,
          protosTypes.google.cloud.kms.v1.IEncryptRequest|undefined,
          {}|undefined>): void;
  encrypt(
      request: protosTypes.google.cloud.kms.v1.IEncryptRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.IEncryptResponse,
          protosTypes.google.cloud.kms.v1.IEncryptRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.IEncryptResponse,
          protosTypes.google.cloud.kms.v1.IEncryptRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.kms.v1.IEncryptResponse,
        protosTypes.google.cloud.kms.v1.IEncryptRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.encrypt(request, options, callback);
  }
  decrypt(
      request: protosTypes.google.cloud.kms.v1.IDecryptRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.IDecryptResponse,
        protosTypes.google.cloud.kms.v1.IDecryptRequest|undefined, {}|undefined
      ]>;
  decrypt(
      request: protosTypes.google.cloud.kms.v1.IDecryptRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.IDecryptResponse,
          protosTypes.google.cloud.kms.v1.IDecryptRequest|undefined,
          {}|undefined>): void;
  decrypt(
      request: protosTypes.google.cloud.kms.v1.IDecryptRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.IDecryptResponse,
          protosTypes.google.cloud.kms.v1.IDecryptRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.IDecryptResponse,
          protosTypes.google.cloud.kms.v1.IDecryptRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.kms.v1.IDecryptResponse,
        protosTypes.google.cloud.kms.v1.IDecryptRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.decrypt(request, options, callback);
  }
  asymmetricSign(
      request: protosTypes.google.cloud.kms.v1.IAsymmetricSignRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.IAsymmetricSignResponse,
        protosTypes.google.cloud.kms.v1.IAsymmetricSignRequest|undefined, {}|undefined
      ]>;
  asymmetricSign(
      request: protosTypes.google.cloud.kms.v1.IAsymmetricSignRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.IAsymmetricSignResponse,
          protosTypes.google.cloud.kms.v1.IAsymmetricSignRequest|undefined,
          {}|undefined>): void;
  asymmetricSign(
      request: protosTypes.google.cloud.kms.v1.IAsymmetricSignRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.IAsymmetricSignResponse,
          protosTypes.google.cloud.kms.v1.IAsymmetricSignRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.IAsymmetricSignResponse,
          protosTypes.google.cloud.kms.v1.IAsymmetricSignRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.kms.v1.IAsymmetricSignResponse,
        protosTypes.google.cloud.kms.v1.IAsymmetricSignRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.asymmetricSign(request, options, callback);
  }
  asymmetricDecrypt(
      request: protosTypes.google.cloud.kms.v1.IAsymmetricDecryptRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.IAsymmetricDecryptResponse,
        protosTypes.google.cloud.kms.v1.IAsymmetricDecryptRequest|undefined, {}|undefined
      ]>;
  asymmetricDecrypt(
      request: protosTypes.google.cloud.kms.v1.IAsymmetricDecryptRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.IAsymmetricDecryptResponse,
          protosTypes.google.cloud.kms.v1.IAsymmetricDecryptRequest|undefined,
          {}|undefined>): void;
  asymmetricDecrypt(
      request: protosTypes.google.cloud.kms.v1.IAsymmetricDecryptRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.IAsymmetricDecryptResponse,
          protosTypes.google.cloud.kms.v1.IAsymmetricDecryptRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.IAsymmetricDecryptResponse,
          protosTypes.google.cloud.kms.v1.IAsymmetricDecryptRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.kms.v1.IAsymmetricDecryptResponse,
        protosTypes.google.cloud.kms.v1.IAsymmetricDecryptRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.asymmetricDecrypt(request, options, callback);
  }
  updateCryptoKeyPrimaryVersion(
      request: protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyPrimaryVersionRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKey,
        protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyPrimaryVersionRequest|undefined, {}|undefined
      ]>;
  updateCryptoKeyPrimaryVersion(
      request: protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyPrimaryVersionRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKey,
          protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyPrimaryVersionRequest|undefined,
          {}|undefined>): void;
  updateCryptoKeyPrimaryVersion(
      request: protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyPrimaryVersionRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKey,
          protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyPrimaryVersionRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKey,
          protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyPrimaryVersionRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKey,
        protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyPrimaryVersionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.updateCryptoKeyPrimaryVersion(request, options, callback);
  }
  destroyCryptoKeyVersion(
      request: protosTypes.google.cloud.kms.v1.IDestroyCryptoKeyVersionRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
        protosTypes.google.cloud.kms.v1.IDestroyCryptoKeyVersionRequest|undefined, {}|undefined
      ]>;
  destroyCryptoKeyVersion(
      request: protosTypes.google.cloud.kms.v1.IDestroyCryptoKeyVersionRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
          protosTypes.google.cloud.kms.v1.IDestroyCryptoKeyVersionRequest|undefined,
          {}|undefined>): void;
  destroyCryptoKeyVersion(
      request: protosTypes.google.cloud.kms.v1.IDestroyCryptoKeyVersionRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
          protosTypes.google.cloud.kms.v1.IDestroyCryptoKeyVersionRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
          protosTypes.google.cloud.kms.v1.IDestroyCryptoKeyVersionRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
        protosTypes.google.cloud.kms.v1.IDestroyCryptoKeyVersionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.destroyCryptoKeyVersion(request, options, callback);
  }
  restoreCryptoKeyVersion(
      request: protosTypes.google.cloud.kms.v1.IRestoreCryptoKeyVersionRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
        protosTypes.google.cloud.kms.v1.IRestoreCryptoKeyVersionRequest|undefined, {}|undefined
      ]>;
  restoreCryptoKeyVersion(
      request: protosTypes.google.cloud.kms.v1.IRestoreCryptoKeyVersionRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
          protosTypes.google.cloud.kms.v1.IRestoreCryptoKeyVersionRequest|undefined,
          {}|undefined>): void;
  restoreCryptoKeyVersion(
      request: protosTypes.google.cloud.kms.v1.IRestoreCryptoKeyVersionRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
          protosTypes.google.cloud.kms.v1.IRestoreCryptoKeyVersionRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
          protosTypes.google.cloud.kms.v1.IRestoreCryptoKeyVersionRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKeyVersion,
        protosTypes.google.cloud.kms.v1.IRestoreCryptoKeyVersionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.restoreCryptoKeyVersion(request, options, callback);
  }

  listKeyRings(
      request: protosTypes.google.cloud.kms.v1.IListKeyRingsRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.IKeyRing[],
        protosTypes.google.cloud.kms.v1.IListKeyRingsRequest|null, 
        protosTypes.google.cloud.kms.v1.IListKeyRingsResponse
      ]>;
  listKeyRings(
      request: protosTypes.google.cloud.kms.v1.IListKeyRingsRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.IKeyRing[],
          protosTypes.google.cloud.kms.v1.IListKeyRingsRequest|null,
          protosTypes.google.cloud.kms.v1.IListKeyRingsResponse>): void;
  listKeyRings(
      request: protosTypes.google.cloud.kms.v1.IListKeyRingsRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.IKeyRing[],
          protosTypes.google.cloud.kms.v1.IListKeyRingsRequest|null, 
          protosTypes.google.cloud.kms.v1.IListKeyRingsResponse>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.IKeyRing[],
          protosTypes.google.cloud.kms.v1.IListKeyRingsRequest|null,
          protosTypes.google.cloud.kms.v1.IListKeyRingsResponse>):
      Promise<[
        protosTypes.google.cloud.kms.v1.IKeyRing[],
        protosTypes.google.cloud.kms.v1.IListKeyRingsRequest|null, 
        protosTypes.google.cloud.kms.v1.IListKeyRingsResponse
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.listKeyRings(request, options, callback);
  }
  listCryptoKeys(
      request: protosTypes.google.cloud.kms.v1.IListCryptoKeysRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKey[],
        protosTypes.google.cloud.kms.v1.IListCryptoKeysRequest|null, 
        protosTypes.google.cloud.kms.v1.IListCryptoKeysResponse
      ]>;
  listCryptoKeys(
      request: protosTypes.google.cloud.kms.v1.IListCryptoKeysRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKey[],
          protosTypes.google.cloud.kms.v1.IListCryptoKeysRequest|null,
          protosTypes.google.cloud.kms.v1.IListCryptoKeysResponse>): void;
  listCryptoKeys(
      request: protosTypes.google.cloud.kms.v1.IListCryptoKeysRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKey[],
          protosTypes.google.cloud.kms.v1.IListCryptoKeysRequest|null, 
          protosTypes.google.cloud.kms.v1.IListCryptoKeysResponse>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKey[],
          protosTypes.google.cloud.kms.v1.IListCryptoKeysRequest|null,
          protosTypes.google.cloud.kms.v1.IListCryptoKeysResponse>):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKey[],
        protosTypes.google.cloud.kms.v1.IListCryptoKeysRequest|null, 
        protosTypes.google.cloud.kms.v1.IListCryptoKeysResponse
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.listCryptoKeys(request, options, callback);
  }
  listCryptoKeyVersions(
      request: protosTypes.google.cloud.kms.v1.IListCryptoKeyVersionsRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKeyVersion[],
        protosTypes.google.cloud.kms.v1.IListCryptoKeyVersionsRequest|null, 
        protosTypes.google.cloud.kms.v1.IListCryptoKeyVersionsResponse
      ]>;
  listCryptoKeyVersions(
      request: protosTypes.google.cloud.kms.v1.IListCryptoKeyVersionsRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion[],
          protosTypes.google.cloud.kms.v1.IListCryptoKeyVersionsRequest|null,
          protosTypes.google.cloud.kms.v1.IListCryptoKeyVersionsResponse>): void;
  listCryptoKeyVersions(
      request: protosTypes.google.cloud.kms.v1.IListCryptoKeyVersionsRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion[],
          protosTypes.google.cloud.kms.v1.IListCryptoKeyVersionsRequest|null, 
          protosTypes.google.cloud.kms.v1.IListCryptoKeyVersionsResponse>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.ICryptoKeyVersion[],
          protosTypes.google.cloud.kms.v1.IListCryptoKeyVersionsRequest|null,
          protosTypes.google.cloud.kms.v1.IListCryptoKeyVersionsResponse>):
      Promise<[
        protosTypes.google.cloud.kms.v1.ICryptoKeyVersion[],
        protosTypes.google.cloud.kms.v1.IListCryptoKeyVersionsRequest|null, 
        protosTypes.google.cloud.kms.v1.IListCryptoKeyVersionsResponse
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.listCryptoKeyVersions(request, options, callback);
  }
  listImportJobs(
      request: protosTypes.google.cloud.kms.v1.IListImportJobsRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.kms.v1.IImportJob[],
        protosTypes.google.cloud.kms.v1.IListImportJobsRequest|null, 
        protosTypes.google.cloud.kms.v1.IListImportJobsResponse
      ]>;
  listImportJobs(
      request: protosTypes.google.cloud.kms.v1.IListImportJobsRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.kms.v1.IImportJob[],
          protosTypes.google.cloud.kms.v1.IListImportJobsRequest|null,
          protosTypes.google.cloud.kms.v1.IListImportJobsResponse>): void;
  listImportJobs(
      request: protosTypes.google.cloud.kms.v1.IListImportJobsRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.kms.v1.IImportJob[],
          protosTypes.google.cloud.kms.v1.IListImportJobsRequest|null, 
          protosTypes.google.cloud.kms.v1.IListImportJobsResponse>,
      callback?: Callback<
          protosTypes.google.cloud.kms.v1.IImportJob[],
          protosTypes.google.cloud.kms.v1.IListImportJobsRequest|null,
          protosTypes.google.cloud.kms.v1.IListImportJobsResponse>):
      Promise<[
        protosTypes.google.cloud.kms.v1.IImportJob[],
        protosTypes.google.cloud.kms.v1.IListImportJobsRequest|null, 
        protosTypes.google.cloud.kms.v1.IListImportJobsResponse
      ]>|void {
    request = request || {};
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.listImportJobs(request, options, callback);
  }
}
