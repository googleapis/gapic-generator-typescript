// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {APICallback, Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, PaginationResponse} from 'google-gax';
import * as path from 'path';

import { Transform } from 'stream';
import * as protosTypes from '../../protos/protos';
import * as gapicConfig from './service_monitoring_service_client_config.json';

const version = require('../../../package.json').version;

/**
 *  The Stackdriver Monitoring Service-Oriented Monitoring API has endpoints for
 *  managing and querying aspects of a workspace's services. These include the
 *  `Service`'s monitored resources, its Service-Level Objectives, and a taxonomy
 *  of categorized Health Metrics.
 * @class
 * @memberof v3
 */
export class ServiceMonitoringServiceClient {
  private _descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}};
  private _innerApiCalls: {[name: string]: Function};
  private _pathTemplates: {[name: string]: gax.PathTemplate};
  private _terminated = false;
  auth: gax.GoogleAuth;
  serviceMonitoringServiceStub: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ServiceMonitoringServiceClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {function} [options.promise] - Custom promise module to use instead
   *     of native Promises.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof ServiceMonitoringServiceClient;
    const servicePath = opts && opts.servicePath ?
        opts.servicePath :
        ((opts && opts.apiEndpoint) ? opts.apiEndpoint :
                                      staticMembers.servicePath);
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = (typeof window !== 'undefined');
    if (isBrowser){
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    const gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof ServiceMonitoringServiceClient).scopes;
    const gaxGrpc = new gaxModule.GrpcClient(opts);

    // Save the auth object to the client, for use by other methods.
    this.auth = (gaxGrpc.auth as gax.GoogleAuth);

    // Determine the client header string.
    const clientHeader = [
      `gax/${gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
    const protos = gaxGrpc.loadProto(
      opts.fallback ?
        require("../../protos/protos.json") :
        nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this._pathTemplates = {
      folderServicePathTemplate: new gaxModule.PathTemplate(
        'folders/{folder}/services/{service}'
      ),
      folderServiceServiceLevelObjectivePathTemplate: new gaxModule.PathTemplate(
        'folders/{folder}/services/{service}/serviceLevelObjectives/{service_level_objective}'
      ),
      folderUptimeCheckConfigPathTemplate: new gaxModule.PathTemplate(
        'folders/{folder}/uptimeCheckConfigs/{uptime_check_config}'
      ),
      organizationServicePathTemplate: new gaxModule.PathTemplate(
        'organizations/{organization}/services/{service}'
      ),
      organizationServiceServiceLevelObjectivePathTemplate: new gaxModule.PathTemplate(
        'organizations/{organization}/services/{service}/serviceLevelObjectives/{service_level_objective}'
      ),
      organizationUptimeCheckConfigPathTemplate: new gaxModule.PathTemplate(
        'organizations/{organization}/uptimeCheckConfigs/{uptime_check_config}'
      ),
      projectServicePathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/services/{service}'
      ),
      projectServiceServiceLevelObjectivePathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/services/{service}/serviceLevelObjectives/{service_level_objective}'
      ),
      projectUptimeCheckConfigPathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/uptimeCheckConfigs/{uptime_check_config}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this._descriptors.page = {
      listServices:
          new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'services'),
      listServiceLevelObjectives:
          new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'serviceLevelObjectives')
    };

    // Put together the default options sent with requests.
    const defaults = gaxGrpc.constructSettings(
        'google.monitoring.v3.ServiceMonitoringService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};

    // Put together the "service stub" for
    // google.monitoring.v3.ServiceMonitoringService.
    this.serviceMonitoringServiceStub = gaxGrpc.createStub(
        opts.fallback ?
          (protos as protobuf.Root).lookupService('google.monitoring.v3.ServiceMonitoringService') :
          // tslint:disable-next-line no-any
          (protos as any).google.monitoring.v3.ServiceMonitoringService,
        opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const serviceMonitoringServiceStubMethods =
        ['createService', 'getService', 'listServices', 'updateService', 'deleteService', 'createServiceLevelObjective', 'getServiceLevelObjective', 'listServiceLevelObjectives', 'updateServiceLevelObjective', 'deleteServiceLevelObjective'];

    for (const methodName of serviceMonitoringServiceStubMethods) {
      const innerCallPromise = this.serviceMonitoringServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          return stub[methodName].apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const apiCall = gaxModule.createApiCall(
        innerCallPromise,
        defaults[methodName],
        this._descriptors.page[methodName] ||
            this._descriptors.stream[methodName] ||
            this._descriptors.longrunning[methodName]
      );

      this._innerApiCalls[methodName] = (
        argument: {},
        callOptions?: CallOptions,
        callback?: APICallback
      ) => {
        return apiCall(argument, callOptions, callback);
      };
    }
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'monitoring.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'monitoring.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/monitoring',
      'https://www.googleapis.com/auth/monitoring.read'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  createService(
      request: protosTypes.google.monitoring.v3.ICreateServiceRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.monitoring.v3.IService,
        protosTypes.google.monitoring.v3.ICreateServiceRequest|undefined, {}|undefined
      ]>;
  createService(
      request: protosTypes.google.monitoring.v3.ICreateServiceRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.monitoring.v3.IService,
          protosTypes.google.monitoring.v3.ICreateServiceRequest|undefined,
          {}|undefined>): void;
/**
 * Create a `Service`.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the parent workspace.
 *   Of the form `projects/{project_id}`.
 * @param {string} request.serviceId
 *   Optional. The Service id to use for this Service. If omitted, an id will be
 *   generated instead. Must match the pattern [a-z0-9\-]+
 * @param {google.monitoring.v3.Service} request.service
 *   Required. The `Service` to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Service]{@link google.monitoring.v3.Service}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  createService(
      request: protosTypes.google.monitoring.v3.ICreateServiceRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.monitoring.v3.IService,
          protosTypes.google.monitoring.v3.ICreateServiceRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.monitoring.v3.IService,
          protosTypes.google.monitoring.v3.ICreateServiceRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.monitoring.v3.IService,
        protosTypes.google.monitoring.v3.ICreateServiceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    return this._innerApiCalls.createService(request, options, callback);
  }
  getService(
      request: protosTypes.google.monitoring.v3.IGetServiceRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.monitoring.v3.IService,
        protosTypes.google.monitoring.v3.IGetServiceRequest|undefined, {}|undefined
      ]>;
  getService(
      request: protosTypes.google.monitoring.v3.IGetServiceRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.monitoring.v3.IService,
          protosTypes.google.monitoring.v3.IGetServiceRequest|undefined,
          {}|undefined>): void;
/**
 * Get the named `Service`.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Resource name of the `Service`.
 *   Of the form `projects/{project_id}/services/{service_id}`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Service]{@link google.monitoring.v3.Service}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getService(
      request: protosTypes.google.monitoring.v3.IGetServiceRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.monitoring.v3.IService,
          protosTypes.google.monitoring.v3.IGetServiceRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.monitoring.v3.IService,
          protosTypes.google.monitoring.v3.IGetServiceRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.monitoring.v3.IService,
        protosTypes.google.monitoring.v3.IGetServiceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    return this._innerApiCalls.getService(request, options, callback);
  }
  updateService(
      request: protosTypes.google.monitoring.v3.IUpdateServiceRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.monitoring.v3.IService,
        protosTypes.google.monitoring.v3.IUpdateServiceRequest|undefined, {}|undefined
      ]>;
  updateService(
      request: protosTypes.google.monitoring.v3.IUpdateServiceRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.monitoring.v3.IService,
          protosTypes.google.monitoring.v3.IUpdateServiceRequest|undefined,
          {}|undefined>): void;
/**
 * Update this `Service`.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.monitoring.v3.Service} request.service
 *   Required. The `Service` to draw updates from.
 *   The given `name` specifies the resource to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   A set of field paths defining which fields to use for the update.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Service]{@link google.monitoring.v3.Service}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  updateService(
      request: protosTypes.google.monitoring.v3.IUpdateServiceRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.monitoring.v3.IService,
          protosTypes.google.monitoring.v3.IUpdateServiceRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.monitoring.v3.IService,
          protosTypes.google.monitoring.v3.IUpdateServiceRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.monitoring.v3.IService,
        protosTypes.google.monitoring.v3.IUpdateServiceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'service.name': request.service!.name || '',
    });
    return this._innerApiCalls.updateService(request, options, callback);
  }
  deleteService(
      request: protosTypes.google.monitoring.v3.IDeleteServiceRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.monitoring.v3.IDeleteServiceRequest|undefined, {}|undefined
      ]>;
  deleteService(
      request: protosTypes.google.monitoring.v3.IDeleteServiceRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.google.monitoring.v3.IDeleteServiceRequest|undefined,
          {}|undefined>): void;
/**
 * Soft delete this `Service`.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Resource name of the `Service` to delete.
 *   Of the form `projects/{project_id}/services/{service_id}`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  deleteService(
      request: protosTypes.google.monitoring.v3.IDeleteServiceRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.google.monitoring.v3.IDeleteServiceRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.google.monitoring.v3.IDeleteServiceRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.monitoring.v3.IDeleteServiceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    return this._innerApiCalls.deleteService(request, options, callback);
  }
  createServiceLevelObjective(
      request: protosTypes.google.monitoring.v3.ICreateServiceLevelObjectiveRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.monitoring.v3.IServiceLevelObjective,
        protosTypes.google.monitoring.v3.ICreateServiceLevelObjectiveRequest|undefined, {}|undefined
      ]>;
  createServiceLevelObjective(
      request: protosTypes.google.monitoring.v3.ICreateServiceLevelObjectiveRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.monitoring.v3.IServiceLevelObjective,
          protosTypes.google.monitoring.v3.ICreateServiceLevelObjectiveRequest|undefined,
          {}|undefined>): void;
/**
 * Create a `ServiceLevelObjective` for the given `Service`.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the parent `Service`.
 *   Of the form `projects/{project_id}/services/{service_id}`.
 * @param {string} request.serviceLevelObjectiveId
 *   Optional. The ServiceLevelObjective id to use for this
 *   ServiceLevelObjective. If omitted, an id will be generated instead. Must
 *   match the pattern [a-z0-9\-]+
 * @param {google.monitoring.v3.ServiceLevelObjective} request.serviceLevelObjective
 *   Required. The `ServiceLevelObjective` to create.
 *   The provided `name` will be respected if no `ServiceLevelObjective` exists
 *   with this name.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ServiceLevelObjective]{@link google.monitoring.v3.ServiceLevelObjective}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  createServiceLevelObjective(
      request: protosTypes.google.monitoring.v3.ICreateServiceLevelObjectiveRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.monitoring.v3.IServiceLevelObjective,
          protosTypes.google.monitoring.v3.ICreateServiceLevelObjectiveRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.monitoring.v3.IServiceLevelObjective,
          protosTypes.google.monitoring.v3.ICreateServiceLevelObjectiveRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.monitoring.v3.IServiceLevelObjective,
        protosTypes.google.monitoring.v3.ICreateServiceLevelObjectiveRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    return this._innerApiCalls.createServiceLevelObjective(request, options, callback);
  }
  getServiceLevelObjective(
      request: protosTypes.google.monitoring.v3.IGetServiceLevelObjectiveRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.monitoring.v3.IServiceLevelObjective,
        protosTypes.google.monitoring.v3.IGetServiceLevelObjectiveRequest|undefined, {}|undefined
      ]>;
  getServiceLevelObjective(
      request: protosTypes.google.monitoring.v3.IGetServiceLevelObjectiveRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.monitoring.v3.IServiceLevelObjective,
          protosTypes.google.monitoring.v3.IGetServiceLevelObjectiveRequest|undefined,
          {}|undefined>): void;
/**
 * Get a `ServiceLevelObjective` by name.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Resource name of the `ServiceLevelObjective` to get.
 *   Of the form
 *   `projects/{project_id}/services/{service_id}/serviceLevelObjectives/{slo_name}`.
 * @param {google.monitoring.v3.ServiceLevelObjective.View} request.view
 *   View of the `ServiceLevelObjective` to return. If `DEFAULT`, return the
 *   `ServiceLevelObjective` as originally defined. If `EXPLICIT` and the
 *   `ServiceLevelObjective` is defined in terms of a `BasicSli`, replace the
 *   `BasicSli` with a `RequestBasedSli` spelling out how the SLI is computed.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ServiceLevelObjective]{@link google.monitoring.v3.ServiceLevelObjective}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getServiceLevelObjective(
      request: protosTypes.google.monitoring.v3.IGetServiceLevelObjectiveRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.monitoring.v3.IServiceLevelObjective,
          protosTypes.google.monitoring.v3.IGetServiceLevelObjectiveRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.monitoring.v3.IServiceLevelObjective,
          protosTypes.google.monitoring.v3.IGetServiceLevelObjectiveRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.monitoring.v3.IServiceLevelObjective,
        protosTypes.google.monitoring.v3.IGetServiceLevelObjectiveRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    return this._innerApiCalls.getServiceLevelObjective(request, options, callback);
  }
  updateServiceLevelObjective(
      request: protosTypes.google.monitoring.v3.IUpdateServiceLevelObjectiveRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.monitoring.v3.IServiceLevelObjective,
        protosTypes.google.monitoring.v3.IUpdateServiceLevelObjectiveRequest|undefined, {}|undefined
      ]>;
  updateServiceLevelObjective(
      request: protosTypes.google.monitoring.v3.IUpdateServiceLevelObjectiveRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.monitoring.v3.IServiceLevelObjective,
          protosTypes.google.monitoring.v3.IUpdateServiceLevelObjectiveRequest|undefined,
          {}|undefined>): void;
/**
 * Update the given `ServiceLevelObjective`.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.monitoring.v3.ServiceLevelObjective} request.serviceLevelObjective
 *   Required. The `ServiceLevelObjective` to draw updates from.
 *   The given `name` specifies the resource to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   A set of field paths defining which fields to use for the update.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ServiceLevelObjective]{@link google.monitoring.v3.ServiceLevelObjective}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  updateServiceLevelObjective(
      request: protosTypes.google.monitoring.v3.IUpdateServiceLevelObjectiveRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.monitoring.v3.IServiceLevelObjective,
          protosTypes.google.monitoring.v3.IUpdateServiceLevelObjectiveRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.monitoring.v3.IServiceLevelObjective,
          protosTypes.google.monitoring.v3.IUpdateServiceLevelObjectiveRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.monitoring.v3.IServiceLevelObjective,
        protosTypes.google.monitoring.v3.IUpdateServiceLevelObjectiveRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'service_level_objective.name': request.serviceLevelObjective!.name || '',
    });
    return this._innerApiCalls.updateServiceLevelObjective(request, options, callback);
  }
  deleteServiceLevelObjective(
      request: protosTypes.google.monitoring.v3.IDeleteServiceLevelObjectiveRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.monitoring.v3.IDeleteServiceLevelObjectiveRequest|undefined, {}|undefined
      ]>;
  deleteServiceLevelObjective(
      request: protosTypes.google.monitoring.v3.IDeleteServiceLevelObjectiveRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.google.monitoring.v3.IDeleteServiceLevelObjectiveRequest|undefined,
          {}|undefined>): void;
/**
 * Delete the given `ServiceLevelObjective`.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Resource name of the `ServiceLevelObjective` to delete.
 *   Of the form
 *   `projects/{project_id}/services/{service_id}/serviceLevelObjectives/{slo_name}`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  deleteServiceLevelObjective(
      request: protosTypes.google.monitoring.v3.IDeleteServiceLevelObjectiveRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.google.monitoring.v3.IDeleteServiceLevelObjectiveRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.google.monitoring.v3.IDeleteServiceLevelObjectiveRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.monitoring.v3.IDeleteServiceLevelObjectiveRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    return this._innerApiCalls.deleteServiceLevelObjective(request, options, callback);
  }

  listServices(
      request: protosTypes.google.monitoring.v3.IListServicesRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.monitoring.v3.IService[],
        protosTypes.google.monitoring.v3.IListServicesRequest|null,
        protosTypes.google.monitoring.v3.IListServicesResponse
      ]>;
  listServices(
      request: protosTypes.google.monitoring.v3.IListServicesRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.monitoring.v3.IService[],
          protosTypes.google.monitoring.v3.IListServicesRequest|null,
          protosTypes.google.monitoring.v3.IListServicesResponse>): void;
/**
 * List `Service`s for this workspace.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the parent `Workspace`.
 *   Of the form `projects/{project_id}`.
 * @param {string} request.filter
 *   A filter specifying what `Service`s to return. The filter currently
 *   supports the following fields:
 *
 *       - `identifier_case`
 *       - `app_engine.module_id`
 *       - `cloud_endpoints.service`
 *       - `cluster_istio.location`
 *       - `cluster_istio.cluster_name`
 *       - `cluster_istio.service_namespace`
 *       - `cluster_istio.service_name`
 *
 *   `identifier_case` refers to which option in the identifier oneof is
 *   populated. For example, the filter `identifier_case = "CUSTOM"` would match
 *   all services with a value for the `custom` field. Valid options are
 *   "CUSTOM", "APP_ENGINE", "CLOUD_ENDPOINTS", and "CLUSTER_ISTIO".
 * @param {number} request.pageSize
 *   A non-negative number that is the maximum number of results to return.
 *   When 0, use default page size.
 * @param {string} request.pageToken
 *   If this field is not empty then it must contain the `nextPageToken` value
 *   returned by a previous call to this method.  Using this field causes the
 *   method to return additional results from the previous method call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Service]{@link google.monitoring.v3.Service}.
 *   The client library support auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [Service]{@link google.monitoring.v3.Service} that corresponds to
 *   the one page received from the API server.
 *   If the second element is not null it contains the request object of type [ListServicesRequest]{@link google.monitoring.v3.ListServicesRequest}
 *   that can be used to obtain the next page of the results.
 *   If it is null, the next page does not exist.
 *   The third element contains the raw response received from the API server. Its type is
 *   [ListServicesResponse]{@link google.monitoring.v3.ListServicesResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  listServices(
      request: protosTypes.google.monitoring.v3.IListServicesRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.monitoring.v3.IService[],
          protosTypes.google.monitoring.v3.IListServicesRequest|null,
          protosTypes.google.monitoring.v3.IListServicesResponse>,
      callback?: Callback<
          protosTypes.google.monitoring.v3.IService[],
          protosTypes.google.monitoring.v3.IListServicesRequest|null,
          protosTypes.google.monitoring.v3.IListServicesResponse>):
      Promise<[
        protosTypes.google.monitoring.v3.IService[],
        protosTypes.google.monitoring.v3.IListServicesRequest|null,
        protosTypes.google.monitoring.v3.IListServicesResponse
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    return this._innerApiCalls.listServices(request, options, callback);
  }

/**
 * Equivalent to {@link listServices}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link listServices} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the parent `Workspace`.
 *   Of the form `projects/{project_id}`.
 * @param {string} request.filter
 *   A filter specifying what `Service`s to return. The filter currently
 *   supports the following fields:
 *
 *       - `identifier_case`
 *       - `app_engine.module_id`
 *       - `cloud_endpoints.service`
 *       - `cluster_istio.location`
 *       - `cluster_istio.cluster_name`
 *       - `cluster_istio.service_namespace`
 *       - `cluster_istio.service_name`
 *
 *   `identifier_case` refers to which option in the identifier oneof is
 *   populated. For example, the filter `identifier_case = "CUSTOM"` would match
 *   all services with a value for the `custom` field. Valid options are
 *   "CUSTOM", "APP_ENGINE", "CLOUD_ENDPOINTS", and "CLUSTER_ISTIO".
 * @param {number} request.pageSize
 *   A non-negative number that is the maximum number of results to return.
 *   When 0, use default page size.
 * @param {string} request.pageToken
 *   If this field is not empty then it must contain the `nextPageToken` value
 *   returned by a previous call to this method.  Using this field causes the
 *   method to return additional results from the previous method call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Service]{@link google.monitoring.v3.Service} on 'data' event.
 */
  listServicesStream(
      request?: protosTypes.google.monitoring.v3.IListServicesRequest,
      options?: gax.CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.listServices.createStream(
      this._innerApiCalls.listServices as gax.GaxCall,
      request,
      callSettings
    );
  }
  listServiceLevelObjectives(
      request: protosTypes.google.monitoring.v3.IListServiceLevelObjectivesRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.monitoring.v3.IServiceLevelObjective[],
        protosTypes.google.monitoring.v3.IListServiceLevelObjectivesRequest|null,
        protosTypes.google.monitoring.v3.IListServiceLevelObjectivesResponse
      ]>;
  listServiceLevelObjectives(
      request: protosTypes.google.monitoring.v3.IListServiceLevelObjectivesRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.monitoring.v3.IServiceLevelObjective[],
          protosTypes.google.monitoring.v3.IListServiceLevelObjectivesRequest|null,
          protosTypes.google.monitoring.v3.IListServiceLevelObjectivesResponse>): void;
/**
 * List the `ServiceLevelObjective`s for the given `Service`.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the parent `Service`.
 *   Of the form `projects/{project_id}/services/{service_id}`.
 * @param {string} request.filter
 *   A filter specifying what `ServiceLevelObjective`s to return.
 * @param {number} request.pageSize
 *   A non-negative number that is the maximum number of results to return.
 *   When 0, use default page size.
 * @param {string} request.pageToken
 *   If this field is not empty then it must contain the `nextPageToken` value
 *   returned by a previous call to this method.  Using this field causes the
 *   method to return additional results from the previous method call.
 * @param {google.monitoring.v3.ServiceLevelObjective.View} request.view
 *   View of the `ServiceLevelObjective`s to return. If `DEFAULT`, return each
 *   `ServiceLevelObjective` as originally defined. If `EXPLICIT` and the
 *   `ServiceLevelObjective` is defined in terms of a `BasicSli`, replace the
 *   `BasicSli` with a `RequestBasedSli` spelling out how the SLI is computed.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [ServiceLevelObjective]{@link google.monitoring.v3.ServiceLevelObjective}.
 *   The client library support auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [ServiceLevelObjective]{@link google.monitoring.v3.ServiceLevelObjective} that corresponds to
 *   the one page received from the API server.
 *   If the second element is not null it contains the request object of type [ListServiceLevelObjectivesRequest]{@link google.monitoring.v3.ListServiceLevelObjectivesRequest}
 *   that can be used to obtain the next page of the results.
 *   If it is null, the next page does not exist.
 *   The third element contains the raw response received from the API server. Its type is
 *   [ListServiceLevelObjectivesResponse]{@link google.monitoring.v3.ListServiceLevelObjectivesResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  listServiceLevelObjectives(
      request: protosTypes.google.monitoring.v3.IListServiceLevelObjectivesRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.monitoring.v3.IServiceLevelObjective[],
          protosTypes.google.monitoring.v3.IListServiceLevelObjectivesRequest|null,
          protosTypes.google.monitoring.v3.IListServiceLevelObjectivesResponse>,
      callback?: Callback<
          protosTypes.google.monitoring.v3.IServiceLevelObjective[],
          protosTypes.google.monitoring.v3.IListServiceLevelObjectivesRequest|null,
          protosTypes.google.monitoring.v3.IListServiceLevelObjectivesResponse>):
      Promise<[
        protosTypes.google.monitoring.v3.IServiceLevelObjective[],
        protosTypes.google.monitoring.v3.IListServiceLevelObjectivesRequest|null,
        protosTypes.google.monitoring.v3.IListServiceLevelObjectivesResponse
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    return this._innerApiCalls.listServiceLevelObjectives(request, options, callback);
  }

/**
 * Equivalent to {@link listServiceLevelObjectives}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link listServiceLevelObjectives} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the parent `Service`.
 *   Of the form `projects/{project_id}/services/{service_id}`.
 * @param {string} request.filter
 *   A filter specifying what `ServiceLevelObjective`s to return.
 * @param {number} request.pageSize
 *   A non-negative number that is the maximum number of results to return.
 *   When 0, use default page size.
 * @param {string} request.pageToken
 *   If this field is not empty then it must contain the `nextPageToken` value
 *   returned by a previous call to this method.  Using this field causes the
 *   method to return additional results from the previous method call.
 * @param {google.monitoring.v3.ServiceLevelObjective.View} request.view
 *   View of the `ServiceLevelObjective`s to return. If `DEFAULT`, return each
 *   `ServiceLevelObjective` as originally defined. If `EXPLICIT` and the
 *   `ServiceLevelObjective` is defined in terms of a `BasicSli`, replace the
 *   `BasicSli` with a `RequestBasedSli` spelling out how the SLI is computed.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [ServiceLevelObjective]{@link google.monitoring.v3.ServiceLevelObjective} on 'data' event.
 */
  listServiceLevelObjectivesStream(
      request?: protosTypes.google.monitoring.v3.IListServiceLevelObjectivesRequest,
      options?: gax.CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.listServiceLevelObjectives.createStream(
      this._innerApiCalls.listServiceLevelObjectives as gax.GaxCall,
      request,
      callSettings
    );
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified folderService resource name string.
   *
   * @param {string} folder
   * @param {string} service
   * @returns {string} Resource name string.
   */
  folderServicePath(folder:string,service:string) {
    return this._pathTemplates.folderServicePathTemplate.render({
      folder: folder,
      service: service,
    });
  }

  /**
   * Parse the folder from FolderService resource.
   *
   * @param {string} folderServiceName
   *   A fully-qualified path representing folder_service resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderServiceName(folderServiceName: string) {
    return this._pathTemplates.folderServicePathTemplate.match(folderServiceName).folder;
  }

  /**
   * Parse the service from FolderService resource.
   *
   * @param {string} folderServiceName
   *   A fully-qualified path representing folder_service resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromFolderServiceName(folderServiceName: string) {
    return this._pathTemplates.folderServicePathTemplate.match(folderServiceName).service;
  }

  /**
   * Return a fully-qualified folderServiceServiceLevelObjective resource name string.
   *
   * @param {string} folder
   * @param {string} service
   * @param {string} service_level_objective
   * @returns {string} Resource name string.
   */
  folderServiceServiceLevelObjectivePath(folder:string,service:string,serviceLevelObjective:string) {
    return this._pathTemplates.folderServiceServiceLevelObjectivePathTemplate.render({
      folder: folder,
      service: service,
      service_level_objective: serviceLevelObjective,
    });
  }

  /**
   * Parse the folder from FolderServiceServiceLevelObjective resource.
   *
   * @param {string} folderServiceServiceLevelObjectiveName
   *   A fully-qualified path representing folder_service_service_level_objective resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderServiceServiceLevelObjectiveName(folderServiceServiceLevelObjectiveName: string) {
    return this._pathTemplates.folderServiceServiceLevelObjectivePathTemplate.match(folderServiceServiceLevelObjectiveName).folder;
  }

  /**
   * Parse the service from FolderServiceServiceLevelObjective resource.
   *
   * @param {string} folderServiceServiceLevelObjectiveName
   *   A fully-qualified path representing folder_service_service_level_objective resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromFolderServiceServiceLevelObjectiveName(folderServiceServiceLevelObjectiveName: string) {
    return this._pathTemplates.folderServiceServiceLevelObjectivePathTemplate.match(folderServiceServiceLevelObjectiveName).service;
  }

  /**
   * Parse the service_level_objective from FolderServiceServiceLevelObjective resource.
   *
   * @param {string} folderServiceServiceLevelObjectiveName
   *   A fully-qualified path representing folder_service_service_level_objective resource.
   * @returns {string} A string representing the service_level_objective.
   */
  matchServiceLevelObjectiveFromFolderServiceServiceLevelObjectiveName(folderServiceServiceLevelObjectiveName: string) {
    return this._pathTemplates.folderServiceServiceLevelObjectivePathTemplate.match(folderServiceServiceLevelObjectiveName).service_level_objective;
  }

  /**
   * Return a fully-qualified folderUptimeCheckConfig resource name string.
   *
   * @param {string} folder
   * @param {string} uptime_check_config
   * @returns {string} Resource name string.
   */
  folderUptimeCheckConfigPath(folder:string,uptimeCheckConfig:string) {
    return this._pathTemplates.folderUptimeCheckConfigPathTemplate.render({
      folder: folder,
      uptime_check_config: uptimeCheckConfig,
    });
  }

  /**
   * Parse the folder from FolderUptimeCheckConfig resource.
   *
   * @param {string} folderUptimeCheckConfigName
   *   A fully-qualified path representing folder_uptime_check_config resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderUptimeCheckConfigName(folderUptimeCheckConfigName: string) {
    return this._pathTemplates.folderUptimeCheckConfigPathTemplate.match(folderUptimeCheckConfigName).folder;
  }

  /**
   * Parse the uptime_check_config from FolderUptimeCheckConfig resource.
   *
   * @param {string} folderUptimeCheckConfigName
   *   A fully-qualified path representing folder_uptime_check_config resource.
   * @returns {string} A string representing the uptime_check_config.
   */
  matchUptimeCheckConfigFromFolderUptimeCheckConfigName(folderUptimeCheckConfigName: string) {
    return this._pathTemplates.folderUptimeCheckConfigPathTemplate.match(folderUptimeCheckConfigName).uptime_check_config;
  }

  /**
   * Return a fully-qualified organizationService resource name string.
   *
   * @param {string} organization
   * @param {string} service
   * @returns {string} Resource name string.
   */
  organizationServicePath(organization:string,service:string) {
    return this._pathTemplates.organizationServicePathTemplate.render({
      organization: organization,
      service: service,
    });
  }

  /**
   * Parse the organization from OrganizationService resource.
   *
   * @param {string} organizationServiceName
   *   A fully-qualified path representing organization_service resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationServiceName(organizationServiceName: string) {
    return this._pathTemplates.organizationServicePathTemplate.match(organizationServiceName).organization;
  }

  /**
   * Parse the service from OrganizationService resource.
   *
   * @param {string} organizationServiceName
   *   A fully-qualified path representing organization_service resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromOrganizationServiceName(organizationServiceName: string) {
    return this._pathTemplates.organizationServicePathTemplate.match(organizationServiceName).service;
  }

  /**
   * Return a fully-qualified organizationServiceServiceLevelObjective resource name string.
   *
   * @param {string} organization
   * @param {string} service
   * @param {string} service_level_objective
   * @returns {string} Resource name string.
   */
  organizationServiceServiceLevelObjectivePath(organization:string,service:string,serviceLevelObjective:string) {
    return this._pathTemplates.organizationServiceServiceLevelObjectivePathTemplate.render({
      organization: organization,
      service: service,
      service_level_objective: serviceLevelObjective,
    });
  }

  /**
   * Parse the organization from OrganizationServiceServiceLevelObjective resource.
   *
   * @param {string} organizationServiceServiceLevelObjectiveName
   *   A fully-qualified path representing organization_service_service_level_objective resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationServiceServiceLevelObjectiveName(organizationServiceServiceLevelObjectiveName: string) {
    return this._pathTemplates.organizationServiceServiceLevelObjectivePathTemplate.match(organizationServiceServiceLevelObjectiveName).organization;
  }

  /**
   * Parse the service from OrganizationServiceServiceLevelObjective resource.
   *
   * @param {string} organizationServiceServiceLevelObjectiveName
   *   A fully-qualified path representing organization_service_service_level_objective resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromOrganizationServiceServiceLevelObjectiveName(organizationServiceServiceLevelObjectiveName: string) {
    return this._pathTemplates.organizationServiceServiceLevelObjectivePathTemplate.match(organizationServiceServiceLevelObjectiveName).service;
  }

  /**
   * Parse the service_level_objective from OrganizationServiceServiceLevelObjective resource.
   *
   * @param {string} organizationServiceServiceLevelObjectiveName
   *   A fully-qualified path representing organization_service_service_level_objective resource.
   * @returns {string} A string representing the service_level_objective.
   */
  matchServiceLevelObjectiveFromOrganizationServiceServiceLevelObjectiveName(organizationServiceServiceLevelObjectiveName: string) {
    return this._pathTemplates.organizationServiceServiceLevelObjectivePathTemplate.match(organizationServiceServiceLevelObjectiveName).service_level_objective;
  }

  /**
   * Return a fully-qualified organizationUptimeCheckConfig resource name string.
   *
   * @param {string} organization
   * @param {string} uptime_check_config
   * @returns {string} Resource name string.
   */
  organizationUptimeCheckConfigPath(organization:string,uptimeCheckConfig:string) {
    return this._pathTemplates.organizationUptimeCheckConfigPathTemplate.render({
      organization: organization,
      uptime_check_config: uptimeCheckConfig,
    });
  }

  /**
   * Parse the organization from OrganizationUptimeCheckConfig resource.
   *
   * @param {string} organizationUptimeCheckConfigName
   *   A fully-qualified path representing organization_uptime_check_config resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationUptimeCheckConfigName(organizationUptimeCheckConfigName: string) {
    return this._pathTemplates.organizationUptimeCheckConfigPathTemplate.match(organizationUptimeCheckConfigName).organization;
  }

  /**
   * Parse the uptime_check_config from OrganizationUptimeCheckConfig resource.
   *
   * @param {string} organizationUptimeCheckConfigName
   *   A fully-qualified path representing organization_uptime_check_config resource.
   * @returns {string} A string representing the uptime_check_config.
   */
  matchUptimeCheckConfigFromOrganizationUptimeCheckConfigName(organizationUptimeCheckConfigName: string) {
    return this._pathTemplates.organizationUptimeCheckConfigPathTemplate.match(organizationUptimeCheckConfigName).uptime_check_config;
  }

  /**
   * Return a fully-qualified projectService resource name string.
   *
   * @param {string} project
   * @param {string} service
   * @returns {string} Resource name string.
   */
  projectServicePath(project:string,service:string) {
    return this._pathTemplates.projectServicePathTemplate.render({
      project: project,
      service: service,
    });
  }

  /**
   * Parse the project from ProjectService resource.
   *
   * @param {string} projectServiceName
   *   A fully-qualified path representing project_service resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectServiceName(projectServiceName: string) {
    return this._pathTemplates.projectServicePathTemplate.match(projectServiceName).project;
  }

  /**
   * Parse the service from ProjectService resource.
   *
   * @param {string} projectServiceName
   *   A fully-qualified path representing project_service resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromProjectServiceName(projectServiceName: string) {
    return this._pathTemplates.projectServicePathTemplate.match(projectServiceName).service;
  }

  /**
   * Return a fully-qualified projectServiceServiceLevelObjective resource name string.
   *
   * @param {string} project
   * @param {string} service
   * @param {string} service_level_objective
   * @returns {string} Resource name string.
   */
  projectServiceServiceLevelObjectivePath(project:string,service:string,serviceLevelObjective:string) {
    return this._pathTemplates.projectServiceServiceLevelObjectivePathTemplate.render({
      project: project,
      service: service,
      service_level_objective: serviceLevelObjective,
    });
  }

  /**
   * Parse the project from ProjectServiceServiceLevelObjective resource.
   *
   * @param {string} projectServiceServiceLevelObjectiveName
   *   A fully-qualified path representing project_service_service_level_objective resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectServiceServiceLevelObjectiveName(projectServiceServiceLevelObjectiveName: string) {
    return this._pathTemplates.projectServiceServiceLevelObjectivePathTemplate.match(projectServiceServiceLevelObjectiveName).project;
  }

  /**
   * Parse the service from ProjectServiceServiceLevelObjective resource.
   *
   * @param {string} projectServiceServiceLevelObjectiveName
   *   A fully-qualified path representing project_service_service_level_objective resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromProjectServiceServiceLevelObjectiveName(projectServiceServiceLevelObjectiveName: string) {
    return this._pathTemplates.projectServiceServiceLevelObjectivePathTemplate.match(projectServiceServiceLevelObjectiveName).service;
  }

  /**
   * Parse the service_level_objective from ProjectServiceServiceLevelObjective resource.
   *
   * @param {string} projectServiceServiceLevelObjectiveName
   *   A fully-qualified path representing project_service_service_level_objective resource.
   * @returns {string} A string representing the service_level_objective.
   */
  matchServiceLevelObjectiveFromProjectServiceServiceLevelObjectiveName(projectServiceServiceLevelObjectiveName: string) {
    return this._pathTemplates.projectServiceServiceLevelObjectivePathTemplate.match(projectServiceServiceLevelObjectiveName).service_level_objective;
  }

  /**
   * Return a fully-qualified projectUptimeCheckConfig resource name string.
   *
   * @param {string} project
   * @param {string} uptime_check_config
   * @returns {string} Resource name string.
   */
  projectUptimeCheckConfigPath(project:string,uptimeCheckConfig:string) {
    return this._pathTemplates.projectUptimeCheckConfigPathTemplate.render({
      project: project,
      uptime_check_config: uptimeCheckConfig,
    });
  }

  /**
   * Parse the project from ProjectUptimeCheckConfig resource.
   *
   * @param {string} projectUptimeCheckConfigName
   *   A fully-qualified path representing project_uptime_check_config resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectUptimeCheckConfigName(projectUptimeCheckConfigName: string) {
    return this._pathTemplates.projectUptimeCheckConfigPathTemplate.match(projectUptimeCheckConfigName).project;
  }

  /**
   * Parse the uptime_check_config from ProjectUptimeCheckConfig resource.
   *
   * @param {string} projectUptimeCheckConfigName
   *   A fully-qualified path representing project_uptime_check_config resource.
   * @returns {string} A string representing the uptime_check_config.
   */
  matchUptimeCheckConfigFromProjectUptimeCheckConfigName(projectUptimeCheckConfigName: string) {
    return this._pathTemplates.projectUptimeCheckConfigPathTemplate.match(projectUptimeCheckConfigName).uptime_check_config;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    if (!this._terminated) {
      return this.serviceMonitoringServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
