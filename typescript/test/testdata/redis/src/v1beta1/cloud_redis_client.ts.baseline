// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {APICallback, Callback, CallOptions, Descriptors, ClientOptions, LROperation} from 'google-gax';
import * as path from 'path';

import * as protosTypes from '../../protos/protos';
import * as gapicConfig from './cloud_redis_client_config.json';

const version = require('../../../package.json').version;

/**
 *  Configures and manages Cloud Memorystore for Redis instances
 * 
 *  Google Cloud Memorystore for Redis v1beta1
 * 
 *  The `redis.googleapis.com` service implements the Google Cloud Memorystore
 *  for Redis API and defines the following resource model for managing Redis
 *  instances:
 *  * The service works with a collection of cloud projects, named: `/projects/*`
 *  * Each project has a collection of available locations, named: `/locations/*`
 *  * Each location has a collection of Redis instances, named: `/instances/*`
 *  * As such, Redis instances are resources of the form:
 *    `/projects/{project_id}/locations/{location_id}/instances/{instance_id}`
 * 
 *  Note that location_id must be refering to a GCP `region`; for example:
 *  * `projects/redpepper-1290/locations/us-central1/instances/my-redis`
 * @class
 * @memberof v1beta1
 */
export class CloudRedisClient {
  private _descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}};
  private _cloudRedisStub: Promise<{[name: string]: Function}>;
  private _innerApiCalls: {[name: string]: Function};
  private _pathTemplates: {[name: string]: gax.PathTemplate};
  private _terminated = false;
  auth: gax.GoogleAuth;

  /**
   * Construct an instance of CloudRedisClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {function} [options.promise] - Custom promise module to use instead
   *     of native Promises.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof CloudRedisClient;
    const servicePath = opts && opts.servicePath ?
        opts.servicePath :
        ((opts && opts.apiEndpoint) ? opts.apiEndpoint :
                                      staticMembers.servicePath);
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = (typeof window !== 'undefined');
    if (isBrowser){
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    const gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof CloudRedisClient).scopes;
    const gaxGrpc = new gaxModule.GrpcClient(opts);

    // Save the auth object to the client, for use by other methods.
    this.auth = (gaxGrpc.auth as gax.GoogleAuth);

    // Determine the client header string.
    const clientHeader = [
      `gax/${gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
    const protos = gaxGrpc.loadProto(
      opts.fallback ?
        require("../../protos/protos.json") :
        nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this._pathTemplates = {
      locationPathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      instancePathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/instances/{instance}'
      ),
    };

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const protoFilesRoot = opts.fallback?
      gaxModule.protobuf.Root.fromJSON(require("../../protos/protos.json")) :
      gaxModule.protobuf.loadSync(nodejsProtoPath);

    const operationsClient = gaxModule.lro({
      auth: this.auth,
      grpc: 'grpc' in gaxGrpc ? gaxGrpc.grpc : undefined
    }).operationsClient(opts);
    const createInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.redis.v1beta1.Instance') as gax.protobuf.Type;
    const createInstanceMetadata = protoFilesRoot.lookup(
      '.google.protobuf.Any') as gax.protobuf.Type;
    const updateInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.redis.v1beta1.Instance') as gax.protobuf.Type;
    const updateInstanceMetadata = protoFilesRoot.lookup(
      '.google.protobuf.Any') as gax.protobuf.Type;
    const importInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.redis.v1beta1.Instance') as gax.protobuf.Type;
    const importInstanceMetadata = protoFilesRoot.lookup(
      '.google.protobuf.Any') as gax.protobuf.Type;
    const exportInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.redis.v1beta1.Instance') as gax.protobuf.Type;
    const exportInstanceMetadata = protoFilesRoot.lookup(
      '.google.protobuf.Any') as gax.protobuf.Type;
    const failoverInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.redis.v1beta1.Instance') as gax.protobuf.Type;
    const failoverInstanceMetadata = protoFilesRoot.lookup(
      '.google.protobuf.Any') as gax.protobuf.Type;
    const deleteInstanceResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteInstanceMetadata = protoFilesRoot.lookup(
      '.google.protobuf.Any') as gax.protobuf.Type;

    this._descriptors.longrunning = {
      createInstance: new gaxModule.LongrunningDescriptor(
        operationsClient,
        createInstanceResponse.decode.bind(createInstanceResponse),
        createInstanceMetadata.decode.bind(createInstanceMetadata)),
      updateInstance: new gaxModule.LongrunningDescriptor(
        operationsClient,
        updateInstanceResponse.decode.bind(updateInstanceResponse),
        updateInstanceMetadata.decode.bind(updateInstanceMetadata)),
      importInstance: new gaxModule.LongrunningDescriptor(
        operationsClient,
        importInstanceResponse.decode.bind(importInstanceResponse),
        importInstanceMetadata.decode.bind(importInstanceMetadata)),
      exportInstance: new gaxModule.LongrunningDescriptor(
        operationsClient,
        exportInstanceResponse.decode.bind(exportInstanceResponse),
        exportInstanceMetadata.decode.bind(exportInstanceMetadata)),
      failoverInstance: new gaxModule.LongrunningDescriptor(
        operationsClient,
        failoverInstanceResponse.decode.bind(failoverInstanceResponse),
        failoverInstanceMetadata.decode.bind(failoverInstanceMetadata)),
      deleteInstance: new gaxModule.LongrunningDescriptor(
        operationsClient,
        deleteInstanceResponse.decode.bind(deleteInstanceResponse),
        deleteInstanceMetadata.decode.bind(deleteInstanceMetadata))
    };

    // Put together the default options sent with requests.
    const defaults = gaxGrpc.constructSettings(
        'google.cloud.redis.v1beta1.CloudRedis', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};

    // Put together the "service stub" for
    // google.cloud.redis.v1beta1.CloudRedis.
    this._cloudRedisStub = gaxGrpc.createStub(
        opts.fallback ?
          (protos as protobuf.Root).lookupService('google.cloud.redis.v1beta1.CloudRedis') :
          // tslint:disable-next-line no-any
          (protos as any).google.cloud.redis.v1beta1.CloudRedis,
        opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const cloudRedisStubMethods =
        ['listInstances', 'getInstance', 'createInstance', 'updateInstance', 'importInstance', 'exportInstance', 'failoverInstance', 'deleteInstance'];

    for (const methodName of cloudRedisStubMethods) {
      const innerCallPromise = this._cloudRedisStub.then(
        stub => (...args: Array<{}>) => {
          return stub[methodName].apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const apiCall = gaxModule.createApiCall(
        innerCallPromise,
        defaults[methodName],
        this._descriptors.page[methodName] ||
            this._descriptors.stream[methodName] ||
            this._descriptors.longrunning[methodName]
      );

      this._innerApiCalls[methodName] = (
        argument: {},
        callOptions?: CallOptions,
        callback?: APICallback
      ) => {
         if (this._terminated) {
            return Promise.reject('The client has already been closed.');
         }
         return apiCall(argument, callOptions, callback);
      };
    }
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'redis.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'redis.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  listInstances(
      request: protosTypes.google.cloud.redis.v1beta1.IListInstancesRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.redis.v1beta1.IListInstancesResponse,
        protosTypes.google.cloud.redis.v1beta1.IListInstancesRequest|undefined, {}|undefined
      ]>;
  listInstances(
      request: protosTypes.google.cloud.redis.v1beta1.IListInstancesRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.redis.v1beta1.IListInstancesResponse,
          protosTypes.google.cloud.redis.v1beta1.IListInstancesRequest|undefined,
          {}|undefined>): void;
/**
 * Lists all Redis instances owned by a project in either the specified
 * location (region) or all locations.
 *
 * The location should have the following format:
 * * `projects/{project_id}/locations/{location_id}`
 *
 * If `location_id` is specified as `-` (wildcard), then all regions
 * available to the project are queried, and the results are aggregated.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent 
 *   Required. The resource name of the instance location using the form: 
 *       `projects/{project_id}/locations/{location_id}` 
 *   where `location_id` refers to a GCP region.
 * @param {number} request.pageSize 
 *   The maximum number of items to return. 
 *   
 *   If not specified, a default value of 1000 will be used by the service. 
 *   Regardless of the page_size value, the response may include a partial list 
 *   and a caller should only rely on response's 
 *   [next_page_token][CloudRedis.ListInstancesResponse.next_page_token] 
 *   to determine if there are more instances left to be queried.
 * @param {string} request.pageToken 
 *   The next_page_token value returned from a previous List request, 
 *   if any.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ListInstancesResponse]{@link google.cloud.redis.v1beta1.ListInstancesResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  listInstances(
      request: protosTypes.google.cloud.redis.v1beta1.IListInstancesRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.redis.v1beta1.IListInstancesResponse,
          protosTypes.google.cloud.redis.v1beta1.IListInstancesRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.redis.v1beta1.IListInstancesResponse,
          protosTypes.google.cloud.redis.v1beta1.IListInstancesRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.redis.v1beta1.IListInstancesResponse,
        protosTypes.google.cloud.redis.v1beta1.IListInstancesRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    return this._innerApiCalls.listInstances(request, options, callback);
  }
  getInstance(
      request: protosTypes.google.cloud.redis.v1beta1.IGetInstanceRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.cloud.redis.v1beta1.IInstance,
        protosTypes.google.cloud.redis.v1beta1.IGetInstanceRequest|undefined, {}|undefined
      ]>;
  getInstance(
      request: protosTypes.google.cloud.redis.v1beta1.IGetInstanceRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.cloud.redis.v1beta1.IInstance,
          protosTypes.google.cloud.redis.v1beta1.IGetInstanceRequest|undefined,
          {}|undefined>): void;
/**
 * Gets the details of a specific Redis instance.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name 
 *   Required. Redis instance resource name using the form: 
 *       `projects/{project_id}/locations/{location_id}/instances/{instance_id}` 
 *   where `location_id` refers to a GCP region.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Instance]{@link google.cloud.redis.v1beta1.Instance}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getInstance(
      request: protosTypes.google.cloud.redis.v1beta1.IGetInstanceRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.cloud.redis.v1beta1.IInstance,
          protosTypes.google.cloud.redis.v1beta1.IGetInstanceRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.cloud.redis.v1beta1.IInstance,
          protosTypes.google.cloud.redis.v1beta1.IGetInstanceRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.cloud.redis.v1beta1.IInstance,
        protosTypes.google.cloud.redis.v1beta1.IGetInstanceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    return this._innerApiCalls.getInstance(request, options, callback);
  }

  createInstance(
      request: protosTypes.google.cloud.redis.v1beta1.ICreateInstanceRequest,
      options?: gax.CallOptions):
      Promise<[
        LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createInstance(
      request: protosTypes.google.cloud.redis.v1beta1.ICreateInstanceRequest,
      options: gax.CallOptions,
      callback: Callback<
          LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
          protosTypes.google.longrunning.IOperation|undefined,
          {}|undefined>): void;
/**
 * Creates a Redis instance based on the specified tier and memory size.
 *
 * By default, the instance is accessible from the project's
 * [default network](/compute/docs/networks-and-firewalls#networks).
 *
 * The creation is executed asynchronously and callers may check the returned
 * operation to track its progress. Once the operation is completed the Redis
 * instance will be fully functional. Completed longrunning.Operation will
 * contain the new instance object in the response field.
 *
 * The returned operation is automatically deleted after a few hours, so there
 * is no need to call DeleteOperation.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent 
 *   Required. The resource name of the instance location using the form: 
 *       `projects/{project_id}/locations/{location_id}` 
 *   where `location_id` refers to a GCP region.
 * @param {string} request.instanceId 
 *   Required. The logical name of the Redis instance in the customer project 
 *   with the following restrictions: 
 *   
 *   * Must contain only lowercase letters, numbers, and hyphens. 
 *   * Must start with a letter. 
 *   * Must be between 1-40 characters. 
 *   * Must end with a number or a letter. 
 *   * Must be unique within the customer project / location
 * @param {google.cloud.redis.v1beta1.Instance} request.instance 
 *   Required. A Redis [Instance] resource
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  createInstance(
      request: protosTypes.google.cloud.redis.v1beta1.ICreateInstanceRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
          protosTypes.google.longrunning.IOperation|undefined, {}|undefined>,
      callback?: Callback<
          LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
          protosTypes.google.longrunning.IOperation|undefined,
          {}|undefined>):
      Promise<[
        LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    return this._innerApiCalls.createInstance(request, options, callback);
  }
  updateInstance(
      request: protosTypes.google.cloud.redis.v1beta1.IUpdateInstanceRequest,
      options?: gax.CallOptions):
      Promise<[
        LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateInstance(
      request: protosTypes.google.cloud.redis.v1beta1.IUpdateInstanceRequest,
      options: gax.CallOptions,
      callback: Callback<
          LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
          protosTypes.google.longrunning.IOperation|undefined,
          {}|undefined>): void;
/**
 * Updates the metadata and configuration of a specific Redis instance.
 *
 * Completed longrunning.Operation will contain the new instance object
 * in the response field. The returned operation is automatically deleted
 * after a few hours, so there is no need to call DeleteOperation.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.FieldMask} request.updateMask 
 *   Required. Mask of fields to update. At least one path must be supplied in 
 *   this field. The elements of the repeated paths field may only include these 
 *   fields from [Instance][google.cloud.redis.v1beta1.Instance]: 
 *   
 *    *   `displayName` 
 *    *   `labels` 
 *    *   `memorySizeGb` 
 *    *   `redisConfig`
 * @param {google.cloud.redis.v1beta1.Instance} request.instance 
 *   Required. Update description. 
 *   Only fields specified in update_mask are updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  updateInstance(
      request: protosTypes.google.cloud.redis.v1beta1.IUpdateInstanceRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
          protosTypes.google.longrunning.IOperation|undefined, {}|undefined>,
      callback?: Callback<
          LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
          protosTypes.google.longrunning.IOperation|undefined,
          {}|undefined>):
      Promise<[
        LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'instance_name': request.instance!.name || '',
    });
    return this._innerApiCalls.updateInstance(request, options, callback);
  }
  importInstance(
      request: protosTypes.google.cloud.redis.v1beta1.IImportInstanceRequest,
      options?: gax.CallOptions):
      Promise<[
        LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  importInstance(
      request: protosTypes.google.cloud.redis.v1beta1.IImportInstanceRequest,
      options: gax.CallOptions,
      callback: Callback<
          LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
          protosTypes.google.longrunning.IOperation|undefined,
          {}|undefined>): void;
/**
 * Import a Redis RDB snapshot file from Cloud Storage into a Redis instance.
 *
 * Redis may stop serving during this operation. Instance state will be
 * IMPORTING for entire operation. When complete, the instance will contain
 * only data from the imported file.
 *
 * The returned operation is automatically deleted after a few hours, so
 * there is no need to call DeleteOperation.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name 
 *   Required. Redis instance resource name using the form: 
 *       `projects/{project_id}/locations/{location_id}/instances/{instance_id}` 
 *   where `location_id` refers to a GCP region.
 * @param {google.cloud.redis.v1beta1.InputConfig} request.inputConfig 
 *   Required. Specify data to be imported.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  importInstance(
      request: protosTypes.google.cloud.redis.v1beta1.IImportInstanceRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
          protosTypes.google.longrunning.IOperation|undefined, {}|undefined>,
      callback?: Callback<
          LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
          protosTypes.google.longrunning.IOperation|undefined,
          {}|undefined>):
      Promise<[
        LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    return this._innerApiCalls.importInstance(request, options, callback);
  }
  exportInstance(
      request: protosTypes.google.cloud.redis.v1beta1.IExportInstanceRequest,
      options?: gax.CallOptions):
      Promise<[
        LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  exportInstance(
      request: protosTypes.google.cloud.redis.v1beta1.IExportInstanceRequest,
      options: gax.CallOptions,
      callback: Callback<
          LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
          protosTypes.google.longrunning.IOperation|undefined,
          {}|undefined>): void;
/**
 * Export Redis instance data into a Redis RDB format file in Cloud Storage.
 *
 * Redis will continue serving during this operation.
 *
 * The returned operation is automatically deleted after a few hours, so
 * there is no need to call DeleteOperation.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name 
 *   Required. Redis instance resource name using the form: 
 *       `projects/{project_id}/locations/{location_id}/instances/{instance_id}` 
 *   where `location_id` refers to a GCP region.
 * @param {google.cloud.redis.v1beta1.OutputConfig} request.outputConfig 
 *   Required. Specify data to be exported.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  exportInstance(
      request: protosTypes.google.cloud.redis.v1beta1.IExportInstanceRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
          protosTypes.google.longrunning.IOperation|undefined, {}|undefined>,
      callback?: Callback<
          LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
          protosTypes.google.longrunning.IOperation|undefined,
          {}|undefined>):
      Promise<[
        LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    return this._innerApiCalls.exportInstance(request, options, callback);
  }
  failoverInstance(
      request: protosTypes.google.cloud.redis.v1beta1.IFailoverInstanceRequest,
      options?: gax.CallOptions):
      Promise<[
        LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  failoverInstance(
      request: protosTypes.google.cloud.redis.v1beta1.IFailoverInstanceRequest,
      options: gax.CallOptions,
      callback: Callback<
          LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
          protosTypes.google.longrunning.IOperation|undefined,
          {}|undefined>): void;
/**
 * Initiates a failover of the master node to current replica node for a
 * specific STANDARD tier Cloud Memorystore for Redis instance.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name 
 *   Required. Redis instance resource name using the form: 
 *       `projects/{project_id}/locations/{location_id}/instances/{instance_id}` 
 *   where `location_id` refers to a GCP region.
 * @param {google.cloud.redis.v1beta1.FailoverInstanceRequest.DataProtectionMode} [request.dataProtectionMode] 
 *   Optional. Available data protection modes that the user can choose. If it's 
 *   unspecified, data protection mode will be LIMITED_DATA_LOSS by default.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  failoverInstance(
      request: protosTypes.google.cloud.redis.v1beta1.IFailoverInstanceRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
          protosTypes.google.longrunning.IOperation|undefined, {}|undefined>,
      callback?: Callback<
          LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
          protosTypes.google.longrunning.IOperation|undefined,
          {}|undefined>):
      Promise<[
        LROperation<protosTypes.google.cloud.redis.v1beta1.IInstance, protosTypes.google.protobuf.IAny>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    return this._innerApiCalls.failoverInstance(request, options, callback);
  }
  deleteInstance(
      request: protosTypes.google.cloud.redis.v1beta1.IDeleteInstanceRequest,
      options?: gax.CallOptions):
      Promise<[
        LROperation<protosTypes.google.protobuf.IEmpty, protosTypes.google.protobuf.IAny>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteInstance(
      request: protosTypes.google.cloud.redis.v1beta1.IDeleteInstanceRequest,
      options: gax.CallOptions,
      callback: Callback<
          LROperation<protosTypes.google.protobuf.IEmpty, protosTypes.google.protobuf.IAny>,
          protosTypes.google.longrunning.IOperation|undefined,
          {}|undefined>): void;
/**
 * Deletes a specific Redis instance.  Instance stops serving and data is
 * deleted.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name 
 *   Required. Redis instance resource name using the form: 
 *       `projects/{project_id}/locations/{location_id}/instances/{instance_id}` 
 *   where `location_id` refers to a GCP region.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  deleteInstance(
      request: protosTypes.google.cloud.redis.v1beta1.IDeleteInstanceRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          LROperation<protosTypes.google.protobuf.IEmpty, protosTypes.google.protobuf.IAny>,
          protosTypes.google.longrunning.IOperation|undefined, {}|undefined>,
      callback?: Callback<
          LROperation<protosTypes.google.protobuf.IEmpty, protosTypes.google.protobuf.IAny>,
          protosTypes.google.longrunning.IOperation|undefined,
          {}|undefined>):
      Promise<[
        LROperation<protosTypes.google.protobuf.IEmpty, protosTypes.google.protobuf.IAny>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    return this._innerApiCalls.deleteInstance(request, options, callback);
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project:string,location:string) {
    return this._pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this._pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this._pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified instance resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} instance
   * @returns {string} Resource name string.
   */
  instancePath(project:string,location:string,instance:string) {
    return this._pathTemplates.instancePathTemplate.render({
      project: project,
      location: location,
      instance: instance,
    });
  }

  /**
   * Parse the project from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInstanceName(instanceName: string) {
    return this._pathTemplates.instancePathTemplate.match(instanceName).project;
  }

  /**
   * Parse the location from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromInstanceName(instanceName: string) {
    return this._pathTemplates.instancePathTemplate.match(instanceName).location;
  }

  /**
   * Parse the instance from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromInstanceName(instanceName: string) {
    return this._pathTemplates.instancePathTemplate.match(instanceName).instance;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    if (!this._terminated) {
      return this._cloudRedisStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
