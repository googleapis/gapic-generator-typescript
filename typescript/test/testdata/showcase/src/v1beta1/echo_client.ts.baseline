// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import * as path from 'path';

import { Transform } from 'stream';
import * as protosTypes from '../../protos/protos';
import * as gapicConfig from './echo_client_config.json';

const version = require('../../../package.json').version;

export interface ClientOptions extends gax.GrpcClientOptions,
                                       gax.GoogleAuthOptions,
                                       gax.ClientStubOptions {
  libName?: string;
  libVersion?: string;
  clientConfig?: gax.ClientConfig;
  fallback?: boolean;
  apiEndpoint?: string;
}

interface Descriptors {
  page: {[name: string]: gax.PageDescriptor};
  stream: {[name: string]: gax.StreamDescriptor};
  longrunning: {[name: string]: gax.LongrunningDescriptor};
}

export interface Callback<
    ResponseObject, NextRequestObject, RawResponseObject> {
  (err: Error|null|undefined, value?: ResponseObject|null,
   nextRequest?: NextRequestObject, rawResponse?: RawResponseObject): void;
}

export interface Operation<ResultType, MetadataType> extends gax.Operation {
    promise(): Promise<[ResultType, MetadataType, protosTypes.google.longrunning.IOperation]>;
}


export interface PaginationCallback<
    RequestObject, ResponseObject, ResponseType> {
  (err: Error|null, values?: ResponseType[], nextPageRequest?: RequestObject,
   rawResponse?: ResponseObject): void;
}

export interface PaginationResponse<
    RequestObject, ResponseObject, ResponseType> {
  values?: ResponseType[];
  nextPageRequest?: RequestObject;
  rawResponse?: ResponseObject;
}


/**
 *  This service is used showcase the four main types of rpcs - unary, server
 *  side streaming, client side streaming, and bidirectional streaming. This
 *  service also exposes methods that explicitly implement server delay, and
 *  paginated calls.
 */
export class EchoClient {
  private _descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}};
  private _innerApiCalls: {[name: string]: Function};
  auth: gax.GoogleAuth;

  /**
   * Construct an instance of EchoClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {function} [options.promise] - Custom promise module to use instead
   *     of native Promises.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof EchoClient;
    const servicePath = opts && opts.servicePath ?
        opts.servicePath :
        ((opts && opts.apiEndpoint) ? opts.apiEndpoint :
                                      staticMembers.servicePath);
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = (typeof window !== 'undefined');
    if (isBrowser){
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    const gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof EchoClient).scopes;
    const gaxGrpc = new gaxModule.GrpcClient(opts);

    // Save the auth object to the client, for use by other methods.
    this.auth = (gaxGrpc.auth as gax.GoogleAuth);

    // Determine the client header string.
    const clientHeader = [
      `gax/${gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
    const protos = gaxGrpc.loadProto(
      opts.fallback ?
        require("../../protos/protos.json") :
        nodejsProtoPath
    );

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this._descriptors.page = {
      pagedExpand:
          new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'responses')
    };

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this._descriptors.stream = {
      expand: new gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),
      collect: new gaxModule.StreamDescriptor(gax.StreamType.CLIENT_STREAMING),
      chat: new gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING)
    };

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const protoFilesRoot = opts.fallback?
      gaxModule.protobuf.Root.fromJSON(require("../../protos/protos.json")) :
      gaxModule.protobuf.loadSync(nodejsProtoPath);

    const operationsClient = gaxModule.lro({
      auth: this.auth,
      grpc: 'grpc' in gaxGrpc ? gaxGrpc.grpc : undefined
    }).operationsClient(opts);
    const waitResponse = protoFilesRoot.lookup(
      '.google.showcase.v1beta1.WaitResponse') as gax.protobuf.Type;
    const waitMetadata = protoFilesRoot.lookup(
      '.google.showcase.v1beta1.WaitMetadata') as gax.protobuf.Type;

    this._descriptors.longrunning = {
      wait: new gaxModule.LongrunningDescriptor(
        operationsClient,
        waitResponse.decode.bind(waitResponse),
        waitMetadata.decode.bind(waitMetadata))
    };

    // Put together the default options sent with requests.
    const defaults = gaxGrpc.constructSettings(
        'google.showcase.v1beta1.Echo', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};

    // Put together the "service stub" for
    // google.showcase.v1beta1.Echo.
    const echoStub = gaxGrpc.createStub(
        opts.fallback ?
          (protos as protobuf.Root).lookupService('google.showcase.v1beta1.Echo') :
          // tslint:disable-next-line no-any
          (protos as any).google.showcase.v1beta1.Echo,
        opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const echoStubMethods =
        ['echo', 'expand', 'collect', 'chat', 'pagedExpand', 'wait'];

    for (const methodName of echoStubMethods) {
      const innerCallPromise = echoStub.then(
        (stub: {[method: string]: Function}) => (...args: Array<{}>) => {
          return stub[methodName].apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      this._innerApiCalls[methodName] = gaxModule.createApiCall(
        innerCallPromise,
        defaults[methodName],
        this._descriptors.page[methodName] ||
            this._descriptors.stream[methodName] || 
            this._descriptors.longrunning[methodName]
      );
    }
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'localhost';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'localhost';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 7469;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  echo(
      request: protosTypes.google.showcase.v1beta1.IEchoRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.showcase.v1beta1.IEchoResponse,
        protosTypes.google.showcase.v1beta1.IEchoRequest|undefined, {}|undefined
      ]>;
  echo(
      request: protosTypes.google.showcase.v1beta1.IEchoRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.showcase.v1beta1.IEchoResponse,
          protosTypes.google.showcase.v1beta1.IEchoRequest|undefined,
          {}|undefined>): void;
/**
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.content 
 *   The content to be echoed by the server.
 * @param {google.rpc.Status} request.error 
 *   The error to be thrown by the server.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [EchoResponse]{@link google.showcase.v1beta1.EchoResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  echo(
      request: protosTypes.google.showcase.v1beta1.IEchoRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.showcase.v1beta1.IEchoResponse,
          protosTypes.google.showcase.v1beta1.IEchoRequest|undefined, {}|undefined>,
      callback?: Callback<
          protosTypes.google.showcase.v1beta1.IEchoResponse,
          protosTypes.google.showcase.v1beta1.IEchoRequest|undefined,
          {}|undefined>):
      Promise<[
        protosTypes.google.showcase.v1beta1.IEchoResponse,
        protosTypes.google.showcase.v1beta1.IEchoRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    return this._innerApiCalls.echo(request, options, callback);
  }

/**
 * This method split the given content into words and will pass each word back
 * through the stream. This method showcases server-side streaming rpcs.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.content 
 *   The content that will be split into words and returned on the stream.
 * @param {google.rpc.Status} request.error 
 *   The error that is thrown after all words are sent on the stream.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [EchoResponse]{@link google.showcase.v1beta1.EchoResponse}.
 *   
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [EchoResponse]{@link google.showcase.v1beta1.EchoResponse} in a single response.
 *   The second element is the next request object if the response
 *   indicates the next page exists, or null. The third element is
 *   an object representing [EchoResponse]{@link google.showcase.v1beta1.EchoResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  expand(
      request?: protosTypes.google.showcase.v1beta1.IExpandRequest,
      options?: gax.CallOptions):
    gax.CancellableStream{
    request = request || {}; 
    options = options || {};
    return this._innerApiCalls.expand(request, options);
  }

  collect(
      options: gax.CallOptions,
      callback: Callback<
        protosTypes.google.showcase.v1beta1.IEchoResponse,
        protosTypes.google.showcase.v1beta1.IEchoRequest|undefined, {}|undefined>):
    gax.CancellableStream;
  collect(
      callback: Callback<
        protosTypes.google.showcase.v1beta1.IEchoResponse,
        protosTypes.google.showcase.v1beta1.IEchoRequest|undefined, {}|undefined>):
    gax.CancellableStream;
/**
 * This method will collect the words given to it. When the stream is closed
 * by the client, this method will return the a concatenation of the strings
 * passed to it. This method showcases client-side streaming rpcs.
 *
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream} - A writable stream which accepts objects representing 
 * [EchoRequest]{@link google.showcase.v1beta1.EchoRequest}.
 */
  collect(
      optionsOrCallback: gax.CallOptions|Callback<
        protosTypes.google.showcase.v1beta1.IEchoResponse,
        protosTypes.google.showcase.v1beta1.IEchoRequest|undefined, {}|undefined>,
      callback?: Callback<
        protosTypes.google.showcase.v1beta1.IEchoResponse,
        protosTypes.google.showcase.v1beta1.IEchoRequest|undefined, {}|undefined>):
    gax.CancellableStream {
    if (optionsOrCallback instanceof Function && callback === undefined) {
        callback = optionsOrCallback;
        optionsOrCallback = {};
    }
    optionsOrCallback = optionsOrCallback || {};
    return this._innerApiCalls.collect(null, optionsOrCallback, callback);
  }

/**
 * This method, upon receiving a request on the stream, the same content will
 * be passed  back on the stream. This method showcases bidirectional
 * streaming rpcs.
 *
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream} 
 *   An object stream which is both readable and writable. It accepts objects
 *   representing [EchoRequest]{@link google.showcase.v1beta1.EchoRequest} for write() method, and
 *   will emit objects representing [EchoResponse]{@link google.showcase.v1beta1.EchoResponse} on 'data' event asynchronously.
 */
  chat(
      options?: gax.CallOptions):
    gax.CancellableStream{
    options = options || {};
    return this._innerApiCalls.chat(options);
  }

  wait(
      request: protosTypes.google.showcase.v1beta1.IWaitRequest,
      options?: gax.CallOptions):
      Promise<[
        Operation<protosTypes.google.showcase.v1beta1.IWaitResponse, protosTypes.google.showcase.v1beta1.IWaitMetadata>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  wait(
      request: protosTypes.google.showcase.v1beta1.IWaitRequest,
      options: gax.CallOptions,
      callback: Callback<
          Operation<protosTypes.google.showcase.v1beta1.IWaitResponse, protosTypes.google.showcase.v1beta1.IWaitMetadata>,
          protosTypes.google.longrunning.IOperation|undefined,
          {}|undefined>): void;
/**
 * This method will wait the requested amount of and then return.
 * This method showcases how a client handles a request timing out.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.Timestamp} request.end_time 
 *   The time that this operation will complete.
 * @param {google.protobuf.Duration} request.ttl 
 *   The duration of this operation.
 * @param {google.rpc.Status} request.error 
 *   The error that will be returned by the server. If this code is specified 
 *   to be the OK rpc code, an empty response will be returned.
 * @param {google.showcase.v1beta1.WaitResponse} request.success 
 *   The response to be returned on operation completion.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  wait(
      request: protosTypes.google.showcase.v1beta1.IWaitRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          Operation<protosTypes.google.showcase.v1beta1.IWaitResponse, protosTypes.google.showcase.v1beta1.IWaitMetadata>,
          protosTypes.google.longrunning.IOperation|undefined, {}|undefined>,
      callback?: Callback<
          Operation<protosTypes.google.showcase.v1beta1.IWaitResponse, protosTypes.google.showcase.v1beta1.IWaitMetadata>,
          protosTypes.google.longrunning.IOperation|undefined,
          {}|undefined>):
      Promise<[
        Operation<protosTypes.google.showcase.v1beta1.IWaitResponse, protosTypes.google.showcase.v1beta1.IWaitMetadata>,
        protosTypes.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    return this._innerApiCalls.wait(request, options, callback);
  }
  pagedExpand(
      request: protosTypes.google.showcase.v1beta1.IPagedExpandRequest,
      options?: gax.CallOptions):
      Promise<[
        protosTypes.google.showcase.v1beta1.IEchoResponse[],
        protosTypes.google.showcase.v1beta1.IPagedExpandRequest|null, 
        protosTypes.google.showcase.v1beta1.IPagedExpandResponse
      ]>;
  pagedExpand(
      request: protosTypes.google.showcase.v1beta1.IPagedExpandRequest,
      options: gax.CallOptions,
      callback: Callback<
          protosTypes.google.showcase.v1beta1.IEchoResponse[],
          protosTypes.google.showcase.v1beta1.IPagedExpandRequest|null,
          protosTypes.google.showcase.v1beta1.IPagedExpandResponse>): void;
/**
 * This is similar to the Expand method but instead of returning a stream of
 * expanded words, this method returns a paged list of expanded words.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.content 
 *   The string to expand.
 * @param {number} request.page_size 
 *   The amount of words to returned in each page.
 * @param {string} request.page_token 
 *   The position of the page to be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [PagedExpandResponse]{@link google.showcase.v1beta1.PagedExpandResponse}.
 *   
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [PagedExpandResponse]{@link google.showcase.v1beta1.PagedExpandResponse} in a single response.
 *   The second element is the next request object if the response
 *   indicates the next page exists, or null. The third element is
 *   an object representing [PagedExpandResponse]{@link google.showcase.v1beta1.PagedExpandResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  pagedExpand(
      request: protosTypes.google.showcase.v1beta1.IPagedExpandRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protosTypes.google.showcase.v1beta1.IEchoResponse[],
          protosTypes.google.showcase.v1beta1.IPagedExpandRequest|null, 
          protosTypes.google.showcase.v1beta1.IPagedExpandResponse>,
      callback?: Callback<
          protosTypes.google.showcase.v1beta1.IEchoResponse[],
          protosTypes.google.showcase.v1beta1.IPagedExpandRequest|null,
          protosTypes.google.showcase.v1beta1.IPagedExpandResponse>):
      Promise<[
        protosTypes.google.showcase.v1beta1.IEchoResponse[],
        protosTypes.google.showcase.v1beta1.IPagedExpandRequest|null, 
        protosTypes.google.showcase.v1beta1.IPagedExpandResponse
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    return this._innerApiCalls.pagedExpand(request, options, callback);
  } 

/**
 * Equivalent to {@link pagedExpand}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link pagedExpand} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.content 
 *   The string to expand.
 * @param {number} request.page_size 
 *   The amount of words to returned in each page.
 * @param {string} request.page_token 
 *   The position of the page to be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [EchoResponse]{@link google.showcase.v1beta1.EchoResponse} on 'data' event.
 */
  pagedExpandStream(
      request?: protosTypes.google.showcase.v1beta1.IPagedExpandRequest,
      options?: gax.CallOptions | {}):
    Transform{
    request = request || {}; 
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.pagedExpand.createStream(
      this._innerApiCalls.pagedExpand as gax.GaxCall,
      request,
      callSettings
    );
  }
}
